<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Just a note</title>
    <subtitle>I think that should be worth being recorded</subtitle>
    <link href="https://shnarazk.github.io/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://shnarazk.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-09-03T00:00:00+00:00</updated>
    <id>https://shnarazk.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Sep</title>
        <published>2023-09-03T00:00:00+00:00</published>
        <updated>2023-09-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-09-03-UNSAT/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-09-03-UNSAT/</id>
        
        <content type="html">&lt;h2 id=&quot;respite&quot;&gt;respite&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;SAT2023のproceedingsゲット &lt;&#x2F;li&gt;
&lt;li&gt;BQNをgithubのサポート対象言語に取り込まれるようにbqnのファイル数を増やすのに忙しいのだ&lt;&#x2F;li&gt;
&lt;li&gt;そろそろRustの書き方忘れてきた&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Aug</title>
        <published>2023-08-06T00:00:00+00:00</published>
        <updated>2023-08-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-08-06-UNSAT/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-08-06-UNSAT/</id>
        
        <content type="html">&lt;h2 id=&quot;a_point_release&quot;&gt;a point release&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;なんかissueがついていたので主にドキュメントを更新してマイナーリリース。&lt;&#x2F;li&gt;
&lt;li&gt;BQNのライブラリ構成を色々と研究。&lt;&#x2F;li&gt;
&lt;li&gt;advent-of-code 2022をBQNで完遂目指している最中。&lt;&#x2F;li&gt;
&lt;li&gt;とりあえずSAT competitionの資料だけは手に入れておかねば。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, July</title>
        <published>2023-07-01T00:00:00+00:00</published>
        <updated>2023-07-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-07-01-UNSAT/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-07-01-UNSAT/</id>
        
        <content type="html">&lt;h2 id=&quot;Stop_again_continued&quot;&gt;Stop again continued&lt;&#x2F;h2&gt;
&lt;p&gt;宣告通り、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;全身麻酔のイベント&lt;&#x2F;li&gt;
&lt;li&gt;予後不良は言い過ぎ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;さらになぜか、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BQNの入門執筆&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ついでに&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;direnvの理解、あちこちに導入&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということでSplrは進展なし。&lt;&#x2F;p&gt;
&lt;p&gt;6月はすごくAPL, BQNの理解が進みましたw。&lt;&#x2F;p&gt;
&lt;p&gt;7月も無理だな。
積み上げたBQN版SAT solverの実装, 非Python版深層学習の実装, 
それよりも何よりも「&lt;a href=&quot;&#x2F;learn-bqn&quot;&gt;BQNの始め方&lt;&#x2F;a&gt;」の完成度を上げなければ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The difference of depth-first search and width-first search in BQN</title>
        <published>2023-06-04T00:00:00+00:00</published>
        <updated>2023-06-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/two-searches-in-bqn/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/two-searches-in-bqn/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=DmT80OseAGs&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=DmT80OseAGs&lt;&#x2F;a&gt; を見ながらAPL版Sudoku solverをBQNに&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;learn-bqn&#x2F;blob&#x2F;main&#x2F;TIL&#x2F;sudoku.bqn&quot;&gt;移植&lt;&#x2F;a&gt;していった。
ほぼ10行のプログラムで、前半はセル毎の関連セルインデックスマスクを生成し、後半はそれを使って穴を順に埋めていくというプログラムである。
探索は部分解の集合から次状態集合への遷移関数&lt;code&gt;N&lt;&#x2F;code&gt;を使って1ステップ進んだ状態集合を求めていく過程になる。
こんな感じ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;{ 𝕊N¨𝕨}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;次に&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YnJ1Yy6gpmA&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YnJ1Yy6gpmA&lt;&#x2F;a&gt; を見ながら深さ優先探索版も作ったのだが、
基本的に両者の違いは展開と再帰の順番の問題なのでそんなに大きくは変わらないだろうと想像できる。
実際に理解して書き換えたものはこちら(なんだが書いているうちに興奮してきた)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;{𝕊¨N𝕩}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実に類似性を見て取れるじゃないか。なんと文字数まで一緒とは！ 
すいません、嘘つきました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;N&lt;&#x2F;code&gt;はもともと「部分解集合から次状態の部分解集合への遷移関数」だったのをこっそり「部分解から部分解集合への関数」に拡大解釈していました。
ので、Nは「部分解から次状態の部分解集合への遷移関数」という方向で定義しなおしてみましょう。&lt;&#x2F;p&gt;
&lt;p&gt;すると幅優先探索で部分解集合から次の部分解集合を得るためには&lt;code&gt;S¨𝕩&lt;&#x2F;code&gt;ではダメで（集合の集合になってしまうので）、Haskellのmonadでいうところの&lt;code&gt;join&lt;&#x2F;code&gt;, Rustでの&lt;code&gt;flatmap&lt;&#x2F;code&gt;が必要になるけれども、それはBQNでは&lt;code&gt;∾&lt;&#x2F;code&gt;。ということで以下のコードが正しい。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;{ 𝕊∾N¨𝕨}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで深さ優先探索まであと1文字。
ところで、Nが部分解というスカラー（正確にはatom）を受け付けるなら、rank polymorphismにより部分解の集合(リスト)も受け付けるはずなので、こう書き換えることができる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;{ 𝕊∾N𝕨}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで6文字！&lt;&#x2F;p&gt;
&lt;p&gt;ということで、二つの探索アルゴリズムを並べるとご覧の通り。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;algorithm&lt;&#x2F;th&gt;&lt;th&gt;code&lt;&#x2F;th&gt;&lt;th&gt;point-free&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;width-first&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;{𝕊∾N𝕩}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;𝕊∾N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;depth-first&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;{𝕊¨N𝕩}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;𝕊¨N&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;くそ美しいな！
BQNプログラマにとって幅優先はニョロ、深さ優先はチョンチョンなのだ！
(point-free版も追加してみたのだが、ここで&lt;code&gt;𝕊&lt;&#x2F;code&gt;が使えるかどうかちょっと疑問ではある。)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, June</title>
        <published>2023-06-02T00:00:00+00:00</published>
        <updated>2023-06-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-06-02-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-06-02-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Stop_again,_distracted&quot;&gt;Stop again, distracted&lt;&#x2F;h2&gt;
&lt;p&gt;Splrの並列化は突然やる気を失って中断してしまった。&lt;&#x2F;p&gt;
&lt;p&gt;やる気を失ってというだけではなくて、
ちょっとは仕事に関係してきそうなのでPythonでの機械学習(を教えるため)の基礎の勉強を始めて、
でもPythonを個人的に使う気には全然なれなくてRustとBQNで書き直しながら選んだテキストを読んでいったりしてました。&lt;&#x2F;p&gt;
&lt;p&gt;ところがそれも途中で中断して、やっぱり(Helixで)syntax highlightingなしでプログラミングなんかしたくないよなあという気分になってきて今度はBQN用のtree-sitterを書き出してしまった。
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;tree-sitter-bqn&quot;&gt;tree-sitter-bqn&lt;&#x2F;a&gt;はほぼ2週間程で完成にはこぎつけたけど、
体調悪かったり、三ヶ月連続出版のグインサーガ外伝最終巻を読む時間も必要だったりしたのでsplrの開発は完全に中断しているのでした。&lt;&#x2F;p&gt;
&lt;p&gt;6月は全身麻酔のイベントがあったりしてまた進展なさそう🤷。
むしろこの数日は1万変数規模の問題に対するBQN版SAT solverの開発にすごく興味があってまずはAPL版Sudokuソルバの読解と移植なんかやっていたりして。&lt;&#x2F;p&gt;
&lt;p&gt;はたして日本人でBQNを使える人は何人いるのだろうか。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, May</title>
        <published>2023-05-05T00:00:00+00:00</published>
        <updated>2023-05-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-05-05-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-05-05-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Parallel_propagation!&quot;&gt;Parallel propagation!&lt;&#x2F;h2&gt;
&lt;p&gt;なんかdocumentationに関するissueが立っていたのでちょっと英文を足して、
それだけではリリースにならないのでちょっと並列化を考えてみた。
SAT competitionのmain trackに参加する気ならそれはしない方がいいのだけど、
もはやどういう手段でもいいから高速化する方が、
そこそこいる利用者には喜ばれるのではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;ということでpropagationの中の節ごとに新規リテラルを決定する部分を並列化してみた。
そうすると単位伝播が起きた時に一気にrollbackしないといけないので、
ちょっと単位伝播の「到達性」を緩めてやってrollbackの必要度を下げるような工夫までしたのだが、、、。&lt;&#x2F;p&gt;
&lt;p&gt;rayonを使った簡単便利な高速化が全然成果が出ない。
並列化する条件を変えてみたり、リストの長さを調整したりして並列化オーバーヘッドは克服する程度の粒度は確保できているはずなのに劇的に速度が落ちる。
挙げ句の果てに長さ2のリストを&lt;code&gt;into_par_map&lt;&#x2F;code&gt;してみてもtopで見ると6から7スレッドが走っているtという意味不明な現象に悩まされる。
私の知る限りではこういうことはspin lockしてないと起きないはずなんだけどなあ。
で、tokio化に取り組んでみたり、multi-threaded runtime上でのasync&#x2F;awaitを考えてみたりして、大変さにめげてしまった（上に成果が出ない）ところで休止中。&lt;&#x2F;p&gt;
&lt;p&gt;結局、今月たまたまredditに投稿されていたrayon並列化に対する質問によればやはりrayonはspin lockしているらしい。うーんそれでも効果がある場合にはあるのかあ。
なぜparallel propagationはその範疇に入らないのだろう。
謎だ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to run &#x27;nix-build&#x27; on flake-based nix system</title>
        <published>2023-04-14T00:00:00+00:00</published>
        <updated>2023-04-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-04-14_nix-build/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-04-14_nix-build/</id>
        
        <content type="html">&lt;p&gt;&lt;code&gt;-I&lt;&#x2F;code&gt;オプションを知っていればnix-build用に書かれたxxxxx.nixを使うことができますな。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix build -I nixpkgs=https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;archive&#x2F;master.tar.gz --impure --file  xxxxxx.nix -o  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;-I&lt;&#x2F;code&gt;から&lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;&#x2F;code&gt; が設定される。以下&lt;code&gt;nix shell --help&lt;&#x2F;code&gt;より：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a path in the Nix search path starts with http:&#x2F;&#x2F; or https:&#x2F;&#x2F;, it is interpreted as the URL of a
tarball that will be downloaded and unpacked to a temporary location. The tarball must consist of a
single top-level directory. For example, passing&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;-I nixpkgs=https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;archive&#x2F;master.tar.gz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;tells Nix to download and use the current contents of the master branch in the nixpkgs repository.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;いっそのこと.zshrcで&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;export NIX_PATH=https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;archive&#x2F;master.tar.gz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;としておくのがよいかも。&lt;&#x2F;p&gt;
&lt;p&gt;ここでxxxx.nixは以下のような実行ファイル（derivationファイルではない）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;nixpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dockerTools&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buildLayeredImage {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;nix-hellow&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;latest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;contents &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;hello ]; 
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なので場合によっては修正が必要。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Apr.</title>
        <published>2023-04-05T00:00:00+00:00</published>
        <updated>2023-04-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-04-05-UNSATog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-04-05-UNSATog/</id>
        
        <content type="html">&lt;h2 id=&quot;no_activity_there&quot;&gt;no activity there&lt;&#x2F;h2&gt;
&lt;p&gt;0.18のbranch切って、SLSを0.17の上で走らせてみたけど、系統的ソルバーが積み上げてきたものを壊しているだけのようだ、というのが3月の唯一の進展。それからまた休眠。&lt;&#x2F;p&gt;
&lt;p&gt;んー、Pythonの（教える側の）勉強とか、読書とか、なぜかまた復活したSmalltalk熱とかで時間は過ぎていくのでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;補足1&quot;&gt;補足1&lt;&#x2F;h2&gt;
&lt;p&gt;またissueが立ったので対応しなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;補足2&quot;&gt;補足2&lt;&#x2F;h2&gt;
&lt;p&gt;「なぜか」とは書いたもののきっかけは(pure) PythonよりもPharoの方が10倍速かったから。
Pharoは色々と頑張っているなあと思いました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>BQNでAoC2022 day19を解こう</title>
        <published>2023-03-07T00:00:00+00:00</published>
        <updated>2023-03-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-03-07-aoc2022-day19/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-03-07-aoc2022-day19/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2022&#x2F;day&#x2F;19&quot;&gt;Advent of Code y2022 day19&lt;&#x2F;a&gt;の&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mlochbaum&#x2F;BQN&quot;&gt;BQN&lt;&#x2F;a&gt;解法に大変苦労した（している）のでちょこっとメモしておこう。&lt;&#x2F;p&gt;
&lt;p&gt;基本的には最短経路問題なので&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;advent-of-code&#x2F;blob&#x2F;main&#x2F;src&#x2F;y2022&#x2F;day19.rs&quot;&gt;Rust版&lt;&#x2F;a&gt;だとこんな感じ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; to_visit: BinaryHeap;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; visited: HashSet;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(state) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; to_visit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; next &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;next) {
&lt;&#x2F;span&gt;&lt;span&gt;      visited.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;next);
&lt;&#x2F;span&gt;&lt;span&gt;      to_visit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;next);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを基にBQN版を作っていったのだがとても遅くて解けるとは言えなかったのでさらに知恵を絞ることになった。
ちなみに&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dzaima&#x2F;aoc&#x2F;blob&#x2F;master&#x2F;2022&#x2F;BQN&#x2F;19.bqn&quot;&gt;dzaima版&lt;&#x2F;a&gt;は実行してない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1._時間を単位とする遷移からロボット追加を単位とする遷移へ&quot;&gt;1. 時間を単位とする遷移からロボット追加を単位とする遷移へ&lt;&#x2F;h2&gt;
&lt;p&gt;これはRust版でも実装済み。状態空間を縮小するため、何もしないで資源が増えるだけの次クロック状態を保持するのではなく、ロボットの増加させた後の状態への遷移で次状態を定義しよう。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2._必要以上にロボットを溜め込む必要はない&quot;&gt;2. 必要以上にロボットを溜め込む必要はない&lt;&#x2F;h2&gt;
&lt;p&gt;clayロボットだけを作り続ける遷移は意味がない。他のロボットも作らねば。
ということで必要以上にロボットを溜め込むような次状態は探索対象に追加しないようにした。
これで状態数が有限に抑えられ、時間計算量も空間計算量も削減できる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3._N台のロボットの状態からN+1台のロボットの状態に遷移したあとではN台のロボットの状態を記憶しておく必要はない。&quot;&gt;3. N台のロボットの状態からN+1台のロボットの状態に遷移したあとではN台のロボットの状態を記憶しておく必要はない。&lt;&#x2F;h2&gt;
&lt;p&gt;ロボット数の増加が状態遷移をもたらすなら、ロボット数Nの状態からなる集合をそれぞれ展開（探索）してできる状態集合は（全ての）ロボット数N+1の状態なので探索済みかどうかはその集合内要素が重複していないことの判定に帰着する。
N未満のロボット数の状態を記憶しておく必要はない。Life gameのように2つのbagを切り替えながら展開していけばよい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4._状態の枝刈&quot;&gt;4. 状態の枝刈&lt;&#x2F;h2&gt;
&lt;p&gt;さらに状態が完全に順序付け可能なら枝刈ができる。つまり&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;時刻が早い&lt;&#x2F;li&gt;
&lt;li&gt;資源（鉱石量）が多い&lt;&#x2F;li&gt;
&lt;li&gt;ロボットが多い&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ならば、小さな方の状態を展開対象に追加する必要はない。&lt;&#x2F;p&gt;
&lt;p&gt;Rust版では完全一致だけしか見ていなかったのでより良い枝刈ができる。多分$O(N)$の総当たりな実装でも見合うはず。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5._深さ1のリスト化&quot;&gt;5. 深さ1のリスト化&lt;&#x2F;h2&gt;
&lt;p&gt;性能に寄与するのかしないのかわからないのだが、状態の表現をネストをやめてフラットなベクターにしてみた。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;time‿⟨nore‿nclay‿nobsidian‿ngeode⟩‿⟨rore‿rclay‿robsidian‿rgeode⟩
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;がこうなった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;time‿nore‿nclay‿nobsidian‿ngeode‿rore‿rclay‿robsidian‿rgeode
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;6._時間方向を逆転することによる状態の半順序関係定義の簡略化&quot;&gt;6. 時間方向を逆転することによる状態の半順序関係定義の簡略化&lt;&#x2F;h2&gt;
&lt;p&gt;状態の順序関係の定義は時刻だけが不等号の向きが逆で残念なことになっているので、統一しよう。
そのため、時刻は0から始まり&lt;code&gt;¯∞&lt;&#x2F;code&gt;に向かって進むことにすると時刻が早いとは値が大きいことを意味するので、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;{(𝕨(&amp;gt;○⊑)𝕩)∧(𝕨((∧´&amp;lt;)○(1↓))𝕩)}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;はこうなる：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;(∧´&amp;lt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;golf!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7-X._既に状態集合に登録された状態の枝刈&quot;&gt;7-X. 既に状態集合に登録された状態の枝刈&lt;&#x2F;h2&gt;
&lt;p&gt;新しい状態を登録するかどうかを既に登録されている次状態との順序関係に基づき判定することが有効なら、
逆に登録済みの状態の削除も有効なはずなんだが速度が2倍ほど低下してしまった。
計算コストの問題だろうか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7._状態集合の整列&quot;&gt;7. 状態集合の整列&lt;&#x2F;h2&gt;
&lt;p&gt;一方、Nロボットの状態からの遷移先を全て求めた後で、N+1状態の展開を始める前に状態集合をソートしてやるとなぜか実行時間が半分ほどになった。
ソートは昇順でなければならず、降順だと1時間経っても終わらなかった。
ただし&lt;code&gt;´&lt;&#x2F;code&gt;でfoldしているので実際には降順、つまり終了時刻に近い方から展開しているので、
深さ優先探索になったようだ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;advent-of-code&#x2F;blob&#x2F;main&#x2F;bqn&#x2F;2022&#x2F;day19.bqn&quot;&gt;ここ&lt;&#x2F;a&gt;までで脳みそ切れ。頑張ったのだがpart2は10分掛かる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;追記&quot;&gt;追記&lt;&#x2F;h2&gt;
&lt;p&gt;syntax highlighterのどれかがBQNに対応したという話を見たのでちょっと貼り付けてみよう。&lt;&#x2F;p&gt;
&lt;p&gt;こちらは&lt;code&gt;apl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;  Examine ← { u 𝕊 n:
&lt;&#x2F;span&gt;&lt;span&gt;    best‿bp‿upto ← ⟨0,n⊏data,-u⟩
&lt;&#x2F;span&gt;&lt;span&gt;    masks‿limits ← ⟨0&amp;lt;˘bp,0‿0‿0‿∞⌈⌈´˘⍉bp⟩
&lt;&#x2F;span&gt;&lt;span&gt;    Expand ← {
&lt;&#x2F;span&gt;&lt;span&gt;      𝕊 ⟨⟩: best;
&lt;&#x2F;span&gt;&lt;span&gt;      𝕊 cands:
&lt;&#x2F;span&gt;&lt;span&gt;        𝕊 ∧ ⟨⟩ { time‿resources‿robots 𝕊 next:
&lt;&#x2F;span&gt;&lt;span&gt;          { 𝕊 i:
&lt;&#x2F;span&gt;&lt;span&gt;            upto&amp;lt; t ← time- w ← 1+⌈⌈´(i⊏masks)&#x2F;robots÷˜(n ← i⊏bp)(0⊸⌈-)resources ?
&lt;&#x2F;span&gt;&lt;span&gt;              { ¬∨´(∧´𝕩⊸≤)¨next ? next ⟨𝕩⟩⊸∾ ↩, best ((4⊑𝕩)+(t-upto)×¯1⊑𝕩)⊸⌈ ↩ ;@
&lt;&#x2F;span&gt;&lt;span&gt;              } t∾(n-˜resources+w×robots)∾((1⊸+)⌾(i⊸⊑)robots)
&lt;&#x2F;span&gt;&lt;span&gt;            ;@
&lt;&#x2F;span&gt;&lt;span&gt;          }¨{robots&amp;lt;○(𝕩⊸⊑)limits }¨⊸&#x2F;↕4
&lt;&#x2F;span&gt;&lt;span&gt;          next
&lt;&#x2F;span&gt;&lt;span&gt;        }´{⟨⊑𝕩,4↑1↓𝕩,5↓𝕩⟩}¨cands
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    (•Fmt n) lib.Debug Expand ⟨⟨0⟩∾⟨0,0,0,0⟩∾⟨1,0,0,0⟩⟩ # ⟨time,resources,robots⟩
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;こちらは&lt;code&gt;bqn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bqn&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bqn &quot;&gt;&lt;code class=&quot;language-bqn&quot; data-lang=&quot;bqn&quot;&gt;&lt;span&gt;  Examine ← { u 𝕊 n:
&lt;&#x2F;span&gt;&lt;span&gt;    best‿bp‿upto ← ⟨0,n⊏data,-u⟩
&lt;&#x2F;span&gt;&lt;span&gt;    masks‿limits ← ⟨0&amp;lt;˘bp,0‿0‿0‿∞⌈⌈´˘⍉bp⟩
&lt;&#x2F;span&gt;&lt;span&gt;    Expand ← {
&lt;&#x2F;span&gt;&lt;span&gt;      𝕊 ⟨⟩: best;
&lt;&#x2F;span&gt;&lt;span&gt;      𝕊 cands:
&lt;&#x2F;span&gt;&lt;span&gt;        𝕊 ∧ ⟨⟩ { time‿resources‿robots 𝕊 next:
&lt;&#x2F;span&gt;&lt;span&gt;          { 𝕊 i:
&lt;&#x2F;span&gt;&lt;span&gt;            upto&amp;lt; t ← time- w ← 1+⌈⌈´(i⊏masks)&#x2F;robots÷˜(n ← i⊏bp)(0⊸⌈-)resources ?
&lt;&#x2F;span&gt;&lt;span&gt;              { ¬∨´(∧´𝕩⊸≤)¨next ? next ⟨𝕩⟩⊸∾ ↩, best ((4⊑𝕩)+(t-upto)×¯1⊑𝕩)⊸⌈ ↩ ;@
&lt;&#x2F;span&gt;&lt;span&gt;              } t∾(n-˜resources+w×robots)∾((1⊸+)⌾(i⊸⊑)robots)
&lt;&#x2F;span&gt;&lt;span&gt;            ;@
&lt;&#x2F;span&gt;&lt;span&gt;          }¨{robots&amp;lt;○(𝕩⊸⊑)limits }¨⊸&#x2F;↕4
&lt;&#x2F;span&gt;&lt;span&gt;          next
&lt;&#x2F;span&gt;&lt;span&gt;        }´{⟨⊑𝕩,4↑1↓𝕩,5↓𝕩⟩}¨cands
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    (•Fmt n) lib.Debug Expand ⟨⟨0⟩∾⟨0,0,0,0⟩∾⟨1,0,0,0⟩⟩ # ⟨time,resources,robots⟩
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Mar.</title>
        <published>2023-03-04T00:00:00+00:00</published>
        <updated>2023-03-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-03-04-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-03-04-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;no_activity_now&quot;&gt;no activity now&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目玉になるはずだったSLSも書いてはみたものの全然性能に結び付きませんでした。
0.17をベースにもう少し追いかけて見る気はあるけど、&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;何も手をつけてません。
GodotのチュートリアルとPythonの（教える側の）勉強と、んー、それくらいで一ヶ月が過ぎちゃった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Uncurry is a special case of fold</title>
        <published>2023-03-02T00:00:00+00:00</published>
        <updated>2021-03-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-03-02-uncurry-is-fold/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-03-02-uncurry-is-fold/</id>
        
        <content type="html">&lt;h1 id=&quot;What&#x27;s_this!?&quot;&gt;What&#x27;s this!?&lt;&#x2F;h1&gt;
&lt;p&gt;まずは復習、以下の二つの関数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;span&gt;f´&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt; × &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;B  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;の変換過程はカリー化として知られている。正確には&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;f´ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; curry
&lt;&#x2F;span&gt;&lt;span&gt;f  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; f´ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; uncurry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;となる。&lt;&#x2F;p&gt;
&lt;p&gt;さて、ここでリストに対する基本操作&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;fold(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;,l)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;を考えよう。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;fold(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;,l) ≡ a &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; d&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {a, b, c, d&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで、curry braceは（なぜだか）リストを意味するものとする。&lt;&#x2F;p&gt;
&lt;p&gt;注目すべき簡単な例を示す:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;fold(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;,l) ≡ a &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {a, b}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここでHaskellが持つ関数-オペレータ間の変換機能・構文を使って書き直すと、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ `fold`&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; {a, b}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;となるし、さらに部分適用を使ってポイントフリー的な感じに表記し直すと、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;(+): A -&amp;gt; B -&amp;gt; C
&lt;&#x2F;span&gt;&lt;span&gt;(+).fold: {A,B} -&amp;gt; C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで &lt;code&gt;fold&lt;&#x2F;code&gt; の話と繋がった：
もし&lt;code&gt;A × B&lt;&#x2F;code&gt;が&lt;code&gt;{A,B}&lt;&#x2F;code&gt;と同じなら（そのような言語なら）、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;fold &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; uncurry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なんてこった。BQNにハマるまで気づかなかった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Feb.</title>
        <published>2023-01-31T00:00:00+00:00</published>
        <updated>2023-01-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-01-31-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-01-31-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Finally_0.17&quot;&gt;Finally 0.17&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;このバージョンでは経験に基づく意味不明なヒューリスティックスを消しているので、 ある程度性能が悪くなって(代わりに伸び代が大きくならせたつもり)もリリースするつもりだったけどそうも行かないようだ。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;sat-benchを使ったマイクロベンチマークではそこそこいいのに、
SAT competition 2021の問題だとこの4年の開発の歴史をなかったことにするような結果しか出なくてギブアップ気味だったのだけど、
この開発フェーズで導入した&#x27;two-mode reduction&#x27;のパラメータ設定がかなりシビアなことに気付いてハンドチューニングを始めたら、
一発で最高の性能が出てしまった。
two-mode reductionはcycle内のexploitation modeでは活性度が高いリテラルを含む節を総数を減らさないように節数を調整することで深い探索を邪魔しないようにして、
新たなcycleが始まるタイミングではLSD基準で総数を削減して探索方向をリセットするというものなので、
そんなにおかしなことはしていないはずなのだ
(まあリリース直前まで動的な別の方針だったけど)。
ということで、ようやく&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;Splr-0.17.0&quot;&gt;0.17のリリース&lt;&#x2F;a&gt;にこぎ着けました。&lt;&#x2F;p&gt;
&lt;p&gt;今回の目玉はコーナーケースでのバグフィックスかなあ。それとstage-cycle-segmentモデルの深化。
導入したてで色々とパラメータの定義、値におかしなところがあった。
目玉になるはずだったSLSも書いてはみたものの全然性能に結び付きませんでした。
0.17をベースにもう少し追いかけて見る気はあるけど、
昨今の電力事情を考えると3nmなM3搭載macを入手するまではベンチマークやりたくないわ。&lt;&#x2F;p&gt;
&lt;p&gt;ということでこれくらいのベースでの開発が続くでしょう。
0.18は0.99くらいになるかもしれない。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2023, Jan.</title>
        <published>2023-01-17T00:00:00+00:00</published>
        <updated>2023-01-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-01-17-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-01-17-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;ways_to_0.17&quot;&gt;ways to 0.17&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;いまだにリリースできていません。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;先月から変わらず。と言っても&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;advent-of-code&#x2F;tree&#x2F;main&#x2F;src&#x2F;y2022&quot;&gt;advent of code 2022 rust stage&lt;&#x2F;a&gt;が終わり、
続けてはじまった&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;advent-of-code&#x2F;tree&#x2F;main&#x2F;bqn&quot;&gt;bqn stage&lt;&#x2F;a&gt;もまあ大体気の済むところまで来たので戻って来たんだけど、
性能が悪い。&lt;&#x2F;p&gt;
&lt;p&gt;このバージョンでは経験に基づく意味不明なヒューリスティックスを消しているので、
ある程度性能が悪くなって(代わりに伸び代が大きくならせたつもり)もリリースするつもりだったけどそうも行かないようだ。
かと言ってこの物価高の時代にポンポンとベンチマークを走らせるわけにも行かずサクサクと
リリースまで漕ぎ着けない状況です。&lt;&#x2F;p&gt;
&lt;p&gt;過学習にならないようにsat-benchの問題セットは選択したつもりだったのだけど、変数数が少ない方向に偏っていたのだろうか。
納得行く妥協点が見つかり次第0.17をリリースしましょう。&lt;&#x2F;p&gt;
&lt;p&gt;splrの開発が滞っていた代わりというわけではないけど、ようやくsat-bench&#x2F;benchmの&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&#x2F;commit&#x2F;9de9d04ccaafe763dd373bd3a7242d5633f792c2&quot;&gt;async&#x2F;await化&lt;&#x2F;a&gt;が終わり、
matrixとのIFがSDKを使ったものになりました。（なのでベンチマークをする環境が復活したのだ。）&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Matrix product in BQN</title>
        <published>2023-01-01T00:00:00+00:00</published>
        <updated>2021-01-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2023/2023-01-01-matrix-product-in-bqn/" type="text/html"/>
        <id>https://shnarazk.github.io/2023/2023-01-01-matrix-product-in-bqn/</id>
        
        <content type="html">&lt;h1 id=&quot;What&#x27;s_this!?&quot;&gt;What&#x27;s this!?&lt;&#x2F;h1&gt;
&lt;p&gt;advent of codeの問題を解くため、配列の乗算をBQNで定義した。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;ProductIndices ← {d←𝕩⋄({(((⊑𝕩)⊸⋈)(⋈)(⋈⟜(1⊑𝕩)))¨↕d}⋈)⌜˜↕𝕩}
&lt;&#x2F;span&gt;&lt;span&gt;MyProduct ← {(+´((𝕩⊑˜1⊸⊑)×(𝕨⊑˜0⊸⊑))¨)⌜ ProductIndices ≠𝕨}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;完成した後でBQNcrateで検索してみたらこうなった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;apl&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-apl &quot;&gt;&lt;code class=&quot;language-apl&quot; data-lang=&quot;apl&quot;&gt;&lt;span&gt;Product ← +˝∘×⎉1‿∞
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なんじゃこりゃ？！&lt;&#x2F;p&gt;
&lt;p&gt;というのをgithubのリポジトリに書き始めてこりゃブログでやるこっちゃなと思ったのでこちらに引っ越し。
なんなんだよこのグリフ&lt;code&gt;⎉&lt;&#x2F;code&gt;は？&lt;&#x2F;p&gt;
&lt;p&gt;ふーむ、どうもtensor上に一般化されたtraverseのようだ。それも2引数版で𝕩と𝕨でそれぞれたどる単位を指定できるらしい。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;0だとスカラー&lt;&#x2F;li&gt;
&lt;li&gt;1だとleading axisに沿ったセル単位&lt;&#x2F;li&gt;
&lt;li&gt;2だと対象が2次元配列なら配列全体&lt;&#x2F;li&gt;
&lt;li&gt;∞なら対象のrankによらず配列全体&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;となるので結局列ベクターと行列全体の乗算になる(この定義は自明なんだろうか？)。
これは3次元tensorになるので&lt;code&gt;+˝&lt;&#x2F;code&gt;で最後の軸でfoldしてしまえば全く素直に行列の乗算を定義通りに実行することになる。&lt;&#x2F;p&gt;
&lt;p&gt;なるほど。。。
大変感心した。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Dec.</title>
        <published>2022-12-04T00:00:00+00:00</published>
        <updated>2022-12-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-12-04-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-12-04-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;ways_to_SLS&quot;&gt;ways to SLS&lt;&#x2F;h2&gt;
&lt;p&gt;いまだにリリースできていません。
サボっていたわけではなくて、なんか別のヒューリスティックスが生まれてきてしまったせいなので、
なんだかんだでおそらくかなり電気代は使っているはずなのだ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Nov.</title>
        <published>2022-11-01T00:00:00+00:00</published>
        <updated>2022-11-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-11-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-11-01-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;ways_to_SLS&quot;&gt;ways to SLS&lt;&#x2F;h2&gt;
&lt;p&gt;久しぶりに10月はどっぷりSAT solver開発に没頭しました。
どういう気まぐれかSLSにとうとう取り組んで、あっという間にできたけど性能上がらず、苦悩の日々。
色々なことに手を出して収拾が付かなくなったので、branch切り直してstageの修正、clause reductionの修正とやって行ったら、
sat-benchでのマイクロベンチマークでの話だけどえらく改善してしまった。
もうSLSなしで0.17をリリースしてもいいくらい。&lt;&#x2F;p&gt;
&lt;p&gt;まあ今年はまだ2ヶ月あるので、当分はSLSで粘ることになりそうです。
いや、12月はadvent of codeに持って行かれるので今月一杯くらいか。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Oct.</title>
        <published>2022-10-04T00:00:00+00:00</published>
        <updated>2022-10-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-10-04-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-10-04-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;recap_of_September&quot;&gt;recap of September&lt;&#x2F;h2&gt;
&lt;p&gt;bug fix releaseとして0.16.3をリリース。
なかなか収束しないincremental solver featureなのでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;And_now&quot;&gt;And now&lt;&#x2F;h2&gt;
&lt;p&gt;またまた姑息な黒魔術(変数活性度のチューニング）の魅力に取り憑かれてしまった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Overlaying Rustic Nixpkgs</title>
        <published>2022-09-27T00:00:00+00:00</published>
        <updated>2022-09-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-09-27-overlaying-Rusty-nixpkgs/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-09-27-overlaying-Rusty-nixpkgs/</id>
        
        <content type="html">&lt;h1 id=&quot;Rust_crateをNix_flakeにしたい場合のあれこれ&quot;&gt;Rust crateをNix flakeにしたい場合のあれこれ&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;ちょっと試したいcrateがopensslを要求する場合&quot;&gt;ちょっと試したいcrateがopensslを要求する場合&lt;&#x2F;h2&gt;
&lt;p&gt;pkg-configとopenssl-devが必要。さらにpkg-configにopensslの情報を渡してやることが必要。
なので以下のようになる
（なぜか私の環境では相変わらずnix-shellが追加した環境をprofileに渡せないままなのだ）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ nix shell nixpkgs#pkg-config nixpkgs#openssl
&lt;&#x2F;span&gt;&lt;span&gt;$ PKG_CONFIG_PATH=&#x2F;nix&#x2F;store&#x2F;${OPENSSL_DEV}&#x2F;lib PATH=&#x2F;nix&#x2F;store&#x2F;${PKG_CONFIG}&#x2F;bin cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;crateのバージョンを上げるためにcargoSha256を変更する必要がある場合&quot;&gt;crateのバージョンを上げるために&lt;code&gt;cargoSha256&lt;&#x2F;code&gt;を変更する必要がある場合&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;discourse.nixos.org&#x2F;t&#x2F;is-it-possible-to-override-cargosha256-in-buildrustpackage&#x2F;4393&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;cargoDeps &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; PACKAGE&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;cargoDeps&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;overrideAttrs (lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;const {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;pname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}-vendor.tar.gz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputHash &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sha256-AyRsxT+4TdRdtKrodK+7N+Y&#x2F;UkeA67OepnMLIpK1WR8=&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;})&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;cargoSha256&lt;&#x2F;code&gt;は評価されてしまって&lt;code&gt;cargoDeps.outputHash&lt;&#x2F;code&gt;なる内部データになってしまっているそうだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2022-09-28:「私の環境では相変わらずnix-shellが追加した環境をprofileに渡せない」理由&quot;&gt;2022-09-28:「私の環境では相変わらずnix-shellが追加した環境をprofileに渡せない」理由&lt;&#x2F;h2&gt;
&lt;p&gt;アホのような原因だった。.bashrc, .zshrcの中でPATHをリセットしていたからだった。
SHELLを&#x2F;bin&#x2F;shに切り替えるとちゃんと動作することから判明しました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Nix Flake of Alacrity 0.11.0</title>
        <published>2022-09-24T00:00:00+00:00</published>
        <updated>2022-09-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-09-24-Flake-of-Alacritty-0.11/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-09-24-Flake-of-Alacritty-0.11/</id>
        
        <content type="html">&lt;h2 id=&quot;weztermへの乗り換えは中止&quot;&gt;weztermへの乗り換えは中止&lt;&#x2F;h2&gt;
&lt;p&gt;最近&lt;a href=&quot;https:&#x2F;&#x2F;zellij.dev&quot;&gt;zellij&lt;&#x2F;a&gt;というのを知ってtmuxからの乗り換えを策略中。
でついでに&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wez&#x2F;wezterm&quot;&gt;wezterm&lt;&#x2F;a&gt;も試しにインストールしてみたり、マニュアルを読んだりしていた。
ふと思い出して&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt;のリポジトリをチェックしてみたら、
RCが出てるじゃないか！
履歴を確認すると、ちゃんと依存関係が更新されて、
日本語IMEが正しく動くために必要な&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-windowing&#x2F;winit&quot;&gt;winit&lt;&#x2F;a&gt;の最新版が使われている！
これは試さなければということで早速binaryをダウンロードしてみた。
期待通りだった。
現在RC2まで来ているので、まあそんなに長くはかからずにリリースされ、
nixpkgとして配布されるだろうけども、待ち遠しいので
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;flakes&#x2F;blob&#x2F;main&#x2F;alacritty-head&#x2F;flake.nix&quot;&gt;flake&lt;&#x2F;a&gt;にしてみた。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;CargoSha256&lt;&#x2F;code&gt;がどうしても期待通りに評価されなかったのでググって何が起きているのか
（何故このエラーメッセージが表示されるのか）を調べた。
うむ、これもまた「渡る世間は一筋縄では行かない」事象だったようだ。
実は今日はかなりnixプログラムの経験値が上がったような気がする。&lt;&#x2F;p&gt;
&lt;p&gt;話戻ってzellijはまあtmuxの代わりになるレベル。
操作体系がよりモーダルぽくなっているのがhelix&#x2F;vim person向けな感じ（修飾キーを駆使するのではなく、つまりはインサートモードを抜けて、複数ある操作モードに入って編集する）。
ただ、それほど開発が活発でないのが気になるところ。あと画面に表示された文字列のコピーがマウスを使うか、EDITORに取り込ませるかしかないのがもどかしいところ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Sep</title>
        <published>2022-09-08T00:00:00+00:00</published>
        <updated>2022-09-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-09-08-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-09-08-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Splr-0.16.0,_Splr-0.16.1_and_Splr-0.16.2&quot;&gt;Splr-0.16.0, Splr-0.16.1 and Splr-0.16.2&lt;&#x2F;h2&gt;
&lt;p&gt;0.16のリリース予定はなし、だったのだがincremental_solver関連でissueが立ってしまったので修正して0.16.0をリリースしました。
cargo publishしたら新たにsubcrateとして追加したものが同名のcrateと関連づけられてしまうことがわかったので名前を変えて0.16.1としリリースしたら
今度はlocal crateを参照するものはcrates.ioに登録できないことが判明。
sub crateかするのをやめるタイミングでもう一つissueが立ったのでそれも修正して0.16.2としてrelease &amp;amp; publish。
久しぶりにゴタゴタしてしまいました。&lt;&#x2F;p&gt;
&lt;p&gt;いやーincremental sovlerの機能はしばらく見てなかったのでちょっとは気になっていたんだけど、
案の定こういうことになってしまった。
残念なことにclause eliminationとの論理的整合性を取るのは大変に難しそうだったので、
incremental_solverではprocessorは切らざるを得ないという結論になってしまった。
まあしょうがない。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに検証のためのcadicalやkissatを使ったのだけど、桁違いに速いわけではないなあと不遜にも思いました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;9月&quot;&gt;9月&lt;&#x2F;h2&gt;
&lt;p&gt;Advent of Codeを完走してしまったので！！、まあ本業に戻らねば。
何が本業かというのは問題だが、webサービスの開発ではないな。あほくさ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Aug</title>
        <published>2022-08-10T00:00:00+00:00</published>
        <updated>2022-08-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-08-10-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-08-10-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Highlights_of_SAT_20222_&amp;amp;_SAT_competition_2022&quot;&gt;Highlights of SAT 20222 &amp;amp; SAT competition 2022&lt;&#x2F;h2&gt;
&lt;p&gt;更新忘れていたわけではなくて、SAT Competition 2022の結果を待っていたら10日を過ぎてしまった。
SAT 2022の方は開催中の8月5日には ただで入手できて、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Alexander Nadel, &lt;em&gt;Introducing Intel SAT solver&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Armin Bierre et al, &lt;em&gt;Migrating Solver State&lt;&#x2F;em&gt; &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;あたりがまあ読んでみようかなという感じ。&lt;&#x2F;p&gt;
&lt;p&gt;でCompetitionの方だけど、今に始まった事ではないけど、まあ, Cadical, Kissat、若干のその他という有様。
以前はチラホラ見られたC++以外の言語で記述されたソルバーもないようで、なんとかならんのか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Splr&quot;&gt;Splr&lt;&#x2F;h2&gt;
&lt;p&gt;rustのバージョン上げたらclippyにいくつか指摘されたのでそれらを修正しました。
&lt;code&gt;f64::total_cmp&lt;&#x2F;code&gt;はやった、と思ったのだけどいつの間にか浮動小数点数に基づくソートは使っていなかったのでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;8月&quot;&gt;8月&lt;&#x2F;h2&gt;
&lt;p&gt;Advent of Code 2017やってからbinary clauseのことを考えようかと思う。それとarenaのことも再度検討してみよう。
0.16のリリース予定はなし。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>TIL from Rustlings</title>
        <published>2022-07-22T00:00:00+00:00</published>
        <updated>2022-07-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-07-22-TIL-from-rustlings/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-07-22-TIL-from-rustlings/</id>
        
        <content type="html">&lt;p&gt;えらいuvされていたのでインストールしてみた。
エラーがなくなるようにソースを書き換えて行くことでRustの基礎を確認しようというプログラム。&lt;&#x2F;p&gt;
&lt;p&gt;90問ほどあるのでtmuxを左右2ペイン、左に&lt;code&gt;cargo run -- watch&lt;&#x2F;code&gt;, 右にhxの体制で3日掛かり(まあこれでも一気に、のつもり)でやってみた。&lt;&#x2F;p&gt;
&lt;p&gt;ということで、知らなかったことをメモ:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;enumの要素に直接struct的なフィールドが埋め込める。&lt;&#x2F;li&gt;
&lt;li&gt;iterator &lt;code&gt;chars&lt;&#x2F;code&gt; は 残りを&lt;code&gt;as_str&lt;&#x2F;code&gt;で集めることができる。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;[Result&amp;lt;_, _&amp;gt;].iter().collect()&lt;&#x2F;code&gt;は(turbofishがないので)&lt;code&gt;Ok&lt;&#x2F;code&gt;を集めたVecを作る。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>日本語でEngram on Ventura</title>
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-07-12-Engram-for-JP/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-07-12-Engram-for-JP/</id>
        
        <content type="html">&lt;h1 id=&quot;日本語でEngram_on_Ventura&quot;&gt;日本語でEngram on Ventura&lt;&#x2F;h1&gt;
&lt;p&gt;MacOS Ventura public betaが出たので各種設定の確認をしていて、
英字日本語入力のキーボードレイアウトに&#x27;BQN US&#x27;が含まれていることに気付いた。
これって標準以外のラテン配列が使えるということではないだろうか。
しかしEngramは現れない。ぱっと気づく違いは、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&#x27;BQN US&#x27;は単一ファイル(bqn.keylayout)なのに対し、Engramはbundleファイル。&lt;&#x2F;li&gt;
&lt;li&gt;&#x27;BQN US&#x27;はgroup=0なのに対し、Engramはgroup=126.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;なので&#x27;BQN US&#x27;に合わせて作り直したら、Engramで日本語入力できるようになった！！&lt;&#x2F;p&gt;
&lt;p&gt;ただしalacrittyでは非常に使いにくい。この半年近く何も変わっていないではないか。
ちなみに最近、UTF-8化にようやく取り組み出したCuis Smalltalkでは、
貼り付けはできるもののインライン入力はできない。
20世紀か。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, July</title>
        <published>2022-07-07T00:00:00+00:00</published>
        <updated>2022-07-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-07-07-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-07-07-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;休業〜&quot;&gt;休業〜&lt;&#x2F;h2&gt;
&lt;p&gt;相変わらず休業中〜。
更に最近目が悪くなってしまった。
目の調子がいい時はAdvent of Codeをするのに忙しい。&lt;&#x2F;p&gt;
&lt;p&gt;というわけで、動作の妥当性を証明するツールを使って書かれたRust製SATソルバーが出たのは知っているので、
気が向いたらそのうち見てみたい。
そして無料ダウンロードができるうちにSAT conferenceのproceedingを忘れずにダウンロード。
中見て面白そうなアイデアがあればそれを、
そうでなければ統計的局所探索を実装するというのが今年の残りの課題ですな。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, June</title>
        <published>2022-06-01T00:00:00+00:00</published>
        <updated>2022-06-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-06-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-06-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;Splr-0.15.0_in_May!&quot;&gt;Splr-0.15.0 in May!&lt;&#x2F;h2&gt;
&lt;p&gt;0.15.0リリースした。
いつものベンチマークは一切使わずに開発を行ったので性能はなるようになれ、という感じだったので、正当性の検証のルーチンワークで一回だけ走らせてみたら0.14より遥かによかったのでびっくりでした。
気分よく、またやる気がでるまで休眠です。&lt;&#x2F;p&gt;
&lt;p&gt;それで可処分時間は何に使ったかというと、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;monkeytype.com&#x2F;&quot;&gt;monkeytype&lt;&#x2F;a&gt;で&lt;a href=&quot;https:&#x2F;&#x2F;engram.dev&#x2F;&quot;&gt;Engram&lt;&#x2F;a&gt;の特訓&lt;&#x2F;li&gt;
&lt;li&gt;Advent of Codeを&lt;a href=&quot;https:&#x2F;&#x2F;mlochbaum.github.io&#x2F;BQN&#x2F;index.html&quot;&gt;BQN&lt;&#x2F;a&gt;で解く。しかしA* algorithmの実装で詰る。簡易Hashtable実装したりいろいろやったけど(普通にRustと書くのと同じくらいの行数になった)part 2問題のオーダーが下らない。&lt;&#x2F;li&gt;
&lt;li&gt;なのでやめたはずのSmalltalkに戻ってきた。こっちはinterpreterとして真っ当な時間で求解できる。なのでもう少し使ってみようかな。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;てな感じです。&lt;&#x2F;p&gt;
&lt;p&gt;Smalltalkの3大フリー処理系はどれも一長一短、まともにgithubベースのオープンな開発なのはPharoだけだろうと思い応援したいところなんだけども、画面が綺麗ではないのが残念すぎる。画面をスケーリングしたときの出来の悪さ!
Squeakは成熟した感じなんだけども実は一番イメージが大きいという(クラス数はPharoより随分少ないのだけど)。基本、githubでのリクエストは全部無視の形だけopen sourceで、アイコンの出来が異常に悪いCuisは言いたいことは色々あるのだけど、うーん一番の落とし所という結論になってしまいました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Calling Rust functions from Cuis-Smalltalk</title>
        <published>2022-05-30T00:00:00+00:00</published>
        <updated>2022-05-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-05-30-Rust-from-CuisSmalltalk/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-05-30-Rust-from-CuisSmalltalk/</id>
        
        <content type="html">&lt;h2 id=&quot;&quot;&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;なんということはない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Rust_side&quot;&gt;Rust side&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;まず、crateを準備&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cargo.toml&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[lib]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;crate-type&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;: [&amp;quot;cdylib&amp;quot;]&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;src&#x2F;lib.rs&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;rs&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rs &quot;&gt;&lt;code class=&quot;language-rs&quot; data-lang=&quot;rs&quot;&gt;&lt;span&gt;#[no_mangle]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;C&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rustfunc1&lt;&#x2F;span&gt;&lt;span&gt;(...) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;code&gt;cargo build --release&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;Smalltalk_side&quot;&gt;Smalltalk side&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Package Installer でFFIをインストール&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Classを作りメソッドを用意&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;smalltalk&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-smalltalk &quot;&gt;&lt;code class=&quot;language-smalltalk&quot; data-lang=&quot;smalltalk&quot;&gt;&lt;span&gt;test: arg
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;cdecl: returnType &amp;#39;rustfunc1&amp;#39; (argTypes) module:  &amp;#39;&#x2F;path-to-home-directory&#x2F;.cargo&#x2F;shared-target&#x2F;release&#x2F;crate_name.dylib&amp;#39; &amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ^self externalCallFailed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なお、cargo artifactsの置き場は共通、OSはMacOSを想定。&lt;&#x2F;p&gt;
&lt;p&gt;細かいことは &lt;a href=&quot;https:&#x2F;&#x2F;wiki.squeak.org&#x2F;squeak&#x2F;2426&quot;&gt;https:&#x2F;&#x2F;wiki.squeak.org&#x2F;squeak&#x2F;2426&lt;&#x2F;a&gt; を参照のこと。&lt;&#x2F;p&gt;
&lt;p&gt;あっという間にできちゃった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, May</title>
        <published>2022-05-03T00:00:00+00:00</published>
        <updated>2022-05-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-05-03-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-05-03-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;4月のまとめ&quot;&gt;4月のまとめ&lt;&#x2F;h2&gt;
&lt;p&gt;第1週は好調に進んでこのまま0.15にしてしまおうかという勢いだったのですが、ちょっとブレークを置いて違うことを始めたらsplrどころではなくなってしまいました。
あと電気代が高くなってベンチマークなんかやっとられんわ。まあほぼ今やれることはやったのでドキュメント更新して0.15をリリースしようと思います。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに、では4月はどういう月だったかというと、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;キーボードレイアウトをDovrakから&lt;a href=&quot;https:&#x2F;&#x2F;engram.dev&#x2F;&quot;&gt;Engram&lt;&#x2F;a&gt;に変えて入力スピードが激減。人生2度目のレイアウト変更。&lt;a href=&quot;https:&#x2F;&#x2F;monkeytype.com&#x2F;&quot;&gt;monkeytype&lt;&#x2F;a&gt;で日々特訓中。&lt;&#x2F;li&gt;
&lt;li&gt;Macのかな変換は標準ラテン入力レイアウトのどれかを要求するので、日本語入力の度に別のレイアウトを使わされる。それはいやなので日本語入力をskkに変更。20年ぶり？慣れるのが大変。&lt;&#x2F;li&gt;
&lt;li&gt;Alacrittyをインストール。標準ではないレイアウトのために設定が必要だった。True color化のためにまた設定とインストールが必要だった。&lt;&#x2F;li&gt;
&lt;li&gt;nushellを試してみた。プロセスコントロールができないことがわかって乗り替え中止。サスペンドができないなんてありえない。シェルを名乗ってはいけないだろ。&lt;&#x2F;li&gt;
&lt;li&gt;Smalltalkは現代のコンピュータアーキテクチャを生かせないので代りの「何かおもしろいこと」として&lt;a href=&quot;https:&#x2F;&#x2F;mlochbaum.github.io&#x2F;BQN&#x2F;index.html&quot;&gt;BQN&lt;&#x2F;a&gt;を本格的に&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;learn-bqn&quot;&gt;勉強開始&lt;&#x2F;a&gt;。行列難しい。&lt;&#x2F;li&gt;
&lt;li&gt;目とか背中とかお腹とかいろいろ痛い&lt;&#x2F;li&gt;
&lt;li&gt;仕事でもVS Codeを(ほぼ)やめてhelixに乗り換え。ただし当然ながらV+O文型のvimモードとの相性が悪いのでevil-modeが頭に入らなくなった。emacsの標準カーソル移動キーがEngramでは小指に集中するのでemacs&#x2F;vim入力モードのどちらも不自由になってしまった。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;てな感じです。&lt;&#x2F;p&gt;
&lt;p&gt;ということでソースには手を加えることなく0.15をリリースします、近日中に。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>MacOS -&gt; Nixpkgs -&gt; Alacritty -&gt; Tmux -&gt; truecolor</title>
        <published>2022-04-11T00:00:00+00:00</published>
        <updated>2022-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-04-11-MacOS-Nixpkgs-Alacritty-Tmux-truecolor/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-04-11-MacOS-Nixpkgs-Alacritty-Tmux-truecolor/</id>
        
        <content type="html">&lt;p&gt;MacOSの上でnixpkgsを使っている少数派なので一筋縄ではいかない。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;まずはnixでncursesをインストール（&#x2F;usr&#x2F;shareを書き換えない）&lt;&#x2F;li&gt;
&lt;li&gt;ネットですぐ見つかる方法で、.tmux.confで&lt;code&gt;default-terminal&lt;&#x2F;code&gt;と&lt;code&gt;terminal-overrides&lt;&#x2F;code&gt;を記述&lt;&#x2F;li&gt;
&lt;li&gt;tmux show -sでそれらが有効にならない。&lt;&#x2F;li&gt;
&lt;li&gt;どうもzshが新しいncursesのterminfoを拒否しているらしいことがわかる&lt;&#x2F;li&gt;
&lt;li&gt;そこでzshをインストールして(&#x2F;bin&#x2F;zshは書き換えない)、~&#x2F;.nix-profile&#x2F;bin&#x2F;zshを指定してやると、.tmux.confの設定が有効になる。&lt;&#x2F;li&gt;
&lt;li&gt;ということで.config&#x2F;alacritty&#x2F;config.ymlのshell設定を書き換え&lt;&#x2F;li&gt;
&lt;li&gt;同じく.tmux.confの起動シェルを書き換え&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;以上で成功。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;インストールしたもの&quot;&gt;インストールしたもの&lt;&#x2F;h5&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix profile install nixpkgs#{zsh, ncurses, tmux, alacritty}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;書き換えたもの&quot;&gt;書き換えたもの&lt;&#x2F;h5&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# .tmux.conf
&lt;&#x2F;span&gt;&lt;span&gt;set-option -g default-shell &amp;quot;${HOME}&#x2F;.nix-profile&#x2F;bin&#x2F;zsh&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;set-option -g default-terminal &amp;quot;xterm-256color&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;set-option -ag terminal-overrides &amp;quot;,${TERM}:RGB&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# config.yml
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;program&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;....&#x2F;.nix-profile&#x2F;bin&#x2F;zsh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;args
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;--login
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Benchmarking Squeak, Pharo and Cuis</title>
        <published>2022-04-08T00:00:00+00:00</published>
        <updated>2021-04-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-04-08-Benchmarking-Smalltalks/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-04-08-Benchmarking-Smalltalks/</id>
        
        <content type="html">&lt;h3 id=&quot;2022-04-09&quot;&gt;2022-04-09&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;最近のVMでCuisを測り直してみたけど、まあ大きな変化はありませんでした。&lt;&#x2F;li&gt;
&lt;li&gt;Rayonを使った並列版Rustを追加しました。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;They_depend_on_opensmalltalk-vm,_of_course.&quot;&gt;They depend on opensmalltalk-vm, of course.&lt;&#x2F;h1&gt;
&lt;p&gt;全くつまらないPHPでのプログラミングなどというようなものをやらされているので、そんなもん使うくらいならSmalltalkの方がマシ。
とイライラが募り続けたせいで数年ぶりにSmalltalkをインストールしてチュートリアルをやりたい病にかかりました。&lt;&#x2F;p&gt;
&lt;p&gt;今回は&lt;a href=&quot;http:&#x2F;&#x2F;www.cuis-smalltalk.org&quot;&gt;Cuis Smalltalk&lt;&#x2F;a&gt;を試してみたのが新しいところ。
と思っていたらちょうど&lt;a href=&quot;https:&#x2F;&#x2F;pharo.org&#x2F;news&#x2F;pharo10-released&quot;&gt;Pharo 10&lt;&#x2F;a&gt;が出たのでそっちも試してみた。
さらにオープンソースがforkすると大抵本家はダメになっていくものだけど(X-Window Systems, Owncloud, LibreOffice, ...)、では現状一体どうなっているのか日本語の情報が全く途絶えてしまった&lt;a href=&quot;https:&#x2F;&#x2F;squeak.org&quot;&gt;Squeak&lt;&#x2F;a&gt;もついでにインストールして久しぶりにいじってみました。&lt;&#x2F;p&gt;
&lt;p&gt;結論から言うと個人的にはやっぱり型リッチな静的型付け関数型プログラミング全面支援言語をemacsかhelixでnixpkgsの基で作って使うのが一番だなあという結論なのだが、でもそれなりにSmalltalkは面白い。
実際のところどれ使ってもそれなりに面白いと言って過言ではない。
そしてダメダメな印象だったSqueakも十分に綺麗なデスクトップ環境で楽しく使えるのが今回の発見。
PHPよりはるかに楽しい。PHPよりはるかに楽しい。PHPよりはるかに楽しい。PHPよりはるかに楽しい。
金のためにXXXXXXXXX以下省略。&lt;&#x2F;p&gt;
&lt;p&gt;3大オープンソースSmalltalk語族をインストールしているというなかなかない状況なので、ベンチマークしてみた。題材は&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;skh9suWVoD8&quot;&gt;円周率の計算&lt;&#x2F;a&gt;というnumber crunchingもの。
プラットフォームはMacOS 12.3.1, x86-64.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;language &#x2F; implementation&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;N&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: left&quot;&gt;value&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;tallies&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;time(msec.)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Squeak 6.0alpha-21557-64bit.image&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141602653489794&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31,129&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31,511&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1415976535647934&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;126,296&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;127,893&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Pharo10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141602653489794&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;32,107&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;32,107&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1415976535647934&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;129,213&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;129,213&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Cuis6.0-5105 + vm 6cd4bb2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141602653489794&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19,289&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;36,136&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1415976535647934&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;76,744&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;145,776&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Cuis6.0-5069.image&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141602653489794&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;17,571&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37,985&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1415976535647934&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;77,079&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;150,123&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Rust with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rug&quot;&gt;rug-1.15.0&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;gmplib.org&#x2F;&quot;&gt;GMP&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1416026534897936&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;--&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.38 x 10^3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141597653564793&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;--&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9.78 x 10^3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Rust with rug and Rayon&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.1416026534897936&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;--&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.18 x 10^3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;200000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: left&quot;&gt;3.141597653564793&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;--&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.61 x 10^3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;まあcriterion使ったわけではなく、JITなシステムで一回のみの実行結果をまとめたものだから、細かい数値差には意味がないのは気に留めておく必要があるので、まずは大差なしというべきだろう。
Pharoなんか速くなってそうな印象があるのだけど結局同じ（ような）VMに依存しているので大きなアドバンテージがあるわけではないようだ。&lt;&#x2F;p&gt;
&lt;p&gt;そして、逆にSqueakが意外にいいじゃん(別に時代遅れなのはお前ら全部だw)という印象をここでも受けることになってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;なのでここまではどれを使っても同じようなものという結論。
ただしSqueakのauto completion frameworkが一番肌に合わなかった、ドキュメントが全然更新されてなくてチュートリアル本すらないので敷居がどんどん高くなっているということは付け加えておきます。&lt;&#x2F;p&gt;
&lt;p&gt;さらに言うとPharoも公式サイトでリンクされたドキュメントが全然更新されない、または存在しないのでストレス溜まる。
Spec2とかFluidとかだから何なのか？
なんかRustと文化が違う。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ついでにRustも--_2022-04-08&quot;&gt;ついでにRustも-- 2022-04-08&lt;&#x2F;h3&gt;
&lt;p&gt;GMPをwrapしたライブラリで有理数を実装したRust版だとまあ10倍速い。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rug::Rational;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; limit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;200_000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; curr_sum: Rational &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Rational::from((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; denominator: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; adding &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for _ in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;limit {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; adding {
&lt;&#x2F;span&gt;&lt;span&gt;            curr_sum &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span&gt;Rational::from((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;, denominator));
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            curr_sum &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span&gt;Rational::from((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;, denominator));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        denominator &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        adding &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span&gt;adding;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;limit:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, limit, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4.0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; curr_sum.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_f64&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;そして並列化--_2022-04-09&quot;&gt;そして並列化-- 2022-04-09&lt;&#x2F;h3&gt;
&lt;p&gt;そして、Rayonで自動並列化をさせると（8 core CPU）、「一瞬」で終わってしまう。
Smalltalkはmulti coreやGPUといった現在のハードウェア資源をどう有効利用するのかという点でブレークスルーが必要だなあ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;{rayon::prelude::&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, rug::Rational};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; limit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;200_000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64..=&lt;&#x2F;span&gt;&lt;span&gt;limit)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;into_par_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|i| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|denominator| Rational::from((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;, denominator)))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            || Rational::from((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            |sum: Rational, frac: Rational| sum &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; frac,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;limit:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, limit, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4.0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_f64&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Apr.</title>
        <published>2022-04-01T00:00:00+00:00</published>
        <updated>2022-04-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-04-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-04-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;3月のまとめ&quot;&gt;3月のまとめ&lt;&#x2F;h2&gt;
&lt;p&gt;今年の公園デビューはなくなった！
しかし3月は全力で電気代増加の月になりました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Solver解体&quot;&gt;Solver解体&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Solver&lt;&#x2F;code&gt;は以下の三つのサブモジュールを持つのみ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;asg&lt;&#x2F;li&gt;
&lt;li&gt;cdb&lt;&#x2F;li&gt;
&lt;li&gt;state&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;processorは必要に応じて作られる関数に落とされ、Restarterはstateに吸収されました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Restart戦略独自路線&quot;&gt;Restart戦略独自路線&lt;&#x2F;h3&gt;
&lt;p&gt;割り当て率と学習節の質によるリスタート制御戦略から逸脱することになりました。
するかしないかの決める意思決定ヒューリスティックから、もっと単純なエネルギー動力学に落としました。
LB-entanglement(造語)と組み合わせた時の話だけど、これで十分によさそうな結果が出ている。&lt;&#x2F;p&gt;
&lt;p&gt;というわけで結構簡略化が進み、ついでに色々な歴史的なコードも削減したので一時期12K行あったコードが再び10K代にまで縮小。まあ1万行のプログラムでリリースのたびに1000行は変わるという開発状況。
3月は完全復活なのでした。
EMAって本当にいいのかという疑問から始まった今のやっている実験・研究・開発アイデアは4月中には終わらせて0.15をリリースの予定です。&lt;&#x2F;p&gt;
&lt;p&gt;ついでに。&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;sat-bench&lt;&#x2F;a&gt;でのマイクロベンチマークがあまりにも3-SATに偏りすぎていたので問題の入れ替えをしました。&lt;&#x2F;p&gt;
&lt;p&gt;どうでもいいけど開発のメインエディタがEmacsから&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;helix-editor&#x2F;helix&quot;&gt;Helix&lt;&#x2F;a&gt;に代わりました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Helix text editor!</title>
        <published>2022-03-15T00:00:00+00:00</published>
        <updated>2021-03-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-03-15-helix/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-03-15-helix/</id>
        
        <content type="html">&lt;p&gt;ふとしたことで純Rust製の高速エディタが開発中 by &lt;a href=&quot;https:&#x2F;&#x2F;zed.dev&quot;&gt;zed.dev&lt;&#x2F;a&gt;というのを見て早速登録してみたもののなんの音沙汰もなし（知った時点でHacker newsで紹介されてから既に数ヶ月）。
同じようなタイミングでReddit経由で&lt;a href=&quot;https:&#x2F;&#x2F;docs.helix-editor.com&#x2F;&quot;&gt;helix&lt;&#x2F;a&gt;というエディタを知った。
コンソール内で動くS+V形式のvi系エディタということだが（名前だけは知っていた）基になった&lt;a href=&quot;https:&#x2F;&#x2F;kakoune.org&quot;&gt;Kakoune&lt;&#x2F;a&gt;ともども色々設計方針を読み、
なんか面白そうなので使っていみたら大変気に入ってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;いいところ：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;multi selectionが基本機能。
実はまだKakouneの&lt;a href=&quot;https:&#x2F;&#x2F;kakoune.org&#x2F;why-kakoune&#x2F;video&#x2F;regroup.webm&quot;&gt;デモ&lt;&#x2F;a&gt;にある機能が再現できないのだけど、selectionから複数のselectionを作り、それから必要なものだけを選択し、編集したり、必要なものだけを削除して別の場所にまとめて貼り付けたりできる。
これはつまり関数型プログラミングパラダイムの&lt;code&gt;iter&lt;&#x2F;code&gt;, &lt;code&gt;map&lt;&#x2F;code&gt;, &lt;code&gt;filter&lt;&#x2F;code&gt;, &lt;code&gt;collect&lt;&#x2F;code&gt;そのものじゃないか。
これはテキストエディターに来るとは思っていなかった、乗り換える価値のある「新しさ」ではなかろうか。&lt;&#x2F;li&gt;
&lt;li&gt;LTSが基本機能。Rustに関しては本体とRust-analyzer以外不要。保存するだけでclippyのメッセージが埋め込まれる。&lt;&#x2F;li&gt;
&lt;li&gt;構文解析器&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tree-sitter&#x2F;tree-sitter&quot;&gt;tree-sitter&lt;&#x2F;a&gt;が標準組み込みなので、引数単位、式単位、文単位などでの移動ができる。
Surround系機能が時代遅れに感じる。
SchemeやCommon Lispを対象にGnu Emacsが提供していたsexp系の機能が今の時代に復活してきたような感慨深いものがある。&lt;&#x2F;li&gt;
&lt;li&gt;レジスタ指定貼り付け時など、所々でKakouneと同様に情報ボックスが表示される。これは親切。&lt;&#x2F;li&gt;
&lt;li&gt;挿入モードに入った後の編集機能のキーバインディングがEmacs。なので挿入モードに入った後はEmacsみたいな感じで編集できる。
つまりほとんどの時間は入力モードで時々移動と選択が便利。
これはEmacsを挿入に特化したエディタというvi派の主張に乗っかっていうなら、Helixは移動編集用モードが追加されたEmacsとも言える。
これまでお気に入りだったEmacs w&#x2F; evil modeからさらにpost modernな感じで融合したしたような印象。ほぼ乗り換えてしまった。&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;anchor&amp;quot;という言葉がマニュアルにできてきた。これはEmacsで言うところのマーカーではないか。
vi系エディタでのカーソルの基本コンセプトがどうしても身に付かないところがあったのだが、
cursorとmarkerの2種類の(文字と文字との間に位置する)場所指定子から構成されるリージョン(helixでいうところのsection)があって、
それが&lt;code&gt;;&lt;&#x2F;code&gt;でキャンセル(shrink)、&lt;code&gt;Alt-;&lt;&#x2F;code&gt;で場所指定子の入れ替えができるとなるともはやEmacsと変わるところがない。
また挿入が単なるリージョンの置き換えに加え、リージョンの直前、直後への挿入が用意されていると考えれば拡張された機能として納得いくものがある。
(そう考えるとnormal modeのカーソルはblockではなく、広がりをイメージさせるunderlineにしたいところなのだが、どうもしっくりこないので固執するのはやめた。)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というわけで、gnus, magit, diredなどEmacsが得意な非ファイル系の操作以外の、つまり基本編集に関してはとうとうhelixの方が便利かもというところまで来てしまいました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;色々&quot;&gt;色々&lt;&#x2F;h1&gt;
&lt;h4 id=&quot;構文を認識していない&quot;&gt;構文を認識していない&lt;&#x2F;h4&gt;
&lt;p&gt;最近grammarの取り込みが選択的になったせいか、このようなことが起きるようになった。
README.mdには以下のように書いてある。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo install --path helix-term
&lt;&#x2F;span&gt;&lt;span&gt;hx --grammar fetch
&lt;&#x2F;span&gt;&lt;span&gt;hx --grammar build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しかし少なくともmacOSでは、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;rm -fr runtime&#x2F;grammar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;がインストールの前に必要だった。
これはどうもデフォルトのHELIX_RUNTIMEがCARGO_HOMEから構成されていたみたい。
~&#x2F;.config&#x2F;helix&#x2F;runtime を作るところから始めれば問題ないかも。ということでissueを立てるような話ではなかった。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;なぜかCtrl-{h,l,j,k}が空いている&quot;&gt;なぜかCtrl-{h,l,j,k}が空いている&lt;&#x2F;h4&gt;
&lt;p&gt;もったいない。tree-sitterを使った構文単位の移動が&lt;code&gt;Alt-{h,l,j,k}&lt;&#x2F;code&gt;に割り当てられているのだけど、
&lt;code&gt;Alt&lt;&#x2F;code&gt;はmacOSだと押しにくい&lt;code&gt;Option&lt;&#x2F;code&gt;に割り当てないといけない。
なぜか&lt;code&gt;Ctrl&lt;&#x2F;code&gt;をprefixにしたキーシークエンスが開いていることに気づいたので、そちらに割り当て直したら&lt;strong&gt;非常に&lt;&#x2F;strong&gt;便利になった。Rustで式単位、文単位での削除移動がセクションの始まりと終わりを気にせずできるようになった。&lt;&#x2F;p&gt;
&lt;p&gt;ということで現在、~&#x2F;.config&#x2F;helix&#x2F;config.tomlでのnormal modeの設定はこんな感じ&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;[keys.normal]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;C-h&amp;quot; = &amp;quot;select_prev_sibling&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;C-l&amp;quot; = &amp;quot;select_next_sibling&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;C-j&amp;quot; = &amp;quot;shrink_selection&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;C-k&amp;quot; = &amp;quot;expand_selection&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;D&amp;quot; = &amp;quot;delete_char_backward&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;H&amp;quot; = &amp;quot;move_prev_word_end&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;^&amp;quot; = &amp;quot;goto_line_start&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$&amp;quot; = &amp;quot;goto_line_end&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;move_prev_word_end&lt;&#x2F;code&gt;はせっかく定義されているのにバインドされていないので、対称性を担保するためにも修飾された&lt;code&gt;h&lt;&#x2F;code&gt;に割り当てた。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;D&lt;&#x2F;code&gt;は本当は&lt;code&gt;C-h&lt;&#x2F;code&gt;であるべきではあると思うのだが（実際全然慣れないのだが）構文木移動系に取られてしまったので仕方なく。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;^|$&lt;&#x2F;code&gt;は設定するより&lt;code&gt;gh|gl&lt;&#x2F;code&gt;に慣れるべきなんだろうが、そこまで自分を追い込まなくてもいいだろう。正規表現の長い歴史に敬意を払って、または怠惰な自分のために残した。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;Solarized系テーマでは対応する括弧とカーソルとの見分けがつかない&quot;&gt;Solarized系テーマでは対応する括弧とカーソルとの見分けがつかない&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;(2022-03-25) ちょっと修正したバージョンが取り込まれました。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;対応する括弧のための表示修飾とカーソルのそのもののそれが同じというのはすごく嫌。
カーソルの位置とその表現がvi系と違っているため括弧とカーソルがずれているEmacsや、
対応する括弧は同じ表示修飾を使っているけどもカーソルの表現がその上に乗っているVScodeではこうならない。しょうがないのでパッチを当てた（正確には別名を割り当てた）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;diff --git a&#x2F;runtime&#x2F;themes&#x2F;solarized_dark.toml b&#x2F;runtime&#x2F;themes&#x2F;solarized_dark.toml
&lt;&#x2F;span&gt;&lt;span&gt;index e3d587d4..dd2013e2 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;runtime&#x2F;themes&#x2F;solarized_dark.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;runtime&#x2F;themes&#x2F;solarized_dark.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -81,7 +81,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;ui.cursor&amp;quot; = {fg = &amp;quot;base02&amp;quot;, bg = &amp;quot;cyan&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;ui.cursor.insert&amp;quot; = {fg = &amp;quot;base03&amp;quot;, bg = &amp;quot;base3&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt; # 当前光标匹配的标点符号
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-&amp;quot;ui.cursor.match&amp;quot; = {modifiers = [&amp;quot;reversed&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;&amp;quot;ui.cursor.match&amp;quot; = { fg = &amp;quot;base03&amp;quot;, bg = &amp;quot;base00&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;warning&amp;quot; =  { fg = &amp;quot;orange&amp;quot;, modifiers= [&amp;quot;bold&amp;quot;, &amp;quot;underlined&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;error&amp;quot; = { fg = &amp;quot;red&amp;quot;, modifiers= [&amp;quot;bold&amp;quot;, &amp;quot;underlined&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;runtime&#x2F;themes&#x2F;solarized_light.toml b&#x2F;runtime&#x2F;themes&#x2F;solarized_light.toml
&lt;&#x2F;span&gt;&lt;span&gt;index 3191add3..9c820294 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;runtime&#x2F;themes&#x2F;solarized_light.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;runtime&#x2F;themes&#x2F;solarized_light.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -81,7 +81,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;ui.cursor&amp;quot; = {fg = &amp;quot;base02&amp;quot;, bg = &amp;quot;cyan&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;ui.cursor.insert&amp;quot; = {fg = &amp;quot;base03&amp;quot;, bg = &amp;quot;base3&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt; # 当前光标匹配的标点符号
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-&amp;quot;ui.cursor.match&amp;quot; = {modifiers = [&amp;quot;reversed&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;&amp;quot;ui.cursor.match&amp;quot; = { fg = &amp;quot;base02&amp;quot;, bg = &amp;quot;light-gray&amp;quot; }
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;warning&amp;quot; =  { fg = &amp;quot;orange&amp;quot;, modifiers= [&amp;quot;bold&amp;quot;, &amp;quot;underlined&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt; &amp;quot;error&amp;quot; = { fg = &amp;quot;red&amp;quot;, modifiers= [&amp;quot;bold&amp;quot;, &amp;quot;underlined&amp;quot;] }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ここだけの話&quot;&gt;ここだけの話&lt;&#x2F;h4&gt;
&lt;p&gt;vi系は移動が便利だとは思わない。選択が便利なのでは。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Mar.</title>
        <published>2022-03-02T00:00:00+00:00</published>
        <updated>2022-03-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-03-02-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-03-02-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2月のまとめ&quot;&gt;2月のまとめ&lt;&#x2F;h2&gt;
&lt;p&gt;SATソルバー開発の長い中休みから復活しました。&lt;&#x2F;p&gt;
&lt;p&gt;と言ってもSLSではなく、違う話を始めただけ。
この時期にSLSが1行も書けてないと言うことは今年も公園デビューはないという方向だろう。&lt;&#x2F;p&gt;
&lt;p&gt;代わりに今やっているのはEMAってどれくらいいいのかという小ネタ。
空間計算量をちょっと増やすことで、なんか時間計算量はそれほど変わらずに普通の平均が計算できるのだから、
EMAに固執しなくてもいいのではと新型コロナウィルスの患者数の7日間平均を見ていて思った。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;997855&#x2F;155307037-93dec6fa-aa77-41a6-a461-762f95fcf1c7.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;で、そこから派生してまた（多分何度目かの）小ネタである節削減のアイデア、stabilizationと何かの同一視などを始めてしまった。いやー、キリがないパターンだわ。これは4月までグダグダやりそう。&lt;&#x2F;p&gt;
&lt;p&gt;で、飽きた頃には論文を読みましょう。
これが3月の目標だけど、電気代含め色々なものが高くなって、一方可処分時間は減る方向で、なんだかハードル高いなあ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Feb.</title>
        <published>2022-02-01T00:00:00+00:00</published>
        <updated>2022-02-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-02-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-02-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2022-02-07&quot;&gt;2022-02-07&lt;&#x2F;h2&gt;
&lt;p&gt;おお、そうじゃった、オリンピックにもdistracted。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;先月のまとめ&quot;&gt;先月のまとめ&lt;&#x2F;h2&gt;
&lt;p&gt;予告していた通り1月も進展なし。ただし数回nix関係のコミットなどしてdev-0.15.0のブランチを切った。
まだ何も読んでないけど準備はちょっとしてある。
さあ就職活動（あああ12月のメール捨てなければよかった）とかadvent of code 2016とかに気をそらされなければ、今月はいよいよ復帰の予定。
健康にも気をつけなければね。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Book of All Skies</title>
        <published>2022-01-27T00:00:00+00:00</published>
        <updated>2022-01-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-01-27-the-book-of-all-skies/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-01-27-the-book-of-all-skies/</id>
        
        <content type="html">&lt;h1 id=&quot;The_Book_of_All_Skies&quot;&gt;The Book of All Skies&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2022-01-27-1&quot;&gt;2022-01-27-1&lt;&#x2F;h2&gt;
&lt;p&gt;思い出した。
多分1月8日くらいに&lt;a href=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2022&#x2F;2022-01-27-the-book-of-all-skies&#x2F;2022&#x2F;2022-01-11&#x2F;Never-let-me-go&quot;&gt;わたしを離さないで&lt;&#x2F;a&gt;を読み終わって、
それから2日程度で&lt;a href=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2022&#x2F;2022-01-27-the-book-of-all-skies&#x2F;2022&#x2F;2022-01-11&#x2F;Echoes-of-an-alien-sky&quot;&gt;未踏の蒼穹&lt;&#x2F;a&gt;を読んだはずだった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2022-01-27&quot;&gt;2022-01-27&lt;&#x2F;h2&gt;
&lt;p&gt;1月11日になぜか同時に2冊読み終わったことになっていて、それから2月10日のフィデルマ短編集までの繋ぎに読み出したのがこの本。
果たしてそれまでに読み終わるだろうかと疑問だったのだが、中編ということもあり2週間程度で読んでしまった。&lt;&#x2F;p&gt;
&lt;p&gt;とはいえ日本語の1&#x2F;10程度の理解なので、著者の解説ページを読んでもなんか全然hubもHoopsも視覚化できてないのだけど、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;なんと（まあ、ある意味）異世界ものじゃん！&lt;&#x2F;li&gt;
&lt;li&gt;そして、飛行船で「次元」を超えていくというのはセンスオブワンダーですなあ（電話ボックスが宇宙船だったくらいのインパクトがあった）。&lt;&#x2F;li&gt;
&lt;li&gt;SFを名乗るためにはやはりこういう舞台を用意するか、主人公の科学者が優れた科学者らしいふるまい・発想・発言をできなければね。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というくらいには理解できました。&lt;&#x2F;p&gt;
&lt;p&gt;英語の中編小説の電子書籍は安くて懐が痛まないので、おそらくこれ以上に薄いであろう（電子書籍なのでピンとこない）、 &lt;em&gt;Dispersion&lt;&#x2F;em&gt; を次のお楽しみとして購入してみた。
ただ、さてそろそろ論文を読まねば、そしてフィデルマ（この順番になるのか？）も控えているので、買ったはいいけど、しばらく積読になるでしょう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>未踏の蒼穹</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-01-11-Echoes-of-an-alien-sky/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-01-11-Echoes-of-an-alien-sky/</id>
        
        <content type="html">&lt;h1 id=&quot;未踏の蒼穹&quot;&gt;未踏の蒼穹&lt;&#x2F;h1&gt;
&lt;p&gt;没後12年。ジェームズ・P・ホーガンのSFが訳されるのもこれが最後かもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;紹介文で触れざるを得ない舞台設定の説明でもはやストーリーバレしているので、
如何に科学的な辻褄を合わせていくのかというところにまで面白さの壺が縮退してしまっているのでまあ不利な状況ではある。
そして21世紀バージョンのホーガン作品の共通トンデモ理論がSF考証設定なので、それもまたセンスオブワンダーのスケールを縮退させてしまった。
というわけで何かシナリオ、じゃないプロットをざっと眺めるような感じで1日で読んでしまった。&lt;&#x2F;p&gt;
&lt;p&gt;次から次に謎が深まら&lt;strong&gt;ない&lt;&#x2F;strong&gt;ので、まあ、そういうことでした。&lt;&#x2F;p&gt;
&lt;p&gt;一つどうでもいい疑問。
生物の環境対応能力がそもそもDNA（なり細胞内情報処理回路）に所与のものとしてプログラムされているというなら、全ての生物は共通のDNAを持っていけないはずなんだが、どう言いくるめる（くるめた）つもりだったのだろうか。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>わたしを離さないで</title>
        <published>2022-01-11T00:00:00+00:00</published>
        <updated>2022-01-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/2022-01-11-Never-let-me-go/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/2022-01-11-Never-let-me-go/</id>
        
        <content type="html">&lt;h1 id=&quot;わたしを離さないで&quot;&gt;わたしを離さないで&lt;&#x2F;h1&gt;
&lt;p&gt;ネタバレしたくないので簡単に。&lt;&#x2F;p&gt;
&lt;p&gt;人物がそれも主人公から見た人物が時間を掛けてえらい丹念に描いてある。これが文学というのものだろう。&lt;&#x2F;p&gt;
&lt;p&gt;同じような語り口で「日の名残り」では時代が直接的に描かれていたのに対し、
「わたしを離さないで」では、さまざまな出来事から描かれる（主人公が想像する）人物の描写から彼らを翻弄する世界を間接的に浮かび上がらせているようだ。
これまで2冊読んだだけだけどこの作者は安直な手口に走らないのだねえ。&lt;&#x2F;p&gt;
&lt;p&gt;登場人物の共感力で世界を描いている分、読み手も共感力が要求されるかもしれない。
そして、振り返って今の日本はどうなのよと当然思うわけでした。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2022, Jan.</title>
        <published>2022-01-02T00:00:00+00:00</published>
        <updated>2022-01-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2022/0102/2022-01-02-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2022/0102/2022-01-02-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2022-01-05&quot;&gt;2022-01-05&lt;&#x2F;h2&gt;
&lt;p&gt;バナー追加。BQNとか&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;advent-of-code&quot;&gt;AoC&lt;&#x2F;a&gt;とか&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;hal2022&quot;&gt;Godot&lt;&#x2F;a&gt;とか&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;rg-001&quot;&gt;Bevy&lt;&#x2F;a&gt;とか色々やりたいことが出てきて時間が取れてないのだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;先月と2020年振り返り(2022-01-02)&quot;&gt;先月と2020年振り返り(2022-01-02)&lt;&#x2F;h2&gt;
&lt;p&gt;予告していた通り12月もコミットなし。
仕事で研究しているわけではないので、誰かに怒られることもないし。
まあサバチカルってことで。&lt;&#x2F;p&gt;
&lt;p&gt;この調子でダラダラが続くはずなので、まあ2月くらいにはSLSに取り掛かろうというくらいの発言が嘘つきにならずに済みそうだ。
お、これが今年の目標かもw。&lt;&#x2F;p&gt;
&lt;p&gt;で代わりに去年を振り返っておきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;致命的なバグ修正。おそらく今のSplrはSATソルバーを名乗れる。過去1年間ほど名乗れてなかったので、これは非常に大きい。&lt;&#x2F;li&gt;
&lt;li&gt;Trail Savingを実装したので、2018年までくらいの研究成果をキャッチアップできた。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そして、今年の目標：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;公園デビュー。うーむ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;うーむ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>From Text to Mesh</title>
        <published>2021-12-04T00:00:00+00:00</published>
        <updated>2021-12-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-12-04-text-to-mesh/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-12-04-text-to-mesh/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-12-05&quot;&gt;2021-12-05&lt;&#x2F;h1&gt;
&lt;p&gt;別のビデオで&lt;code&gt;Text to Curve&lt;&#x2F;code&gt;の直後に&lt;code&gt;fill Curve&lt;&#x2F;code&gt;が来ているのを確認。
ということは平面ポリゴンから立体化しているのか。。。&lt;&#x2F;p&gt;
&lt;p&gt;その筋で調べると、&lt;code&gt;Realize Instances&lt;&#x2F;code&gt;ということでfinal answer。
おおお、これこそthe first class citizen&#x2F;objectの証。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-12-04&quot;&gt;2021-12-04&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;download&#x2F;releases&#x2F;3-0&#x2F;&quot;&gt;Blender 3.0のリリースノート&lt;&#x2F;a&gt;より：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;wp-content&#x2F;uploads&#x2F;2021&#x2F;11&#x2F;blender_30_text_nodes_2.mp4&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この画像は見た目ほど自明じゃない。
textをcurve経由で厚みのあるmeshに変えているけど、どうやればできるだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;今のところ、&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;直線のBezier SegmentをProfile CurveにしたCurve to Meshで側面を作成（textをProfile Curveにしようとすると怒られる）&lt;&#x2F;li&gt;
&lt;li&gt;Fill Curveで前面を埋める&lt;&#x2F;li&gt;
&lt;li&gt;それをTranslateして後面も埋める&lt;&#x2F;li&gt;
&lt;li&gt;全てをJoin Geometry&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;しか思いつかない。
しかしどうもbebelが掛かっているようなのだが。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Dec.</title>
        <published>2021-12-01T00:00:00+00:00</published>
        <updated>2021-12-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-12-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-12-01-UNSATlog/</id>
        
        <content type="html">&lt;p&gt;Splrを作り出してから初めてのことですが11月は完全オフでした。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Rust for Rustaceans&lt;&#x2F;em&gt;、続いて_わたしを離さないで Never Let Me Go_の読書&lt;&#x2F;li&gt;
&lt;li&gt;Blenderの説明の準備&lt;&#x2F;li&gt;
&lt;li&gt;アルゴリズム入門の準備&lt;&#x2F;li&gt;
&lt;li&gt;Apple TV+の視聴&lt;&#x2F;li&gt;
&lt;li&gt;Blender 3.0の理解、Nix 2.4の理解, Criterion.rsの理解など&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そして今日からAdvent of Codeが始まったので、参加せんでなんとする。
また半徹の日々が続く。ということで今年はもう店じまいかも。
今のところ12月も予定なしです。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Collectionの謎</title>
        <published>2021-11-27T00:00:00+00:00</published>
        <updated>2021-11-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-27-rigging/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-27-rigging/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-30&quot;&gt;2021-11-30&lt;&#x2F;h1&gt;
&lt;p&gt;これを踏んだのかもしれん。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.blender.org&#x2F;rBaa7051c8f21a6b7e2b413b40317502e69764fa05&quot;&gt;Fix T93439: Armature widgets from hidden collections are invisible&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-27&quot;&gt;2021-11-27&lt;&#x2F;h1&gt;
&lt;p&gt;ようやくRigifyにまで手が回るようになって、拾ってきたキャラクターにリグ組みしたり、昔のキャラクターのリグを作り直したりしているのだけど、編集しているといつの間にかコントローラー(boneのcustom shape)が消えてしまう。
でも、そのファイルを舞台ファイルからリンクするとそちらでは表示されたりする。
うーむ。&lt;&#x2F;p&gt;
&lt;p&gt;理由はコントローラーをCollectionのネストの中に入れたせいだった。
具体的には&lt;code&gt;Scene Collection&lt;&#x2F;code&gt;直下の&lt;code&gt;Character Collection&lt;&#x2F;code&gt;の&lt;code&gt;Controller Collection&lt;&#x2F;code&gt;に入れると表示されず、
第2層の&lt;code&gt;Character Collection&lt;&#x2F;code&gt;に入れたら表示される。&lt;&#x2F;p&gt;
&lt;p&gt;うーむ。リギングもなかなか時間を食うし、よくわからないことが多い。
parent切って、animation data削除して、modefiersを削除すればリグとの関係は切れたように思うのだが、リグを削除するとmeshも消えてしまう。
どこに依存が残るのだろう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fluid Dynamics on Blender</title>
        <published>2021-11-18T00:00:00+00:00</published>
        <updated>2021-11-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-18-fluid-dynamics/2021-11-18-fluid-dynamics-on-blender/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-18-fluid-dynamics/2021-11-18-fluid-dynamics-on-blender/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-18&quot;&gt;2021-11-18&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;水飛沫立てたい&quot;&gt;水飛沫立てたい&lt;&#x2F;h3&gt;
&lt;p&gt;fluid domainオブジェクトのsettingでResolution Divisionsを大きくすべし。
最低100は欲しい。
メッシュが荒ければそりゃ局所的な変形は掬えないわな。
シミュレーションに時間がかかってもしょうがない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;飛沫や泡がレンダリングできない&quot;&gt;飛沫や泡がレンダリングできない&lt;&#x2F;h3&gt;
&lt;p&gt;particleもそうだが、rendering typeをobjectにしないとどちらのレンダラーを選んでも描画されない。
この設定はfluid domainオブジェクトのParticlesタブの中にある。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;暗くなってしまう&quot;&gt;暗くなってしまう&lt;&#x2F;h3&gt;
&lt;p&gt;泡を飛ばすと、大量に出てくるので、おそらくレイトレースの上限に簡単に達しているんだろう。
泡を別のsceneに持っていってcompositeするか、影を落とさないようにするか、自己発光させるか、どうすべきだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;まず、泡多すぎる感じがしたので、を徹底的に大きな値にしてみた。なかなか減らない。
ついでにresolution scaleを1にしてみた。飛び跳ね方が倍違う気がするけど(そういうこと？)、元気があっていい感じ。
暗さはだいぶ解消した。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-18-fluid-dynamics&#x2F;test2.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;fuild domainオブジェクトのparticle properties からLiquidなるparticleのrederingをやめてみるとこうなった。
なんぞそれ？ これらのparticleを全部消してもちゃんと波面は変形しているけど？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-18-fluid-dynamics&#x2F;test3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;だいぶわかってきたのでテストレンダリングしてみた。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-18-fluid-dynamics&#x2F;jumping-owl.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Water in Blender</title>
        <published>2021-11-16T00:00:00+00:00</published>
        <updated>2021-11-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-16-water/2021-11-16-water-on-blender/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-16-water/2021-11-16-water-on-blender/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-16-2&quot;&gt;2021-11-16-2&lt;&#x2F;h1&gt;
&lt;p&gt;サンプル画像を追加しようと思って色々やっていて、もっといいものを発見・開発した。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;fresnel.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;これだ。これが求めていた合成係数だ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;fresnel-result.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面の反射がこうあるべきという感じ。左は論外。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-16&quot;&gt;2021-11-16&lt;&#x2F;h1&gt;
&lt;p&gt;Asset強化月間、次のお題は水。&lt;&#x2F;p&gt;
&lt;p&gt;検索して上位に来ていた&lt;a href=&quot;https:&#x2F;&#x2F;pierodetomi.medium.com&#x2F;how-to-easily-setup-a-good-water-shader-in-blender-tutorial-3e0d20e6132e&quot;&gt;サイト&lt;&#x2F;a&gt;を見てみる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;glass shader&lt;&#x2F;li&gt;
&lt;li&gt;transparent shader&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;を組み合わせて作ろうという方針で、よくわかる話なので最初はこのチュートリアルの通り作っていたのだけど、
なぜ単なるPrincipled BSDFではいけないのだろう？
このshaderだって透明度も屈折度も持っているじゃないか。
ということで途中から、これはPrincipled BSDFとrefraction shaderだけでできるのではなかろうかと思い始めた。
ところが、どうもこのshaderのIORは効いていないように思えるのでチュートリアルの方法に復帰して最後までやってみた。&lt;&#x2F;p&gt;
&lt;p&gt;しかし結果はイマイチ。shaderの合成が雑すぎる。どう考えても、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;裏側が1.33で屈折しながら透けて見える部分と（なのでrefraction shaderに置き換え）&lt;&#x2F;li&gt;
&lt;li&gt;表面で反射している部分との（なのでprincipled BSDFに置き換え）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;との合成はカメラ角度に依存させなければリアルに見えないだろう。ということで独自方針に切り替えてみる。&lt;&#x2F;p&gt;
&lt;p&gt;さて、そのためには何を使えばいいのだ？
Geometryのnormalか？ Texture Coordinateのreflectionか？&lt;&#x2F;p&gt;
&lt;p&gt;プレビュー画面で確認するとどちらもこれじゃない感が激しくある
ちなみにnormal vectorを可視化するとこんな感じ。実はreflectionでも大して変わらない。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;normal.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;しかし、その一方でネットワークをちゃんと組み立ててみるとそれなりの説得力がある
（まあ、レンダリング時間は大変だけど。）。
こんな感じになる。左が元のやり方。右がこの方法。上面の反射が全然違う。うーん、reflectionでいいか。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;reflection-result.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最後にバリエーションとして、波が立っている状況用のbump付きとそうでないものの2種類を用意してみた。&lt;&#x2F;p&gt;
&lt;p&gt;以下は「波立つ水面」の設定でHDRIの画像を見下ろしたもの。まるで印象派のようになってしまったが元画像と比べると、まあこれでもいいかもぐらいの出来上がり。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;cycles-1.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;別のサンプルはこんな感じ。池をそっと覗いて見た感。バラタナゴいるかな。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-16-water&#x2F;banner.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Clouds on Blender</title>
        <published>2021-11-14T00:00:00+00:00</published>
        <updated>2021-11-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-14-clouds/2021-11-14-clouds-on-blender/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-14-clouds/2021-11-14-clouds-on-blender/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-15&quot;&gt;2021-11-15&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y-ofQpT0_EA&quot;&gt;How to Easily Create Volumetric Clouds in Blender 2.91&lt;&#x2F;a&gt;に切り替え。出来上がり形状からvolumeを作っていく方が断然制御しやすそうだ。
フラクタルな揺らぎもそのものズバリのmodifierがあるし、そもそも内部の疎密からcut offで形状を作り出すのではなく、表面形状に自然さを加える方が自然だろう。
ということで2次元ノイズ画像としてmask textureのcloudsを復活。こんな感じ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-14-clouds&#x2F;mesh-to-volume-Cycles.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;そしてEEVEEに持っていくとこんな感じ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-14-clouds&#x2F;mesh-to-volume-EEVEE.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10秒程度でこれなら全然いいではないか。ただアニメーションするには1桁長い。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-14&quot;&gt;2021-11-14&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.blendernation.com&#x2F;2021&#x2F;02&#x2F;23&#x2F;100-procedural-cloud-in-cycles&#x2F;&quot;&gt;100% Procedural Cloud in Cycles&lt;&#x2F;a&gt;
on &lt;a href=&quot;https:&#x2F;&#x2F;www.blendernation.com&quot;&gt;BlederNation&lt;&#x2F;a&gt;
でcycles用の雲の作り方を勉強してEEVEEに持っていこうとしたのだが、お手上げ状態。&lt;&#x2F;p&gt;
&lt;p&gt;一掴みの雲を作ってGeometry Nodeでばら撒けばいい感じになると思ったのだが、
結局、何をしてもレンダリング時間がEEVEEとは思えないくらい掛かってしまって、さくさく実行するというわけにはいかないことがわかった。&lt;&#x2F;p&gt;
&lt;p&gt;それと、EEVEEだと黒く沈んでしまって雲っぽくならない。
自己発光(emit)させることになるんだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;そもそも、ラピュタとかナウシカのように雲の塊の中に突っ込んでいけるような密度のある雲が作りたかったので、
塊感があるのは狙った方向性ではあるのだが、よく見ると色々と解像度的の限界的（CGくさいartifact的）なものが出てきている。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみにcyclesで自己発光させるとこんな感じ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-14-clouds&#x2F;soft-clouds.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一見よさそうなんだが、実はボケすぎ。
この考え方をEEVEEに持って行っても同じような結果になってしまう。&lt;&#x2F;p&gt;
&lt;p&gt;1枚絵を作るんだったらの&lt;a href=&quot;https:&#x2F;&#x2F;www.blendernation.com&#x2F;2021&#x2F;02&#x2F;23&#x2F;100-procedural-cloud-in-cycles&#x2F;&quot;&gt;100% Procedural Cloud in Cycles&lt;&#x2F;a&gt;が１番なのかもしれない。
（本家Blenderのrelease noteのどれかに出てきたCyclesとEEVEEでのvolume renderingの結果がかなり近くなったんだか、spot lightが同じように当たるようになっただかでのサンプル画像がゴツゴツ感があっていいのだけど、情報が全くない。）
で、EEVEEだともう一段カーブ調整ノードを入れるといい感じになるのかもしれないがレンダリング時間を考えるとなあ。&lt;&#x2F;p&gt;
&lt;p&gt;あと、なぜかmaterialで使えないmask用のcloudsテクスチャだが、volumeに貼っても残念な結果にしかならないことがわかった。
3次元構造を持ってないからmaterialで使えないのだろうか。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Emacs 28.0.60 on Nix</title>
        <published>2021-11-13T00:00:00+00:00</published>
        <updated>2021-11-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-13-emacs28-on-Nix/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-13-emacs28-on-Nix/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-14&quot;&gt;2021-11-14&lt;&#x2F;h1&gt;
&lt;p&gt;以下のようなものが必要なことが判明。この変数の最後にはシステムファイルのためのディレクトリがこなければならない。
しかしnix packageとしてインストールするとそこにはnix storeが来てしまう。
なのでほとんどのファイルはeln化されていなかった。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;(setq native-comp-eln-load-path (list (expand-file-name &amp;quot;~&#x2F;.cache&#x2F;emacs&#x2F;native-lisp&amp;quot;)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;2021-11-13&quot;&gt;2021-11-13&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;なぜ&lt;code&gt;configureFlags&lt;&#x2F;code&gt;を定義する必要があるのだろうか。emacs27の&lt;code&gt;nativeComp&lt;&#x2F;code&gt;は正しく定義されているようなのに。&lt;&#x2F;li&gt;
&lt;li&gt;何度もflake.lockを更新してcommitするフローはおかしいのではないのか。&lt;&#x2F;li&gt;
&lt;li&gt;ターミナルの中で走らせていると実はそんなに差は感じない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# flakes&#x2F;emacs-head&#x2F;flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Emacs Head, the unreleased 28.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixpkgs-unstable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;overlay &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self: prev: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs-head &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;prev&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;emacs-head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;override {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nativeComp &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;      };
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;defaultPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;inherit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacsNative &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;emacs27&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;override {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nativeComp &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;          emacsNative&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;overrideAttrs (attrs: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head-${&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;pname &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;28.0.60-20211113&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;rev &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;42d4e24ff3f13ccbd401d93d70ecdee99b88a26d&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;fetchurl {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;emacs.git&#x2F;snapshot&#x2F;emacs-${&lt;&#x2F;span&gt;&lt;span&gt;rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}.tar.gz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# nix-prefetch-url --type sha256 ${url}
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;sha256 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;15anma0c9bxww9hns4nciinbs2yv2sjcnb5nlzsw1cwci93mrf9z&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            };
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;patches &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;preConfigure &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;            .&#x2F;autogen.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;                &amp;#39;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;            substituteInPlace lisp&#x2F;international&#x2F;mule-cmds.el \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;              --replace &#x2F;usr&#x2F;share&#x2F;locale ${&lt;&#x2F;span&gt;&lt;span&gt;gettext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;share&#x2F;locale
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;                 for makefile_in in $(find . -name Makefile.in -print); do
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;                substituteInPlace $makefile_in --replace &#x2F;bin&#x2F;pwd pwd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;            done
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;          &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;configureFlags &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;emacs27&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;configureFlags &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;--with-native-compilation&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;emacs27&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buildInputs
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;[ autoconf automake texinfo gcc libgccjit zlib ]
&lt;&#x2F;span&gt;&lt;span&gt;                          &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;optionals stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isDarwin (
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;darwin&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;apple_sdk&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;frameworks; [
&lt;&#x2F;span&gt;&lt;span&gt;                              AppKit Carbon Cocoa GSS ImageIO ImageCaptureCore
&lt;&#x2F;span&gt;&lt;span&gt;                              IOKit OSAKit Quartz QuartzCore WebKit
&lt;&#x2F;span&gt;&lt;span&gt;                            ]);
&lt;&#x2F;span&gt;&lt;span&gt;          });
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Shadow catcher on Blender</title>
        <published>2021-11-06T00:00:00+00:00</published>
        <updated>2021-11-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-06-ShadowCatcher-on-blender/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-06-ShadowCatcher-on-blender/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-20&quot;&gt;2021-11-20&lt;&#x2F;h1&gt;
&lt;p&gt;3.0のShadow Catcherのコンポジションツリーがこのページのやり方と違うことに気がついた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wiki.blender.org&#x2F;wiki&#x2F;Reference&#x2F;Release_Notes&#x2F;3.0&#x2F;Cycles&quot;&gt;https:&#x2F;&#x2F;wiki.blender.org&#x2F;wiki&#x2F;Reference&#x2F;Release_Notes&#x2F;3.0&#x2F;Cycles&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wiki.blender.org&#x2F;w&#x2F;images&#x2F;7&#x2F;7a&#x2F;Cycles_3.0_shadow_catcher_compositing.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;デフォルトでは、シャドウキャッチャーは結合パスのアルファチャンネルにのみ影響します。ただし、色付きの間接光と放出を完全に処理するには、新しいシャドウキャッチャーパスを使用する必要があります。背景にシャドウキャッチャーパスを掛ける必要があり、その後、結合パスをアルファオーバーで合成することができます。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;試してみた。なるほど、コレクションは増やさず、Scene collectionをオフにした新規レイヤーで背景だけ描画したものに基レイヤーをOver alphaで合成するのか。確かによりリアルでしかも簡単そうだ（まあ、HDRIの中には異常に色被りするやつが出てきたけど）。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-09&quot;&gt;2021-11-09&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;EEVEE_version_2.1&quot;&gt;EEVEE version 2.1&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;否定を3回ならde Morganの出番のはずなんだが、うーむ、画像アプリの世界ではなんだか。。。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;なんか[0, 1]への正規化という点で難があると思うのだが、clampとか意味のないはずのスケーリングとかで手当てをしよう。
Let&#x27;s do it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-06_eevee2.1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;EEVEE_version_2&quot;&gt;EEVEE version 2&lt;&#x2F;h3&gt;
&lt;p&gt;EEVEEでも素直にマスクが使えるのでノード数は増えるけど、2021-11-07の前半部よりもこちらの方が直感的かも。&lt;&#x2F;p&gt;
&lt;p&gt;影を落とすメッシュを&lt;code&gt;shadow receiver&lt;&#x2F;code&gt;とする。surface materialは何も指定する必要はない。とにかくcollection &lt;code&gt;shadow catch&lt;&#x2F;code&gt;に入れておく。このオブジェクトに対して、Object Properties - Visibility - Mask -- holdoutを有効化する。&lt;&#x2F;p&gt;
&lt;p&gt;レイヤーの設定は以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;元からあったlayer -- &lt;code&gt;shadow catch&lt;&#x2F;code&gt;は非表示。layer passでCombinedをレンダリング。&lt;&#x2F;li&gt;
&lt;li&gt;追加したShadow Layer -- &lt;code&gt;shadow catch&lt;&#x2F;code&gt;は表示。Shadowをレンダリング。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;composerで組み立て。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Shadow LayerのAlphaはholdoutのところだけが真っ黒に抜けている。&lt;&#x2F;li&gt;
&lt;li&gt;Shadow LayerのShadowは影のところだけが真っ暗。&lt;&#x2F;li&gt;
&lt;li&gt;この二つから論理演算でholdoutに落ちた影のところだけが真っ黒なマスクを生成&lt;&#x2F;li&gt;
&lt;li&gt;適当にスケーリングして元からあったLayerのCombinedにMultiplyで重ねあわせ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;論理演算でInvertをおそらく3回使うのでノード数は増えるが便利そうでなんだかそうでもないOver Alphaを使わなくていいので、修正方法が理解しやすいんじゃなかろうか。
否定を3回ならde Morganの出番のはずなんだが、うーむ、画像アプリの世界ではなんだか。。。
あとCyclesでの設定との類似性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-06_eevee2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-07&quot;&gt;2021-11-07&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;EEVEE_version_1&quot;&gt;EEVEE version 1&lt;&#x2F;h3&gt;
&lt;p&gt;いやもっと便利なのはcompositing treeだろう。
影を落とすメッシュを&lt;code&gt;shadow receiver&lt;&#x2F;code&gt;とする。surface materialはholdout。collection &lt;code&gt;shadow catch&lt;&#x2F;code&gt;に入れておく。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;元からあったlayer改めCatching Layer -- &lt;code&gt;shadow catch&lt;&#x2F;code&gt;は表示。layer passでCombinedとShadowをレンダリング。&lt;&#x2F;li&gt;
&lt;li&gt;No Catcher Layer -- &lt;code&gt;shadow receiver&lt;&#x2F;code&gt;は非表示。Combinedをレンダリング。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;composerで組み立て。&lt;&#x2F;p&gt;
&lt;p&gt;Catching LayerのShadowをalphaに使って、No Catcher layerの画像の上にOver alphaでCatching Layerの画像を重ねる。holdoutが真っ黒なものとしてレンダリングされるのでcatcherに落ちた真っ黒な影がCombined画像の上に重ねられる。
この画像をNo Catcher Layerの上に重ねる。影の部分以外は同一の画像なので、alphaで影の濃さを調整。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-06_eevee.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;EEVEEはこれでOK。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Cycles_version_0&quot;&gt;Cycles version 0&lt;&#x2F;h3&gt;
&lt;p&gt;Cyclesだと、holdoutはShadowの画像においても真っ黒なものとして表現されるので併用はできない。影だけでなくshadow catcherのあったところ全体が影になってしまう。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;なので、shadow catcherには通常のshaderを与えて&lt;&#x2F;li&gt;
&lt;li&gt;Object Properties - Visibility - Mask -- Shadow Catcherを有効化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;するとレンダリングされるべき濃さの影のマスクが生成されるので、
これを適当にスケーリングしてNo Catcher layerのレンダリング画像Combinedのvalueに流し込めばよいだろう。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-06_cycle.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ちょっと修正が必要なところが残念だが、とりあえず5分で質問に答える準備としてメモしておく。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-06,_EEVEE_version_1&quot;&gt;2021-11-06, EEVEE version 1&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blenderartists.org&#x2F;t&#x2F;how-to-make-a-shadow-catcher-in-cycles-and-eevee-blender-tutorial&#x2F;1332364&quot;&gt;ここ&lt;&#x2F;a&gt;にEEVEEで使えるshadow catcherを作る方法が説明されている。
それには以下の三つが必要。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;2つのDiffuse BSDFと1つのTransparent BSDF、変換ノードからなるshader tree&lt;&#x2F;li&gt;
&lt;li&gt;オブジェクトは&lt;code&gt;Opacity Blend&lt;&#x2F;code&gt;モードで表示&lt;&#x2F;li&gt;
&lt;li&gt;film transparentを有効化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;この３番目を要求されると、環境マッピングしている時に背景が抜けてしまうのでやりたくない。&lt;&#x2F;p&gt;
&lt;p&gt;いろいろやっていたら以下でもできることがわかった。理屈はわからないし、微妙なパラメータ調整が要求される(三つのColor全部でバランスを取らないといけない)。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-06_shadow-catcher.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Nix 2.4 released</title>
        <published>2021-11-02T00:00:00+00:00</published>
        <updated>2021-11-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-02-Nix2.4/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-02-Nix2.4/</id>
        
        <content type="html">&lt;h1 id=&quot;2021-11-11:_flake.nixの更新&quot;&gt;2021-11-11: flake.nixの更新&lt;&#x2F;h1&gt;
&lt;p&gt;git repositoryに含まれないflake.nixは&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix build .&#x2F;#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;でbuildを試せる。
errorが出るのをわかっていてわざわざcommitして結果を試してみる必要はないのでflakesに大量のコミットログを残さなくて済むはずだ。&lt;&#x2F;p&gt;
&lt;p&gt;ただ、おかしなことにこの状態だとsha256の不一致エラーが出ない。
その確認がこのステップの目的なんだけど。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sha256の出し方&quot;&gt;sha256の出し方&lt;&#x2F;h4&gt;
&lt;p&gt;ということで調べた。例えば、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# flakes&#x2F;kissat&#x2F;flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;          src = fetchFromGitHub {
&lt;&#x2F;span&gt;&lt;span&gt;            owner = &amp;quot;arminbiere&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            repo = &amp;quot;kissat&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            rev = &amp;quot;abfa45fb782fa3b7c6e2eb6b939febe74d7270b7&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            sha256 = &amp;quot;06pbmkjxgf2idhsrd1yzvbxr2wf8l06pjb38bzbygm6n9ami89b8&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;          };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;からダウンロードされるものは、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;github.com&#x2F;${owenr}&#x2F;${repo}&#x2F;archive&#x2F;${rev}.tar.gz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを&lt;code&gt;nix-prefetch-url&lt;&#x2F;code&gt;に渡す。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix-prefetch-url --type sha256 --unpack https:&#x2F;github.com&#x2F;arminbiere&#x2F;kissat&#x2F;archive&#x2F;abfa45fb782fa3b7c6e2eb6b939febe74d7270b7.tar.gz
&lt;&#x2F;span&gt;&lt;span&gt;path is &amp;#39;&#x2F;nix&#x2F;store&#x2F;2nb50j4lv4ab9waps7awqbwg1x1fvljn-abfa45fb782fa3b7c6e2eb6b939febe74d7270b7.tar.gz&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;06pbmkjxgf2idhsrd1yzvbxr2wf8l06pjb38bzbygm6n9ami89b8
&lt;&#x2F;span&gt;&lt;span&gt;$ 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これが&lt;code&gt;sha256&lt;&#x2F;code&gt;になる。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-09:_nix_profile_install_nixpkgs&#x2F;nixpkgs-unstable#nix_2_4_できない件&quot;&gt;2021-11-09: &lt;code&gt;nix profile install nixpkgs&#x2F;nixpkgs-unstable#nix_2_4&lt;&#x2F;code&gt; できない件&lt;&#x2F;h1&gt;
&lt;p&gt;いや、別にuser profileから消えてもSSDから消えるわけではないので、ビクビクせずに、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;nix&#x2F;var&#x2F;nix&#x2F;profiles&#x2F;per-user&#x2F;nash&#x2F;profile-XX-link&#x2F;bin&#x2F;nix profile remove nix
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;nix&#x2F;var&#x2F;nix&#x2F;profiles&#x2F;per-user&#x2F;nash&#x2F;profile-XX-link&#x2F;bin&#x2F;nix profile install nixpkgs&#x2F;nixpkgs-unstable#nix_2_4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;すればいいだけだった。&lt;&#x2F;p&gt;
&lt;p&gt;これで残ったのはcacertだけ。
これを消すと新しいパッケージの認証に失敗して何もインストールできなくなるのではと思っていたのが、やってみたたらできた。
ただし、一回conflict起こさせておくことが必要。つまりダウンロードしてlocal storeに展開までしておけば認証が終わっているということなので、それ以降cacertは要らない。&lt;&#x2F;p&gt;
&lt;p&gt;さようなら、channels。ようこそ、experimental nix-command and flakes。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;githubにリポジトリを作って自分の環境を構築する(2021-11-06-2)&quot;&gt;githubにリポジトリを作って自分の環境を構築する(2021-11-06-2)&lt;&#x2F;h1&gt;
&lt;p&gt;これでどうだ。upgradeで更新しなくなったぞ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#github:shnarazk&#x2F;flakes&#x2F;flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Piling up my flakes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs-head&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:shnarazk&#x2F;flakes?dir=emacs-head&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;kissat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:shnarazk&#x2F;flakes?dir=kissat&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;emacs-head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kissat }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system:
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs-head &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;emacs-head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;${system};
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;kissat &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;kissat&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;${system};
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;ちゃんと理解して複数のflake.nixをまとめ上げて自分の環境を構築する(2021-11-06)&quot;&gt;ちゃんと理解して複数のflake.nixをまとめ上げて自分の環境を構築する(2021-11-06)&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.ysndr.de&#x2F;posts&#x2F;internals&#x2F;2021-01-01-flake-ification&#x2F;&quot;&gt;これ&lt;&#x2F;a&gt;見て（さらに2時間奮闘して）理解した。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;こういうことだ。なるほど、これはほぼflakesの合成をやっているだけだ。&lt;&#x2F;del&gt;
さらに1時間bug fixに苦戦して結局&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;flakes&#x2F;blob&#x2F;main&#x2F;flake.nix&quot;&gt;こういうこと&lt;&#x2F;a&gt;になった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Piling up my flakes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixpkgs-unstable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs-head&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.&#x2F;emacs-head&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;kissat&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.&#x2F;kissat&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;emacs-head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;kissat }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system:
&lt;&#x2F;span&gt;&lt;span&gt;      {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs-head &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;emacs-head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;${system};
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;kissat &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;kissat&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;${system};
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;「それはderivationじゃないエラー」を修正し、全systemに対応していったら、1時間前のバージョンととも全然違うものになってしまった。うーむ正解なのか？ flakesの階層合成はどこかに説明されてないのか。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;{ a: {x: ka, y: la, z: ma}, b: {x: kb, y: lb, z: mb}, c: {x: kc, y: lc, z: mc} }
&lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{ x: {a: ka, b: kb, c: kc}, y: {a: la, b: lb, c: lc}, z: {a: ma, b: mb, c: mc} }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&quot;&gt;flake-utils&lt;&#x2F;a&gt;にはない、Optics的な何か。&lt;&#x2F;p&gt;
&lt;p&gt;いや、まだダメだわ。二つのフレークが共有してはいけないものまで共有していて、flake.lockのupdateが止まらない。
&lt;code&gt;nix profile upgrade&lt;&#x2F;code&gt;でも毎回inputが更新されてしまう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;非常に浅い理解でflake.nixを作って自分のパッケージをインストールする(2021-11-05)&quot;&gt;非常に浅い理解でflake.nixを作って自分のパッケージをインストールする(2021-11-05)&lt;&#x2F;h1&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix build
&lt;&#x2F;span&gt;&lt;span&gt;nix profile install result&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一方、channelに対するoverlayはなくなった（はず）なので、さて勝手に最新バージョンをbuildするにはどうしたものか。&lt;&#x2F;p&gt;
&lt;p&gt;例えば、emacs27に対するoverlayだったemacs-headは以下のようにしてemacs28というattributeを注入していた。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# emacs-head.nix
&lt;&#x2F;span&gt;&lt;span&gt;self: super: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;emacs28 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;emacs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;overrideAttrs (attrs: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;pname &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head-${&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;28.0.60&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;flakeにするとderivationを一つ返すファイルflake.nixが必要になる。
&lt;em&gt;ここが浅い理解。それではnixpkgs&#x2F;flake.nixが理解できないではないか。&lt;&#x2F;em&gt;
なのでemacs28が追加された集合を作るのでははなく、できたderivationをそのまま返せばいい(&lt;code&gt;defaultPackage.${system}&lt;&#x2F;code&gt;に代入している)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Emacs Head, the unreleased 28.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixpkgs-unstable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:numtide&#x2F;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;defaultPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;x86_64-darwin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;        emacs27&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;overrideAttrs (attrs: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head-${&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;pname &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;emacs-head&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;28.0.60&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ファイル名がflake.nix固定なので、インストールしたいパッケージごとにディレクトリを作らないといけない。
flakesリポジトリのサブディレクトリとしてまとめたいのだが。なんかうまくいかない。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nix profile install&lt;&#x2F;code&gt;でのインストールがうまくいかない。そのためにはできたderivationを&lt;code&gt;nixpkgs.defaultPackeges&lt;&#x2F;code&gt; または&lt;code&gt;legacyPackages&lt;&#x2F;code&gt;に注入しないといけないのだが、見ればわかるようにやってない。それはflake.nixではなくdefault.nixだかshell.nixの仕事のような気がする。&lt;code&gt;nix build &amp;amp; nix install result&#x2F;&lt;&#x2F;code&gt;はうまくいく。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-11-02_banner.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-11-06&quot;&gt;2021-11-06&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;discourse.nixos.org&#x2F;t&#x2F;nix-2-4-released&#x2F;15822&#x2F;5&quot;&gt;Announcement on Nix discourse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;&quot;&gt;Manual (for version 2.4)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;だんだんわかってきたので箇条書きに変更した。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;パッケージの更新&quot;&gt;パッケージの更新&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix profile upgrade &amp;#39;.*&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;flakeはTTLが切れたら勝手に更新してくれる。&lt;&#x2F;p&gt;
&lt;p&gt;ただし、こうしたいならchannelからではなくflakeからパッケージをインストールしなければならない。
以下はnixpkgs-unstable channelからnixpkgs&#x2F;nixpkgs-unstable registryへ引越しの途中の状態。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;0 - - &#x2F;nix&#x2F;store&#x2F;l1nnjj26j4nfggzfdp25d5074m35xrwa-parallel-20210722
&lt;&#x2F;span&gt;&lt;span&gt;4 - - &#x2F;nix&#x2F;store&#x2F;6kaig6yyxm6mfha5b21x827dkfazb0cg-ispell-3.4.04
&lt;&#x2F;span&gt;&lt;span&gt;7 - - &#x2F;nix&#x2F;store&#x2F;ghshklfk3q98cikad1wf8b0rpwhmp1iz-tmux-3.2a
&lt;&#x2F;span&gt;&lt;span&gt;8 - - &#x2F;nix&#x2F;store&#x2F;475pa4h5rd6289zm8iga507ppl3k9zwn-nix-2.4pre-rc1
&lt;&#x2F;span&gt;&lt;span&gt;5 - - &#x2F;nix&#x2F;store&#x2F;wiqcjg66s7sb6cais8pifrk3l9cpkrmq-nss-cacert-3.66
&lt;&#x2F;span&gt;&lt;span&gt;7 flake:nixpkgs&#x2F;nixpkgs-unstable#legacyPackages.x86_64-darwin.tmux github:NixOS&#x2F;nixpkgs&#x2F;7053541084bf5ce2921ef307e5585d39d7ba8b3f#legacyPackages.x86_64-darwin.tmux &#x2F;nix&#x2F;store&#x2F;ghshklfk3q98cikad1wf8b0rpwhmp1iz-tmux-3.2a
&lt;&#x2F;span&gt;&lt;span&gt;11 flake:nixpkgs&#x2F;nixpkgs-unstable#legacyPackages.x86_64-darwin.ispell github:NixOS&#x2F;nixpkgs&#x2F;7053541084bf5ce2921ef307e5585d39d7ba8b3f#legacyPackages.x86_64-darwin.ispell &#x2F;nix&#x2F;store&#x2F;6kaig6yyxm6mfha5b21x827dkfazb0cg-ispell-3.4.04
&lt;&#x2F;span&gt;&lt;span&gt;14 flake:nixpkgs&#x2F;nixpkgs-unstable#legacyPackages.x86_64-darwin.parallel github:NixOS&#x2F;nixpkgs&#x2F;7053541084bf5ce2921ef307e5585d39d7ba8b3f#legacyPackages.x86_64-darwin.parallel &#x2F;nix&#x2F;store&#x2F;l1nnjj26j4nfggzfdp25d5074m35xrwa-parallel-20210722
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この状態からどうやってnixを移行すればいいのだろう。
&lt;code&gt;nix&lt;&#x2F;code&gt;と&lt;code&gt;nix_2_4&lt;&#x2F;code&gt;とが同じ優先度を持っているのでそれを設定して上書き可能な状態にしなければいけないことはわかった。
しかし既にnix-envが使えない状況でどのコマンドを使えばそれができるのだろう。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;5473&quot;&gt;issue&lt;&#x2F;a&gt;立っているのでどうもできないようだ。ワハハ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;パッケージの削除&quot;&gt;パッケージの削除&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;nix profile list&lt;&#x2F;code&gt;で通し番号を調べて&lt;code&gt;nix profile remove&lt;&#x2F;code&gt;で指定。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ゴミの回収&quot;&gt;ゴミの回収&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix profile wipe-history --older-than 7d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;パッケージの検索&quot;&gt;パッケージの検索&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;nix search nixpkgs package-name
&lt;&#x2F;span&gt;&lt;span&gt;nix search nixpkgs&#x2F;nixpkgs-unstable package-name   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# only a specified branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;flakeはキャッシュされるので&lt;code&gt;nix-env -qa&lt;&#x2F;code&gt;とは比べ物にならない。&lt;&#x2F;p&gt;
&lt;p&gt;なんか成熟感と新鮮さが同時にやってきた。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Nov.</title>
        <published>2021-11-01T00:00:00+00:00</published>
        <updated>2021-11-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-11-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-11-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;Recap&quot;&gt;Recap&lt;&#x2F;h1&gt;
&lt;p&gt;10月はSplrを2回もリリースできました。
Githubの新しいproject機能で進捗管理を始めたので、それを見ながらどういう進展があったのか振り返っていきます。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Splr-0.13&quot;&gt;Splr-0.13&lt;&#x2F;h1&gt;
&lt;p&gt;目玉は問題が多かったchrono-BTを捨ててtrail savingを実装したこと。
実際にはまだコードとしては残っているけどchrono-BTはもうサポートしないでしょう。
Chrono-BTはUNSAT certificationのバグがどうやっても取れなかった。
Splrでのpropagateの非決定性に由来する論理バグに少しだけ悩まされ、結局論文にあった3つの改良点の最初の項目（saving over multiple conflicts）は結局放棄することになった。
というわけでいくつかの妥協を重ねることにはなったものの論理バグをおそらく持ち込まずに実装できたと思う。
そしてそこそこの効果は出たようだ。
めでたし。&lt;&#x2F;p&gt;
&lt;p&gt;他の変更点はUNSAT certificateのファイル出力をまめ書きするようにしたこと。
ただfile lockをよくわかってないのでまとめ書きで速くなったかどうかは不明。
いつか考えねば。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Splr-0.14&quot;&gt;Splr-0.14&lt;&#x2F;h1&gt;
&lt;p&gt;ついで0.14ではbinary clauseに対するpropagationを高速化するためbinary linkを&lt;code&gt;HashMap&lt;&#x2F;code&gt;だけに入れるのをやめてリスト構造とHashMapを併用する形に変更。
その結果&lt;code&gt;HashMap&lt;&#x2F;code&gt;に対するiterationがなくなって決定性が復活しました！これは意外に大きな副産物。
デバッグがすごくやりやすくなった。
binary clauseはそれ以外の節とかなり違う実装になってきたのでもうclauseではなく(directional) linkとしか思えなくなってきたので識別子として&lt;code&gt;clause&lt;&#x2F;code&gt;という語句を使うやめて&lt;code&gt;binary_link&lt;&#x2F;code&gt;という名前で書き直し。
もはやclause eliminator（のループ）さえ対応したらbinary clauseは存在しなくなるところまできました（実際Clause DBの中にBinary Link DBがあるような形になっている）。
ただ実際に変更を始める論理エラーが噴出しそうなので0.14が終わってからのfuture workとして一旦棚上げしておこう。
関連してwatch listを&lt;code&gt;HashMap&lt;&#x2F;code&gt;で実装するためのコード、featureも削除した。&lt;&#x2F;p&gt;
&lt;p&gt;オリジナルのアイデアとしてbinary linkで繋がった依存グラフの中間ノードに報酬を与える必要はないのではなかろうかと考えてsuppress_reason_chainというfeatureを実装してみた。
しかし実験結果は否定的だったので削除した。
特にbinary clauseが多い問題で悪化が激しいようなので、やはりもらうべき報酬をもらい損ねた変数が出てくるようだ。
binary clauseが少なければそもそも圧縮する必要性が軽減されるのでアイデアとしては袋小路だろう。&lt;&#x2F;p&gt;
&lt;p&gt;さらに細かい修正としては、節削減時に特別に残すための条件を次のステップで実行されるvivificationで選択されるものということにした。これまで使っていた節長だとか活性度だとかLBDだとかは全部無視。
この手の尺度は実験繰り返さないと選択する根拠が得られず、時間だけが過ぎてしまいがちなのだ。
そもそも本来のvivification target選択条件は2回以上LBDが2以上減少したことなのだが、1減少を3回繰り返したものはどうしてダメなのかよくわからない。
あまり論理的ではないような気がしたのでvivification前のrankからどれだけ減ったかで判断することにした。
そこで各節がrankを二つ保存する必要が出てきた。
&lt;code&gt;Clause&lt;&#x2F;code&gt;のmemory footprintを増やしたくなかったのでプログラム全体で一つのデータ型にまとめていた各種フラグFlagを変数用と節用に分割してそれぞれ8bitで保持するようにして場所を確保。
rankは16bitとなり、多分、多分大丈夫だろう（節長が6万を超える。あるだろうか？）。
こうなってくると24bit整数とか56bit整数とかが欲しいなあ。
結構大胆な変更だけまあ許せる実験結果になったので、採用。
またコンフリクトの原因と変数割り当ての理由は同じ形式で表現できるはずなのに&lt;code&gt;ConflictContext&lt;&#x2F;code&gt;と&lt;code&gt;AssignReason&lt;&#x2F;code&gt;という二つの型を使っていたので、&lt;code&gt;ConflictContext&lt;&#x2F;code&gt;は&lt;code&gt;AssignReason&lt;&#x2F;code&gt;を内包する形で定義し直し。&lt;&#x2F;p&gt;
&lt;p&gt;アルゴリズム以外の変更としてはfeature configurationの違いを吸収するため関数内でマクロをいくつも定義して関数本体では余計な分岐が見えないようなスタイルを採用。
関数そのものはさらに長くなるけど、フローが追いやすくなったので、もっと早い段階で検討すべきだった。
パラメータチューニングとしてvar elimination&#x2F;clause subsumptionに時間をかけ過ぎ（リテラルから節へのマッピングデータを作るのが重すぎ）なのでin-processorの実行回数を節数に応じて減らすことにした。&lt;&#x2F;p&gt;
&lt;p&gt;そして開発中にrustc 1.56がリリースされたのでRust 2021 Editionに移行しました。
と言っても&lt;code&gt;TryFrom&lt;&#x2F;code&gt;をimportしなくなっただけかも。&lt;&#x2F;p&gt;
&lt;p&gt;最後の最後に余計なフィールドやメソッドを削除しつつ、大事なfeaturesの設定変えてもコンパイルできるように変更し、そして&lt;code&gt;Lit&lt;&#x2F;code&gt;を&lt;code&gt;NonZeroU32&lt;&#x2F;code&gt;に変更して、2021年11月01日にリリース（なんとなくキリがいい感じ）。
結構なメンテナンスが入って広範な修正になったので、diffがかなり大きなものになってしまいました。&lt;&#x2F;p&gt;
&lt;p&gt;SAT Competition 2021 benchmarkの結果はほんのちょっとだけ0.13より遅くなったけどまあ誤差範囲内と強弁できるかもといった感じ。
なので0.14はほぼSplr史上最強のSplrなのだ。
めでたし。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;11月の予定&quot;&gt;11月の予定&lt;&#x2F;h1&gt;
&lt;p&gt;論文読むさ。
_Rust for Rustaceans_は後100ページ程なので多分時間を作れるでしょう。&lt;&#x2F;p&gt;
&lt;p&gt;気が向いたらbinary clauseを完全抹消して0.15。
その後（どちらかといえば遠い将来のイメージだが）はSLSをキャッチアップだ！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>MacOSでのNix2.4に対応した&#x2F;nixの作り方</title>
        <published>2021-10-29T00:00:00+00:00</published>
        <updated>2021-10-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-10-29-nix24-requires-the-right-way/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-10-29-nix24-requires-the-right-way/</id>
        
        <content type="html">&lt;p&gt;Nix 2.4のalphaリリースがnixpkgs unstableに入った当初の頃は2.4に切り替えると&lt;code&gt;nix-channel --update&lt;&#x2F;code&gt;に失敗するので、手を出さずにいたのだけど、Nix 2.4のリリース(release.mdによれば2021-11-01のようだ)直前になってnix-2.4pre版へ自動更新されるようになっても、相変わらずそのエラーが出てしまう。そしてネットで調べても同じ症状に困っている人が見つからない。&lt;&#x2F;p&gt;
&lt;p&gt;どうも本格的に個人的な問題がありそうなので、ソースからbuildしたりして調べた結果、&#x2F;nixがシンボリックリンク経由なのが原因ということになった。（丹念に探せば実は最初からそういうエラーメッセージを見つけられたかもしれないのだが。）&lt;&#x2F;p&gt;
&lt;p&gt;あれ、&lt;code&gt;NIX_IGNORE_SYMLINK_STORE&lt;&#x2F;code&gt;で対応できるでのは？
Nixのマニュアルを読み返してみると、一番お手軽だった&#x2F;etc&#x2F;synthetic.confで&#x2F;nixにmountしている方法は全く推奨されていなかった。
実装が変わって2.4ではとうとうこの方法はサポート外になってしまったようだ。&lt;&#x2F;p&gt;
&lt;p&gt;ということで1台目のmacではpartitionぶっ飛ばして再インストールが必要になったりしたけど、全部のmacで&#x2F;etc&#x2F;fstabを編集する1番おすすめの方法で&#x2F;nixを用意することになりました。（セキュリティ的な脆弱性も問題ないようだ。）
これでやっとflakeが使えるようになった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Oct.</title>
        <published>2021-10-01T00:00:00+00:00</published>
        <updated>2021-10-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-10-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-10-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;Recap&quot;&gt;Recap&lt;&#x2F;h1&gt;
&lt;p&gt;ちょっと遅れたけども9月に&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;Splr-0.12.0&quot;&gt;Splr-0.12.0&lt;&#x2F;a&gt;リリースしました。
そして今年の研究動向をちょっとキャッチアップしました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;0.12.0&quot;&gt;0.12.0&lt;&#x2F;h1&gt;
&lt;p&gt;いくつかのヒューリスティックの見直しをしたらかなり性能がよくなった。
いや、depressionが解決したというのが正確かも。
また、多分、認められた研究結果とは相いれないのだろうけど、節に含まれるリテラルの活性度の最大値と節のrankから節の活性度を計算してみると、そこそこいい結果になったので、節にrewardを与えるのはやめました。
さらに&lt;code&gt;Var&lt;&#x2F;code&gt;、&lt;code&gt;Clause&lt;&#x2F;code&gt;からフィールドを抜いて&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;commit&#x2F;47af914a76357768a7ccb1b9fe888cf79ac82d49&quot;&gt;memory footprintを抑えました&lt;&#x2F;a&gt;。
Minisatの時代から存在するArenaは全然導入の見込みが立ってないけど、変数は半減、節も1割以上は小さくなったのでキャッシュヒット率は有意に改善したのではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;気分よくリリースしようと（いよいよ）SAT cometition 2021の問題を使ってベンチマークしたら、またUNSAT certificateが壊れていた。
すぐにchrono-BTが原因だと分かったけど、それ以上の理由は全く検討がつかない。
しょうがないので、それと代替案の導入が目前だったのでchrono-BTを使わないことで解決させた。
ベンチマークの結果は少しだけ遅くなったけど、それでもほぼ過去最高のSplrがリリースできました。&lt;&#x2F;p&gt;
&lt;p&gt;性能が上がったことは大変望ましいんだけど、ベンチマークの検証が無視できなくらい長くなってきた。
まともなソルバだとその結果の検証にはおそらくベンチマークに要する時間と同じかそれ以上かかるみたいだ。
電気代怖い。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Trail_Saving&quot;&gt;Trail Saving&lt;&#x2F;h1&gt;
&lt;p&gt;9月に読み始めた新しめの論文に早速影響を受けてSLSを導入しないことにはいかんよなあと思いつつ、現実的に0.12で問題となったchronoBTを捨てるために喫緊の課題となった&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;pull&#x2F;144&quot;&gt;trail saving&lt;&#x2F;a&gt;の実装にかかりました。
これもやや苦戦中。
少しでも性能が上がるようなら0.13として早めにリリースの予定。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;10月の予定&quot;&gt;10月の予定&lt;&#x2F;h1&gt;
&lt;p&gt;Trail saving以外には、うーん、もっと論文読まにゃ。
SAT2021で関連深そうなやつは全部読んだけどその中だと、やはりHash値を節に持たせて演算に使うのが一番面白かった。
本当は周辺の話題も拾いたい。
「proof checkerの基礎」（高速SATソルバの基礎みたいな解説記事）なんてどこかに落ちてないだろうか。
ないだろうから自分で読まにゃいかんだろうなあ。
あとASPものとかね。
ただ、読書の時間は現在Rust for Rustaceans(early access version)に取られてしまっています。
ディープすぎてのろのろペースでしか読めないわ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implement Trail Saving instead of ChronoBT</title>
        <published>2021-09-23T00:00:00+00:00</published>
        <updated>2021-10-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-09-23-Trail-Saving/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-09-23-Trail-Saving/</id>
        
        <content type="html">&lt;h2 id=&quot;2021-10-01T00:00_🌀&quot;&gt;2021-10-01T00:00 🌀&lt;&#x2F;h2&gt;
&lt;p&gt;できるにはできたけど、かなりの割合で再利用されるようになったけど、性能があがらん。
というかやや遅くなってベンチマークをかける気にならない。
うーむ。
まあ論文で示された結果はそれほど劇的な改善というわけではなかったのでこれでも想定内と考えるべきなのか。&lt;&#x2F;p&gt;
&lt;p&gt;バリエーションとして&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;repropagateはするけども矛盾は再利用しない（もっと大事な矛盾を見つけるかもしれない）。これはConflict qualityのバリエーション。&lt;&#x2F;li&gt;
&lt;li&gt;propagateの最初で挿入するのはやめる。新規含意リテラルで走査してから、再利用を始める。これももっと重要なリテラルの影響を優先する試み。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;を評価中。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-09-30T08:00&quot;&gt;2021-09-30T08:00&lt;&#x2F;h2&gt;
&lt;p&gt;できた。つまり、binary clauseが矛盾を起こしたときのliteral flipを嫌ったのが原因。
その場合の手当を追加すれば論文通りに実装できる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; cc) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append_saved_literals&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc.link &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NULL_LIT &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;locked&lt;&#x2F;span&gt;&lt;span&gt;(cdb[cc.cid], cc.cid) {
&lt;&#x2F;span&gt;&lt;span&gt;            cc.link &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb[cc.cid].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;lit0&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cc);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2021-09-30&quot;&gt;2021-09-30&lt;&#x2F;h2&gt;
&lt;p&gt;いったいこれは何を意味しているんだ？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; cc) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append_saved_literals&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cdb[cc.cid];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ret &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;locked&lt;&#x2F;span&gt;&lt;span&gt;(c, cc.cid) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cc)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; cc.link &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;NULL_LIT &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            cc.link &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb[cc.cid].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;lit0&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cc)
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ret.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ret;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;conflictを全て無視すると動く&lt;&#x2F;li&gt;
&lt;li&gt;lockされている節によるconflictは利用しても問題ない&lt;&#x2F;li&gt;
&lt;li&gt;binary clauseは正規化してやれば問題ない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;では、それ以外の節は「正規化」できないのか？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-09-28&quot;&gt;2021-09-28&lt;&#x2F;h2&gt;
&lt;p&gt;このように短いコードなので、1日で実装終わるはずだったのに3日ほどデバッグで苦しんでしまった。&lt;&#x2F;p&gt;
&lt;p&gt;一体何が問題だったかというと、&lt;code&gt;reason_saved&lt;&#x2F;code&gt;に入れた節がいつの間にかreasonでなくっていたせい。
確かに他の伝播（つまり別リテラルのreasonに使われる）場合、節内リテラル順序は変更されるのでそういう場合を想定しなければならない。少なくともSplrでは（論文ではどういう実装を考えているのだ？）。&lt;&#x2F;p&gt;
&lt;p&gt;そして観測を続けると、reason_savedに保存された節の全てのリテラルが否定されることがあるようだ。
これは矛盾状態なので、どのリテラルで考えるかによらず（先頭がどのリテラルなのかを気にすることなく）矛盾解析に回してよさそうだが、矛盾扱いすると、UNSAT certificateがおかしくなってしまう。&lt;&#x2F;p&gt;
&lt;p&gt;一体何が起きているのだろう。
&lt;code&gt;q_head&lt;&#x2F;code&gt;の更新し忘れなのだろうか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Trail_Saving_on_Back_Jump&quot;&gt;Trail Saving on Back Jump&lt;&#x2F;h2&gt;
&lt;p&gt;ChronoBTがちゃんと動かない！いくら考えてもなぜUNSAT certificateがおかしくなるのか見当もつかないので、諦めてもっと新しいアプローチに乗り換えることにした！
Splr-0.13にランディングの&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;pull&#x2F;144&quot;&gt;予定&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;[1] Randy Hickey and Fahiem Bacchus, Trail Saving on Backtrack, SAT 2020, LNCS 12178, pp.46-61, 2020.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;preparation&quot;&gt;preparation&lt;&#x2F;h3&gt;
&lt;p&gt;先頭部が削除、追加されるので使用するデータ型はスタックにした。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;sturct AssignStack {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; Partial record of unassigned assignments as stack
&lt;&#x2F;span&gt;&lt;span&gt;    trail_saved: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    reason_saved: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;AssignReason&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fn_backtrack&quot;&gt;fn backtrack&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-09-23_Backtrack.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;backtrack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, bt_level: DecisionLevel) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; current_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;decision_level&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; head &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len_upto&lt;&#x2F;span&gt;&lt;span&gt;(bt_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; lit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.trail[head&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len_upto&lt;&#x2F;span&gt;&lt;span&gt;(current_level &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vi &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; lit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;vi&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; copy the reason
&lt;&#x2F;span&gt;&lt;span&gt;    self.reason_saved[vi] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.reason[vi];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; save the assign
&lt;&#x2F;span&gt;&lt;span&gt;    self.trail_saved.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(lit);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  self.trail.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;truncate&lt;&#x2F;span&gt;&lt;span&gt;(head);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fn_propagate&quot;&gt;fn propagate&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-09-23_Propagate.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;返値の型を&lt;code&gt;Option&lt;&#x2F;code&gt;から&lt;code&gt;Result&lt;&#x2F;code&gt;に変更した。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;new_propagate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ConflictContext&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remains&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;use_saved_trail&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 以前のpropagateの処理を1リテラル分だけ走らせる。
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate_single&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;fn_use_saved_trail&quot;&gt;fn use_saved_trail&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-09-23_UseSavedTrail.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以下の2つは等価だから条件式は &lt;i&gt;O(1)&lt;&#x2F;i&gt; なものに変換した。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;self.trail.contains(&amp;amp;lit)&lt;&#x2F;li&gt;
&lt;li&gt;self.assigned(lit) == Some(true)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;use_saved_trail&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), ConflictContext&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;self.trail_saved.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.trail_saved[i];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vi &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; lit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;vi&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self.reason_saved[vi] {
&lt;&#x2F;span&gt;&lt;span&gt;            AssignReason::Decision &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(lit) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                self.trail_saved.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;truncate&lt;&#x2F;span&gt;&lt;span&gt;(i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(());
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            AssignReason::Implication(c, l) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(lit) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; continue&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(ConflictContext{ cid: c, link: l}),
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_implication&lt;&#x2F;span&gt;&lt;span&gt;(lit, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, c, l) }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            AssignReason::Asserted(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;impossible path&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            AssignReason::None &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;panic!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;impossible path&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Switch to Zola</title>
        <published>2021-09-20T00:00:00+00:00</published>
        <updated>2021-09-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/09-17-zola/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/09-17-zola/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;に乗り換えたぞ！&lt;&#x2F;p&gt;
&lt;p&gt;これでnode.jsをインストールしなくて済む。
そしてサイト生成が2分掛かっていたのが40秒くらいで済むようになったし、
github.ioにデプロイされるまでの時間がそれほど待ち遠しいものではなくなった。
ただしfront matterが大きく変わってしまったので、ぽちぽち修正しなければ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ファイル名から日付を取得するというXXXな機能について&quot;&gt;ファイル名から日付を取得するというXXXな機能について&lt;&#x2F;h3&gt;
&lt;p&gt;これまでこのサイトではファイル名を日付で始めることでblogらしさを出していたのだけど、
zolaだとそういうファイル名は勝手に分解されてプロパティとしての日付とslugに分かれてしまう。
もちろんfront matterで設定はできるのだけど、書くことが1行増えるのも面倒くさい。どうしたもんかなあと考えて今のところの結論は
&lt;code&gt;2021-09-20_2021-09-20-this.md&lt;&#x2F;code&gt; になった。&lt;&#x2F;p&gt;
&lt;p&gt;これだと先頭部&lt;code&gt;2021-09-20&lt;&#x2F;code&gt;がdate propertyにはぎ取られ、残りの&lt;code&gt;2021-09-20-this&lt;&#x2F;code&gt;がslugとして使われる。
自動設定されたdate propertyが存在するのでテンプレート中で使えるし、end point名も以前のものと同じにすることができる。
また、関連アセット用ディレクトリとして&lt;code&gt;2021-09-20&#x2F;&lt;&#x2F;code&gt;という名前を使えば、ファイル操作時にはmdファイルとasset directoryが近接して表示させられる。
ファイル名がえらく長くなってしまうけど、まあこれが正解だろう。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2021-09-19&quot;&gt;2021-09-19&lt;&#x2F;h3&gt;
&lt;p&gt;yyyyでディレクトリ分割されているので、ファイル名は&lt;code&gt;2021-09-19-09-19-zola.md&lt;&#x2F;code&gt;でもいいかも。これだとurlは
shnarazk.github.io&#x2F;2021&#x2F;09-19-zola&#x2F; になる。。。&lt;&#x2F;p&gt;
&lt;p&gt;やっぱりやめよう。。。&lt;&#x2F;p&gt;
&lt;p&gt;これはブログというよりもメモの集積場なので、初出日ではなく最終更新日でソートしたい。
そのため2日掛かりでfront matterからdateフィールドを消してファイル名に埋め込んでみたけど、ここからさらに
updatedフィールドを追加するのは大変すぎる。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;基本はファイル名からdateを取得する。そのため、&lt;code&gt;YYYY-MM-DD_YYYY-MM-DD_title.md&lt;&#x2F;code&gt;というファイル名にする。また&lt;code&gt;date&lt;&#x2F;code&gt;フィールドで記事をソートする。&lt;&#x2F;li&gt;
&lt;li&gt;内容の更新があってそれが重要なら、&lt;code&gt;date&lt;&#x2F;code&gt;フィールドを追加し、上書きする。&lt;&#x2F;li&gt;
&lt;li&gt;その際, &lt;code&gt;extra.published&lt;&#x2F;code&gt;フィールドを追加し、初出日を記録しておく。&lt;&#x2F;li&gt;
&lt;li&gt;軽微な更新なら&lt;code&gt;updated&lt;&#x2F;code&gt;フィールドで記録する。&lt;&#x2F;li&gt;
&lt;li&gt;フッターでは&lt;code&gt;published&lt;&#x2F;code&gt;, &lt;code&gt;date&lt;&#x2F;code&gt;, &lt;code&gt;updated&lt;&#x2F;code&gt;の順に表示する。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;こういうのでどうだろうか。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2021-09-20&quot;&gt;2021-09-20&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;date&lt;&#x2F;code&gt;フィールドは常にファイル名から拾う方がスマートか。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;date&lt;&#x2F;code&gt;フィールドで記事をソートするように設定する。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;YYYY-MM-DD_YYYY-MM-DD_title.md&lt;&#x2F;code&gt;というファイル名にする。&lt;&#x2F;li&gt;
&lt;li&gt;内容の更新があってそれが重要なら、ファイル名を更新する。&lt;&#x2F;li&gt;
&lt;li&gt;その際, &lt;code&gt;extra.published&lt;&#x2F;code&gt;フィールドを追加し、初出日を記録しておく。&lt;&#x2F;li&gt;
&lt;li&gt;軽微な更新なら&lt;code&gt;updated&lt;&#x2F;code&gt;フィールドで記録する。&lt;&#x2F;li&gt;
&lt;li&gt;フッターでは&lt;code&gt;published&lt;&#x2F;code&gt;, &lt;code&gt;date&lt;&#x2F;code&gt;, &lt;code&gt;updated&lt;&#x2F;code&gt;の順に表示する。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Just a note about this site and me</title>
        <published>2021-09-19T00:00:00+00:00</published>
        <updated>2021-09-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/about/" type="text/html"/>
        <id>https://shnarazk.github.io/about/</id>
        
        <content type="html">&lt;p&gt;This site collects my notes on &lt;a href=&quot;&#x2F;tags&quot;&gt;various topics&lt;&#x2F;a&gt;, in particular about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Propositional logic -- &lt;a href=&quot;&#x2F;tags&#x2F;#sat&quot;&gt;#sat&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;NixOS -- &lt;a href=&quot;&#x2F;tags&#x2F;#nixos&quot;&gt;#nixos&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;GNU Emacs -- &lt;a href=&quot;&#x2F;tags&#x2F;#emacs&quot;&gt;#emacs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;LaTeX -- &lt;a href=&quot;&#x2F;tags&#x2F;#latex&quot;&gt;#latex&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Linux -- &lt;a href=&quot;&#x2F;tags&#x2F;#archlinux&quot;&gt;#archlinux&lt;&#x2F;a&gt;, &lt;a href=&quot;&#x2F;tags&#x2F;#linux&quot;&gt;#linux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust -- &lt;a href=&quot;&#x2F;tags&#x2F;#rust&quot;&gt;#rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;Profile&quot;&gt;Profile&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A researcher on satisfiability problem (SAT solvers), studying logic, category theory.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A programmer using Nuxt.js, Vue.js, NixOS, Rust, Swift.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A user of Emacs, Latex, Linux, macOS, Mendeley, &lt;del&gt;Observable&lt;&#x2F;del&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Used to be a bicycle rider (bicycle deliverer).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;&#x2F;i&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&quot;&gt;@github&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;History_of_build_tool&quot;&gt;History of build tool&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;2.0 since 2021-09-17 -- Zola&lt;&#x2F;li&gt;
&lt;li&gt;1.0 since 2018 -- jang, a home-made static site generator using Node.js&lt;&#x2F;li&gt;
&lt;li&gt;2016 -- Hugo&lt;&#x2F;li&gt;
&lt;li&gt;?? -- Ghost&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Sep.</title>
        <published>2021-09-03T00:00:00+00:00</published>
        <updated>2021-09-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-09-03-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-09-03-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;順調な8月&quot;&gt;順調な8月&lt;&#x2F;h1&gt;
&lt;p&gt;0.10のリリースから一ヶ月。この間に0.11もリリースできました。現在0.12の準備中。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;0.11リリース&quot;&gt;0.11リリース&lt;&#x2F;h1&gt;
&lt;p&gt;正しいことが売りの0.10をリリースするために、ちょっと後回しにしていた、Luby stabilizationのタイミングの調整をしました。
これは結構性能に影響するものでした。
あとはどうでもいいマイクロなチューニングの削除として、vivifierの対象節選択部を簡略化。&lt;&#x2F;p&gt;
&lt;p&gt;大物はないけど、ベンチマークの結果はそこそこ改善。
ベストではないにしろ今年リリースしたバージョンでもたらされた壊滅的な速度低下がかなり解消しました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;その他&quot;&gt;その他&lt;&#x2F;h1&gt;
&lt;p&gt;SAT-benchをSAT Competition 2021対応にして、2018年のベンチマーク問題を削除。
2019年の問題も近々削除の予定。
というわけで、長らく愛用してきたT56.2.cnfともいよいよおさらば。
そして&lt;a href=&quot;&#x2F;2021&#x2F;2021-09-XX-KlaraAndTheSun&quot;&gt;Klara and the Sun&lt;&#x2F;a&gt;を読み終わったあとは溜まりに溜まったSAT関連の論文読みモードに入りました。&lt;&#x2F;p&gt;
&lt;p&gt;さらにCaDiCaL 1.4.1をnix package化。
すぐにマージされたので、調子に乗ってKissatもパッケージングしようとしたら、なんとOS依存で挙動が変わる。
正確にはMacOSではUNSAT certificateが&lt;a href=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2021&#x2F;2021-09-03-UNSATlog&#x2F;2021&#x2F;2021-08-31-kissat-on-macos&quot;&gt;壊れる&lt;&#x2F;a&gt;ことがある。。。。
ちょっと手が出せなくてやる気を失った。さらに言うとこういうOS依存なコーディングまでしてあるプログラムに張り合うのはちょっと戦意喪失気味になってしまいました。
まあローカル探索ソル馬を組み込むのはもう避けて通れなさそうなんだけどねえ。&lt;&#x2F;p&gt;
&lt;p&gt;いっそのことUNSAT certificate verifierの実装に舵を切ろうかしらん。。。。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;9月の予定&quot;&gt;9月の予定&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;論文読む, &lt;em&gt;Theory and Applications of Satisfiability Testing&lt;&#x2F;em&gt; はいつものようにSAT関係少ないからもう読むところないよ&lt;&#x2F;li&gt;
&lt;li&gt;Local search solverは、、、大物すぎる&lt;&#x2F;li&gt;
&lt;li&gt;binary clauseを消しちゃおうかな。これは0.13だな。&lt;&#x2F;li&gt;
&lt;li&gt;Hash面白かった。vivificaitonまたはeliminatorの実行中だけでも実装してみようかな。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というようなことを考える一ヶ月という感じで。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Kissat on macOS</title>
        <published>2021-08-31T00:00:00+00:00</published>
        <updated>2021-11-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-08-31-kissat-on-macos/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-08-31-kissat-on-macos/</id>
        
        <content type="html">&lt;h2 id=&quot;2021-11-28&quot;&gt;2021-11-28&lt;&#x2F;h2&gt;
&lt;p&gt;NixOS 21.11のリリースに向けての総ざらえでマージされた。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-10-09&quot;&gt;2021-10-09&lt;&#x2F;h2&gt;
&lt;p&gt;言われるがままにPR修正したのにone approveされたところで放置されてしまった。
&lt;code&gt;git rebase master; git push -f&lt;&#x2F;code&gt;したら中身は変わってないのだけど1週間ぶりに反応があった。
さあどうなるんだか 🙁&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;結局approve されなかったので流産となりました。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-09-24&quot;&gt;2021-09-24&lt;&#x2F;h2&gt;
&lt;p&gt;nixpkgsにPR送った。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-09-18&quot;&gt;2021-09-18&lt;&#x2F;h2&gt;
&lt;p&gt;Biere先生にissue送って、修正してもらった。2.0.1でパッケージできるようになった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-09-07&quot;&gt;2021-09-07&lt;&#x2F;h2&gt;
&lt;p&gt;手に負えないと思ったけど、ちょっとだけコードを追ってみると単なる境界条件の判定ミスだ。
丁寧な表現でissue立てたけど返事がこん。
今週返事がなければ修正パッチ込みでNixパッケージ化しよう！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-08-31&quot;&gt;2021-08-31&lt;&#x2F;h2&gt;
&lt;p&gt;KissatをNix package化しようとして、OSの違いに阻まれてしまった。
こりゃ手に負えない。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ .&#x2F;result&#x2F;bin&#x2F;kissat ..&#x2F;SAT&#x2F;kissat&#x2F;test&#x2F;cnf&#x2F;add128.cnf proof                 
&lt;&#x2F;span&gt;&lt;span&gt;c ---- [ banner ] ------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c KISSAT SAT Solver                                                           
&lt;&#x2F;span&gt;&lt;span&gt;c Copyright (c) 2019-2021 Armin Biere JKU Linz                                
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c Version 2.0.0 unknown                                                       
&lt;&#x2F;span&gt;&lt;span&gt;c clang version 7.1.0 (tags&#x2F;RELEASE_710&#x2F;final) -W -Wall -O3 -DNDEBUG          
&lt;&#x2F;span&gt;&lt;span&gt;c Mon Aug 30 23:51:02 UTC 2021 Darwin demorgan.local 20.6.0 x86_64            
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c ---- [ proving ] -----------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c opened and writing proof to DRAT file:                                      
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c   proof                                                                     
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c ---- [ parsing ] -----------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c opened and reading DIMACS file:                                             
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c   ..&#x2F;SAT&#x2F;kissat&#x2F;test&#x2F;cnf&#x2F;add128.cnf                                         
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c parsed &amp;#39;p cnf 2282 6586&amp;#39; header                                             
&lt;&#x2F;span&gt;&lt;span&gt;c closing input after reading 96737 bytes (94 KB)                             
&lt;&#x2F;span&gt;&lt;span&gt;c finished parsing after 0.00 seconds                                         
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c ---- [ solving ] -----------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c  seconds switched rate      trail    variables                              
&lt;&#x2F;span&gt;&lt;span&gt;c         MB reductions conflicts glue      remaining                         
&lt;&#x2F;span&gt;&lt;span&gt;c          level restarts redundant irredundant                               
&lt;&#x2F;span&gt;&lt;span&gt;c                                                                             
&lt;&#x2F;span&gt;&lt;span&gt;c *  0.00  0 0 0 0  0 0   0   0 0% 0 6584 2280 100%                           
&lt;&#x2F;span&gt;&lt;span&gt;c {  0.00  0 0 0 0  0 0   0   0 0% 0 6584 2280 100%                           
&lt;&#x2F;span&gt;&lt;span&gt;c i  0.00  0 128 0 0  0 128   1   0 11% 0 6584 2279 100%                      
&lt;&#x2F;span&gt;&lt;span&gt;c i  0.01  0 230 0 0  1 77   6   2 38% 1 6584 2277 100%                       
&lt;&#x2F;span&gt;&lt;span&gt;c -  0.01  0 260 0 1  8 9 301 206 60% 2 6576 2277 100%                        
&lt;&#x2F;span&gt;&lt;span&gt;c i  0.01  0 152 0 1 124 20 664 506 47% 2 6576 2263 99%                       
&lt;&#x2F;span&gt;&lt;span&gt;c }  0.02  0 149 1 1 220 30 1000 741 50% 2 6576 2263 99%                      
&lt;&#x2F;span&gt;&lt;span&gt;c [  0.02  0 0 1 1 220 0 1000 741 0% 0 6576 2263 99%                          
&lt;&#x2F;span&gt;&lt;span&gt;c O  0.02  0 143 1 1 220 31 1004 672 21% 2 6538 2263 99%                      
&lt;&#x2F;span&gt;&lt;span&gt;c i  0.02  0 199 1 1 220 41 1009 675 55% 2 6538 2261 99%
&lt;&#x2F;span&gt;&lt;span&gt;c i  0.02  0 169 1 1 220 24 1025 682 38% 2 6538 2257 99%
&lt;&#x2F;span&gt;&lt;span&gt;..&#x2F;src&#x2F;proof.c:269: check_repeated_proof_lines: Coverage goal `proof-&amp;gt;units[punit]&amp;#39; reached.
&lt;&#x2F;span&gt;&lt;span&gt;c caught signal 6 (SIGABRT)
&lt;&#x2F;span&gt;&lt;span&gt;c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Klara and the Sun</title>
        <published>2021-08-29T00:00:00+00:00</published>
        <updated>2021-08-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-08-29-KlaraAndTheSun/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-08-29-KlaraAndTheSun/</id>
        
        <content type="html">&lt;p&gt;小学生ではなく、大学受験前のティーンエイジャーが主登場人物ではあるが、
おんぶされたり、
知的レベルが高いにも関わらず太陽を擬人化するクララという登場人物の描写、
それらロボットを受け入れた社会の描きようから、
そして描かれるドラマから、
なんとなくドラえもん的な印象を受けてしまう。&lt;&#x2F;p&gt;
&lt;p&gt;なぜ、そういう設定なのかまで考察しなければ文学作品についてエントリーを作る意味ないのは重々承知。しかし、まあ、そのレベルで脳みそが動いてないので、
それは放棄して、チラシの裏、小学生の感想文以下の短文羅列でお茶を濁すw。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;擬人化能力はなんなのだろう。これによって演繹された結論がそれほど頑健、「健全かつ完全」、なのだろうか。うーむ。&lt;&#x2F;li&gt;
&lt;li&gt;さらにそのプランニングに対する影響力の大きいこと。人間が一様に算術的記号処理能力を持っているように、AFの中でも飛び抜けたレベルの超知性には神の存在とその根拠の発見能力は不可欠なのだろうか。（創造主の掟みたい。）&lt;&#x2F;li&gt;
&lt;li&gt;7割読んだところで面白くなってきた。アルジャーノン的な話になるかと思った。&lt;&#x2F;li&gt;
&lt;li&gt;個々のAIが均質化するような発達したネットワークがないことが設定の前提条件になっているようだ。歪んだ技術進化後の舞台なのでスチームパンクのようでもある。（まあネットがないわけでもないことは読んだ後でわかった。後述。）&lt;&#x2F;li&gt;
&lt;li&gt;ドラマ的には、その世界観、広げた風呂敷をしまうあの展開を受け入れざるを得ないあたりやっぱりSFというより寓話だなあ。&lt;&#x2F;li&gt;
&lt;li&gt;それにしても物悲しいエンディングですこと。ラピュタか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以上、読書クラブで話し合ってみたらどうでしょうの例示に一つも答えないのでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;環境&quot;&gt;環境&lt;&#x2F;h2&gt;
&lt;p&gt;あとMontereyのウリのどこでも翻訳機能がApple storeで購入した本では使えなかったのが大変残念。
Blindsightはepubだったので実質previewの機能で翻訳が使えていたのだろう。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;oblongとはなんぞや？&quot;&gt;oblongとはなんぞや？&lt;&#x2F;h3&gt;
&lt;p&gt;意味が取れなかったので本屋に出かけて和訳を見てきた。
目が点になって、その場でKlalaも検索キーワードに追加してネットを調べて納得。
だとすると訳本で使われている「オブロン端末」より「タブレット」の方がいいんじゃないかと思った。&lt;&#x2F;p&gt;
&lt;p&gt;ついでに目に入った「ウサちゃん」もどうかと思わないでもない。
原文はもっと元気を呼び起こさせる言霊的な希望も入った呼び掛けだと思うんだけどねえ。&lt;&#x2F;p&gt;
&lt;p&gt;BlindSightよりはずっとわかりやすい英文だった。
日本語版より1000円安いしおすすめ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Aug.</title>
        <published>2021-08-01T00:00:00+00:00</published>
        <updated>2021-08-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-08-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-08-01-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;Finally_Bugs_Fixed_in_July&quot;&gt;Finally Bugs Fixed in July&lt;&#x2F;h1&gt;
&lt;p&gt;ようやくバグフィックス終わった。7月に&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;Splr-0.10.0&quot;&gt;0.10.0リリース&lt;&#x2F;a&gt;できました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;なんだったのか&quot;&gt;なんだったのか&lt;&#x2F;h1&gt;
&lt;p&gt;Splrの開発史上最大最長の難問になった今回の不整合バグがどうやって発生したのか振り返っておきたい。現れたバグは様々だった。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;UNSAT certificateがおかしい — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;122&lt;&#x2F;li&gt;
&lt;li&gt;単位節が伝播を起こさない — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;119&lt;&#x2F;li&gt;
&lt;li&gt;割り当てられても伝播されない — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;117&lt;&#x2F;li&gt;
&lt;li&gt;依存グラフにより高いレベルのリテラルが出現する — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;116&lt;&#x2F;li&gt;
&lt;li&gt;除去リテラルを戻すとおかしい — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;115&lt;&#x2F;li&gt;
&lt;li&gt;依存グラフでbinary clauseでの方向が逆 — https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;114&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;とまあ呆れるくらい様々。
もうSATソルバーとしてはほぼ壊滅状態だった。&lt;&#x2F;p&gt;
&lt;p&gt;で、これらの原因は一つではなかった。
0.10.0のリリースまでに潰したのは以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;chronoBTの最上レベルリテラル数が1の場合はchronoBTかそうでないかに関わらず同じ処理をしなければならなかったのだが、そうなっていなかった。論文の何気ない記述に引っ張られてしまった。&lt;&#x2F;li&gt;
&lt;li&gt;chronoBT混在環境においてcancel_untilの処理が不適切だった。割り当て順序の逆転が起きていて、正しい依存グラフが作れなくなってしまっていた。&lt;&#x2F;li&gt;
&lt;li&gt;単位伝播は問題ないのだが、Eliminatorやvivifierが生成する節がClauseDBに適切に登録されてなかったため、伝播に失敗する単位節が存在していた。またUNSAT certificateへの反映が不適切だった。&lt;&#x2F;li&gt;
&lt;li&gt;除去変数を戻すモデル拡張器があやしいようなそうでないようなわかりにくいコードだった（sliceやiteratorを使ったもっとRust的（モダン）で意味が取りやすいコードに修正した）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;どれを取っても致命的なのだが、よくもまあもっと早い段階で気づけなかったものだろうか。
おおよそ1年近くSplrはバグ持ち、それもSATソルバーを名乗れないレベルのバグ持ちだったと言うことがわかり、赤面してしまう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;After_0.10.0&quot;&gt;After 0.10.0&lt;&#x2F;h1&gt;
&lt;p&gt;というわけで無事にSplr 0.10.0をリリースしてから、正しさを壊さないようにしながら、ちょっとづつパフォーマンスチューニング中です。&lt;&#x2F;p&gt;
&lt;p&gt;まずはLuby stabilizationが全然よくないので改善中。
気づいていたけども0.10.0にはどうやっても入れる時間的な余裕はなかったので後回しにしていた。
その後、どうもモードの変更を節削減と同期を取るのが相当に効くらしいということがわかったので、そちらを採用。
aes.cnfは0.10.0だと10000秒程度掛かるのが普通なんだけど、この部分を変えてみると2000秒台になっているし、sat-benchの結果もSplrのベストにかなり近くなった。
小さな変更なのだがリリースする価値がありそうだ。
初めて使ったalgorithm2eで書くとこうなる。
Reduction, Elimination, Vivification、そしてモードスイッチ、と綺麗な流れじゃないか。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;2021-08-01_LubyStabilization.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ドキュメントを更新して数日中に0.10.1としてリリースの予定です。&lt;&#x2F;p&gt;
&lt;p&gt;あとは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;重複節の除去：どうもこれは重要のような気がするので早いところ統計データをとってみるつもり。in-processorを頻繁に起動するSplrでは無闇に重複節を発生させている可能性が捨てきれない。clause reductionの後にclause vivificationを実行するように順序を変更したことである程度は削減できているような気もするがさて？ 実際の戦略として組み込む価値があるかは未確定だけど、いくつのソルバーがこの機能のオプションを持っていたはずだし、&lt;code&gt;clause.lits&lt;&#x2F;code&gt;をhash値にマップすればそれほど計算量は高くならないのではないだろうか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;という感じでまあぼちぼちと。
それよりは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;溜まりに溜まった論文読んで、&lt;&#x2F;li&gt;
&lt;li&gt;proceeding読んで、&lt;&#x2F;li&gt;
&lt;li&gt;benchmark suitを今年のものに入れ替えて、
とこれだけやれば8月は終わりです。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>luaLatex-jaでNotoMono-Regularを使いたい</title>
        <published>2021-07-25T00:00:00+00:00</published>
        <updated>2021-07-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-07-25-NotoMono-Regular/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-07-25-NotoMono-Regular/</id>
        
        <content type="html">&lt;p&gt;lualatexの個人共通設定ファイルでゴシック系の文章に対して以下の設定をしています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\setmainjfont&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    BoldFont={NotoSansCJKjp-Bold},
&lt;&#x2F;span&gt;&lt;span&gt;    YokoFeatures={JFM=prop,Kerning=On},
&lt;&#x2F;span&gt;&lt;span&gt;    AutoFakeSlant=0.2,
&lt;&#x2F;span&gt;&lt;span&gt;    SlantedFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldItalicFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldSlantedFeatures={FakeSlant=0.2}]
&lt;&#x2F;span&gt;&lt;span&gt;  {NotoSansCJKjp-Regular}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;で、等幅フォントに関してはこちら。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\setmonofont&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    BoldFont={NotoSansMono-Bold},
&lt;&#x2F;span&gt;&lt;span&gt;    AutoFakeSlant=0.2,
&lt;&#x2F;span&gt;&lt;span&gt;    SlantedFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldItalicFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldSlantedFeatures={FakeSlant=0.2}]
&lt;&#x2F;span&gt;&lt;span&gt; {NotoMono-Regular}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しかし何故かこの設定のせいでlatexを走らせる度に以下のコマンドが実行される。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;luaotfload | db : Reload initiated (formats: otf,ttf,ttc); reason: Font &amp;quot;NotoMono-Regular&amp;quot; not found.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これはいけない。SSD が消耗してしまうではないか。
と思いつつ長い間ほったらかしにしていたけど、ようやく今日対応しました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NotoSansCJKjp-Regular&lt;&#x2F;code&gt;に対応するのはotfファイルで中に名前っぽいもの（フォントの属性指定に使えそうなやつ）が入っている&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;NotoMono-Regular&lt;&#x2F;code&gt;に対応するのはttfファイルでざっとみた感じではその中には名前っぽいものがない&lt;&#x2F;li&gt;
&lt;li&gt;だったらと思ったが&lt;a href=&quot;https:&#x2F;&#x2F;fonts.google.com&#x2F;noto&#x2F;specimen&#x2F;Noto+Sans+Mono?noto.query=mono&quot;&gt;google&lt;&#x2F;a&gt;にはNotoMonoのotfファイルは置いてない(2021-09-24: url更新)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということで以下のように変更すると、問題解決。キャッシュが生きるようになりました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;latex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-latex &quot;&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\setmonofont&lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    BoldFont={NotoSansMono-Bold},
&lt;&#x2F;span&gt;&lt;span&gt;    AutoFakeSlant=0.2,
&lt;&#x2F;span&gt;&lt;span&gt;    SlantedFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldItalicFeatures={FakeSlant=0.2},
&lt;&#x2F;span&gt;&lt;span&gt;    BoldSlantedFeatures={FakeSlant=0.2}]
&lt;&#x2F;span&gt;&lt;span&gt; {NotoMono-Regular.ttf}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで気持ちよくTUG2021に参加できる（それは関係ない）。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Peter Watts, Blindsight</title>
        <published>2021-07-11T00:00:00+00:00</published>
        <updated>2021-07-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-07-11-Blindsight/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-07-11-Blindsight/</id>
        
        <content type="html">&lt;p&gt;Blenderのマニュアルを通して読んだりしたせいで、Apple booksでの連続読書日数が100日を超えたので、記録を切らずに何か読みづけたいものだと思って本を選んでました。&lt;&#x2F;p&gt;
&lt;p&gt;指輪物語も読み終わったところなので、Lord of Ringsの原著が第1候補だったけど、Kindle版は無料で入手済みなので、Apple bookstoreで（日本語版の約6000円に加えて）さらに1600円も出すのはためらってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;では、ということで思いついたのが、そこそこの受賞作でありながら電子書籍化されていないピーターワッツのブラインドサイト。
それなりに面白そうなので、創元がやる気を出すのをずっと待ち続けていたのだけど、どうも無理らしい。
もういっそのこと英語で安く読んでしまえばいいじゃないか。&lt;&#x2F;p&gt;
&lt;p&gt;探せばある、ある、英語版1500円。日本語の文庫上下分冊購入より500円お得。
これにしようかと思って無料サンプルを試し読みつつ更に探してみると、なんと&lt;a href=&quot;https:&#x2F;&#x2F;rifters.com&quot;&gt;作者のホームページ&lt;&#x2F;a&gt;から全編ただでダウンロードできるんですって。
しかもepubフォーマットも&lt;a href=&quot;https:&#x2F;&#x2F;rifters.com&#x2F;real&#x2F;Blindsight.htm&quot;&gt;用意してある&lt;&#x2F;a&gt;。
ということでこれに決まり。&lt;&#x2F;p&gt;
&lt;p&gt;1日数ページのペースで読み始めて第1章Theseusを読み終わったところだけど、まあ英語で読んでいるので日本語で読んだ時の10分の1くらいしか面白さが伝わってはいないとは思うのだけど、あんまり面白くないなあ。&lt;&#x2F;p&gt;
&lt;p&gt;ゲーム理論に中国人の部屋、意識といったキーワードを足掛かりにしたファーストコンタクトもので、
なんか道具立てが20世紀的な（陳腐な）ハードSFだなあという感じである。今のところ。&lt;&#x2F;p&gt;
&lt;p&gt;多分僕がグレッグイーガンが好きなのは実装の描写が豊富だからなんだろう。
でPeter Wattsはどうなんだ？（ちなみに三体は全然読む気なし。クララとお日さまの方が優先度高い）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-07-23&quot;&gt;2021-07-23&lt;&#x2F;h2&gt;
&lt;p&gt;&amp;quot;viviscetion&amp;quot; という言葉が出てきた。Skinny Puppyのアルバム&amp;quot;Vi Vi Sect Vi&amp;quot;は、そうするとこれが由来だったのか。
うーん、これまで辞書引いたことあったかなあ。&lt;&#x2F;p&gt;
&lt;p&gt;70%読んだ。まあ、ちょっと面白くなった。知性・意識指向のハードSFということか。うーむ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-07-24&quot;&gt;2021-07-24&lt;&#x2F;h2&gt;
&lt;p&gt;後書きはパスして、読了。
kamikazeでやられちゃうなんて情けなさすぎて-1。
深宇宙で遭遇する知性体が反物質を様々な方法で利用できることくらい予測しろよ。&lt;&#x2F;p&gt;
&lt;p&gt;さて、英語で読んだので、1&#x2F;10くらいしかわかってないので、筋とは関係ありそうな、なさそな思いついたことを書き留めておく。&lt;&#x2F;p&gt;
&lt;p&gt;意識、自意識は知性の階梯の高位に位置するはずではあるけども、それが最上位ではないというのは面白い。
もちろん集団自我とか遍在意識（偏在ではないよ）みたいな話は昔からあるけども、個のレベルでも&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;優れた思い付きは意識が関与しないところで生まれる&lt;&#x2F;li&gt;
&lt;li&gt;意識はシングルタスク&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということを考えると、それが最適であるとは言えない。
これは昔から聞く話であるけども、一歩進んで、知性によって人類はより優れた情報処理形態への進化を妨げられた種である、自意識はエヴァみたいな拘束具であるとするのは新しいかも。
あるいは、情報処理レベルのパラサイトが自分の複製率を上げるために、寄生主のセルフチェック機能を劣化させる手段として注入した情報処理モデルが自意識かも、と考えるのは面白い。
錯視のサイトなどを見ると納得するけど、実は人類は情報処理戦において「検疫」が致死的にゆるゆるなのだ。
それをAIが真似してはいけないのだ。&lt;&#x2F;p&gt;
&lt;p&gt;なるほど、このSF小説やっぱり面白いかも。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Swiftでcrawling</title>
        <published>2021-07-10T00:00:00+00:00</published>
        <updated>2021-07-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-07-10-crawler-in-swift/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-07-10-crawler-in-swift/</id>
        
        <content type="html">&lt;p&gt;福岡市の&lt;a href=&quot;https:&#x2F;&#x2F;ckan.open-governmentdata.org&#x2F;dataset&#x2F;401000_pref_fukuoka_covid19_patients&quot;&gt;COVID19オープンデータ&lt;&#x2F;a&gt;は更新されるたびにURLが更新される（そして古いURLは削除される）という意味不明な&lt;a href=&quot;https:&#x2F;&#x2F;ckan.open-governmentdata.org&#x2F;dataset&#x2F;activity&#x2F;401000_pref_fukuoka_covid19_patients&quot;&gt;運用&lt;&#x2F;a&gt;なので、毎日swiftプログラムを書き換えるという馬鹿なことをしていたのだけど、半年たってようやくcrawlingしようという気になりました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.fivestars.blog&#x2F;articles&#x2F;build-web-crawler-swift&#x2F;&quot;&gt;やり方を紹介しているサイト&lt;&#x2F;a&gt;のコードはそれなりに簡単なんだけど、コピペしても動かない。
そもそもこの正規表現は何?というレベルでコードに不信感を抱いたのでplaygroundで色々修正して正解を探した。&lt;&#x2F;p&gt;
&lt;p&gt;結局こうなった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Foundation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Input your parameters here
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; startUrl &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URL(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;ckan.open-governmentdata.org&#x2F;dataset&#x2F;401000_pref_fukuoka_covid19_patients&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; maximumPagesToVisit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Crawler Parameters
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; semaphore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; DispatchSemaphore(value: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; visitedPages: Set&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;URL&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span&gt; []
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; pagesToVisit: Set&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;URL&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt; =&lt;&#x2F;span&gt;&lt;span&gt; [startUrl]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Crawler Core
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;crawl() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;guard&lt;&#x2F;span&gt;&lt;span&gt; visitedPages&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; maximumPagesToVisit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        semaphore&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;signal()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;guard let&lt;&#x2F;span&gt;&lt;span&gt; pageToVisit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; pagesToVisit&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;popFirst() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        semaphore&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;signal()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; visitedPages&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;contains(pageToVisit) {
&lt;&#x2F;span&gt;&lt;span&gt;        crawl()
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        visit(page: pageToVisit)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;visit(page url: URL) {
&lt;&#x2F;span&gt;&lt;span&gt;    visitedPages&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;insert(url)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; task &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; URLSession&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;shared&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;dataTask(with: url) { data, response, error &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defer&lt;&#x2F;span&gt;&lt;span&gt; { crawl() }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;guard
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data,
&lt;&#x2F;span&gt;&lt;span&gt;            error &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;nil,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; document &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(data: data, encoding: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;utf8) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;        parse(document: document, url: url)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    task&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;resume()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;parse(document: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, url: URL) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;collectLinks() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; [URL] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; regex &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= try!&lt;&#x2F;span&gt;&lt;span&gt; NSRegularExpression(pattern: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;[^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;]*&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, options: [])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; matches &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; regex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;matches(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: document, options: [], range: NSRange(document&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;startIndex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;endIndex, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: document))
&lt;&#x2F;span&gt;&lt;span&gt;        print(matches&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;map { m &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; document[Range(m&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;range, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: document)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;]} )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; matches&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;compactMap { m &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; URL(string: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(document[Range(m&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;range, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;: document)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;])) }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    print(collectLinks())
&lt;&#x2F;span&gt;&lt;span&gt;    collectLinks()&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;forEach { pagesToVisit&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;insert($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;crawl()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;semaphore.wait()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;parse&lt;&#x2F;code&gt;の中身をほぼ作り直し。
しかし、それにしても正規表現を使うのに&lt;code&gt;NSなんとか&lt;&#x2F;code&gt;を使うというあたりが、言語が「閉じてない」感。ちょっとねえ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Jul.</title>
        <published>2021-07-04T00:00:00+00:00</published>
        <updated>2021-07-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-07-04-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-07-04-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;亀の2021年6月&quot;&gt;亀の2021年6月&lt;&#x2F;h1&gt;
&lt;p&gt;相変わらず0.10のリリースができない一ヶ月でした。
ということで今月も短信です。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;問題点&quot;&gt;問題点&lt;&#x2F;h1&gt;
&lt;p&gt;色々と直してはいるのだけど、最後のピースまでは行きつかない。
transitionにおける論理バグを見つけたり、除去された変数を戻す部分を完全にRust的なコードに書き換えたり、少しづつは進展している。
監視リテラルを正しくセットしているにも関わらず単位節が無視されるという不可解なバグはchronoBTによるものではないかと思う。
これも最後まで追い詰めきれてないのだが、今のところこの方向でちょっとづつ進めていくのが正解のようだ。&lt;&#x2F;p&gt;
&lt;p&gt;これは監視リテラルが待つ対リテラルキャッシュが現在の決定レベルよりも高いレベルで充足していた時には監視リテラルの更新は行われないのだが、より高いレベルで充足リテラルが否定された場合、このリテラルをこの節は監視していないのでBCPの対象から漏れてしまうということ。
監視リテラルはその対リテラルキャッシュよりも高い決定レベルであることを保証しないとchronoBT導入は処理の妥当性を失うことになる。ようだ。&lt;&#x2F;p&gt;
&lt;p&gt;（この文章を書いていて思ったけど、監視リテラルに関しては、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;そのもの、&lt;&#x2F;li&gt;
&lt;li&gt;監視リテラルのリスト、&lt;&#x2F;li&gt;
&lt;li&gt;監視リテラルに関する構造体、&lt;&#x2F;li&gt;
&lt;li&gt;その中のMinisatやGlucoseで言うところのblocker、
と指し示す必要のあるオブジェクトが多すぎてネーミングに苦労しているのだけど、blockerは対リテラルキャッシュと呼ぶのがよさそうだ。
英語だと &lt;em&gt;Cache of Pairing Literal; CPL&lt;&#x2F;em&gt; かな。）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;これが大学の研究者なら、数ヶ月前のバグ発生の認識から一週間でここまでやってこれないと生きていけないだろうなあ。
全く能力不足だわ。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;その他&quot;&gt;その他&lt;&#x2F;h1&gt;
&lt;p&gt;Splrに初めてインタラクティブな操作関数が導入されました。
正しく動作するプログラムには全く要らない機能だけど、デバッグにこんなに苦労するなら、何が起きているのかを把握するために、節DBやassign stackを選択的に覗けるようにするのはもっと早い段階ですべきだった。
おかげで監視リテラルの時間変化がなんとなく見えるようになって、少し理解が進みました。
なんだかんだで現在Splrは11000 Line of Code。
前のリリース版から半分近くの行が書き換えられている。。。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;7月の予定&quot;&gt;7月の予定&lt;&#x2F;h1&gt;
&lt;p&gt;そりゃもちろんバグ取り。それ以上のことは言わない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-07-09:追記&quot;&gt;2021-07-09:追記&lt;&#x2F;h2&gt;
&lt;p&gt;どうも&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;117&quot;&gt;バグが取れた&lt;&#x2F;a&gt;ようだ。
最後に残っていた問題は&lt;code&gt;cancel_until&lt;&#x2F;code&gt;中で&lt;code&gt;q_head&lt;&#x2F;code&gt;を間違えて更新していたせいだった。
それで伝播できないリテラルが出現していたわけだ。
修正すると&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;pull&#x2F;88#issuecomment-808834522&quot;&gt;aes.cnf&lt;&#x2F;a&gt;で3連続で問題なく検証できたし、SAT Competition 2019のベンチマーク、タイムアウト200秒で解けた問題も全て検証できた！
終わった！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ChronoBT再実装</title>
        <published>2021-06-22T00:00:00+00:00</published>
        <updated>2021-06-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-06-22-chronoBT/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-06-22-chronoBT/</id>
        
        <content type="html">&lt;p&gt;どうもChronoBTの実装が間違っていたらしい。
散々バグを取ってきたはずのコードなんだけど今見直してみると、これでいいのか自信が持てない。
一旦機能削除するつもりで論文[1]に忠実に再実装することにした。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;06-22&#x2F;Fig1.png&quot; alt=&quot;The idea&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;06-22&#x2F;CDCL.png&quot; alt=&quot;The modified CDCL&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[1] A. Nadel and V. Ryvchin, “Chronological Backtracking,” in Theory and Applications of Satisfiability Testing - SAT 2018, no. June 2018, 2018, pp. 111–121.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Scratchでの変数のスコープ</title>
        <published>2021-06-22T00:00:00+00:00</published>
        <updated>2021-06-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-06-22-scope-of-vars-in-Scratch/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-06-22-scope-of-vars-in-Scratch/</id>
        
        <content type="html">&lt;p&gt;Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。
これだとあまり変数の必要性を感じない。
ただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。&lt;&#x2F;p&gt;
&lt;p&gt;で、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;06-22-scratch&#x2F;define-var.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;結論&quot;&gt;結論&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;すべてのスプライト用&lt;&#x2F;code&gt; -- 全てのスプライト、全てのクローンで共有。完全にglobal。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;このスプライトのみ&lt;&#x2F;code&gt; -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;各スプライトの座標はスプライトローカル&lt;&#x2F;li&gt;
&lt;li&gt;投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）&lt;&#x2F;li&gt;
&lt;li&gt;呼び出し時に座標を引数として渡す&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということになる。
問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;06-22-scratch&#x2F;func1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;うーん。
誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数
(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。&lt;&#x2F;p&gt;
&lt;p&gt;コメント：ノンプリエンプティブならこれでOK。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;別案&quot;&gt;別案&lt;&#x2F;h3&gt;
&lt;p&gt;この作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;swap&lt;&#x2F;span&gt;&lt;span&gt;(a: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut usize&lt;&#x2F;span&gt;&lt;span&gt;, b: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;c: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;a;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;b;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;c;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2021&#x2F;06-22-scratch&#x2F;func2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;あ、代入文で選択できない！引数はimmutableに決定か。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Scratchでスプライト間コピペ</title>
        <published>2021-06-15T00:00:00+00:00</published>
        <updated>2021-06-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-06-15-copy-and-paste-in-scratch/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-06-15-copy-and-paste-in-scratch/</id>
        
        <content type="html">&lt;p&gt;Scratchのコンテキストメニューに「複製」というのがあるのだけど、どうしても別スプライトに持っていけない。
なんか反応してそうな画面フィードバックはあるのだけど、あれは持っていけないよのグレイアウトだったようだ。&lt;&#x2F;p&gt;
&lt;p&gt;裏技ないかしらんと探していたら、なんとOSのコピペのショートカットが生きていた。
MacOSなら&lt;code&gt;コマンド-C&lt;&#x2F;code&gt;で最後にクリックしたブロックがコピーされ、
スプライト切り替えて&lt;code&gt;コマンド-V&lt;&#x2F;code&gt;でペーストできる。&lt;&#x2F;p&gt;
&lt;p&gt;これで、透視図法を使った3Dゲームを作るために、スプライトごとに3次元-&amp;gt;2次元座標変換式を打ち込まなければならないという悲劇を避けることができた！&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JIS配列のMacbookのかなキーで日本語入力モードをトグルしたい</title>
        <published>2021-06-11T00:00:00+00:00</published>
        <updated>2021-06-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-06-11-mac-keylayout/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-06-11-mac-keylayout/</id>
        
        <content type="html">&lt;h2 id=&quot;hidutilでなんとかしよう&quot;&gt;hidutilでなんとかしよう&lt;&#x2F;h2&gt;
&lt;p&gt;US配列だと基本は(macbookでは)、こういうので日本語入力モードを切り替えることができる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;hidutil property --set &amp;#39;{&amp;quot;UserKeyMapping&amp;quot;:[{&amp;quot;HIDKeyboardModifierMappingSrc&amp;quot;:0x7000000e7,&amp;quot;HIDKeyboardModifierMappingDst&amp;quot;:0x700000068}]}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;あるいは、最近だとmagic keyboardが対象だと下のようになる（以前は上ので問題なかったのだけど、OSのバージョンが上がって何か変わってしまったようだ）。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;hidutil property --set &amp;#39;{&amp;quot;UserKeyMapping&amp;quot;:[{&amp;quot;HIDKeyboardModifierMappingSrc&amp;quot;:0x7000000e7,&amp;quot;HIDKeyboardModifierMappingDst&amp;quot;:0x700000039}]}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これと同じことをJIS配列のmacbook（支給品）でもやりたいのだが、少数派の意見なので、自分で検証しなければならなかった。
ということでメモ。&lt;&#x2F;p&gt;
&lt;p&gt;まずは&lt;a href=&quot;https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;archive&#x2F;technotes&#x2F;tn2450&#x2F;_index.html#&#x2F;&#x2F;apple_ref&#x2F;doc&#x2F;uid&#x2F;DTS40017618-CH1-KEY_TABLE_USAGES&quot;&gt;一次資料&lt;&#x2F;a&gt;で上に出てきたキーを解釈していく。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;code&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;key&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;39&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;Caps Lock&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;68&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;F13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;e7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;Right GUI&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;なんとコマンドキーとはGUIキーなのか。
39は特に設定のいらない入力切り替えキーCaps Lockに割り当てているだけだ。&lt;&#x2F;p&gt;
&lt;p&gt;このe7を39に割り当てる方法はそのまま使えたので、スペースキーの隣の隣を入力ソースの切り替えに使えるようにするのは簡単だった。&lt;&#x2F;p&gt;
&lt;p&gt;あとは「かな」のcodeが分かれば念願のスペースキーの隣で切り替えできるのだが、これを調べるのが大変だった。
全部調べたと言っておきながら「かな」がないblogがなんと多いことか。
なんとか&lt;a href=&quot;https:&#x2F;&#x2F;qiita.com&#x2F;nariya&#x2F;items&#x2F;0065c630653573ae7268&quot;&gt;それらしいの&lt;&#x2F;a&gt;を探し出してきた。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;code&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;key&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;90&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;Japanese Kana&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;91&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;英数&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;やってみるとドンピシャ。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;hidutil property --set &amp;#39;{&amp;quot;UserKeyMapping&amp;quot;:[{&amp;quot;HIDKeyboardModifierMappingSrc&amp;quot;:0x700000090,&amp;quot;HIDKeyboardModifierMappingDst&amp;quot;:0x700000039}]}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで幸せ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Jun.</title>
        <published>2021-06-05T00:00:00+00:00</published>
        <updated>2021-06-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-06-05-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-06-05-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;進歩と停滞の5月&quot;&gt;進歩と停滞の5月&lt;&#x2F;h1&gt;
&lt;p&gt;5月はとうとう充足性判定問題のバグが（おそらく）取れたという大きな進展がありました。
一方このバージョンは0.7より圧倒的に遅くなってしまいました。
どうしよう。
色々見比べているのだけども、論理的無謬性が保証された状態変化のみを起こすためのコード書き換えのせいとしか思えないのだけど、では、だからと言って、revertする気にはなれないし。&lt;&#x2F;p&gt;
&lt;p&gt;また途方に暮れて開発ペースがグッと落ちてしまいました。
バグあり0.7の置き換えは早いところリリースしなければ行けないのだけどなあ。&lt;&#x2F;p&gt;
&lt;p&gt;開発サボって何やっていたかというとBlender。
授業で使っているので泥縄でも勉強しなければならない。
やっているうちに面白くなってきた。
モデリングやレンダリングはMayaとの類推で大体マニュアル見なくてもわかるけど、データの再利用とかビデオトラッキングとか新しいことも多くて、最近はCPUをsplrと取り合いしています。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;6月の予定&quot;&gt;6月の予定&lt;&#x2F;h1&gt;
&lt;p&gt;しっかりした時間をとってソースを見比べて速度低下の原因を調べます。
それでSplr-0.10をリリースしよう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, May</title>
        <published>2021-05-01T00:00:00+00:00</published>
        <updated>2021-05-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-05-01-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-05-01-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;vivificationの4月&quot;&gt;vivificationの4月&lt;&#x2F;h2&gt;
&lt;p&gt;Clause vivificationのバグが取れない4月でした。
これに尽きる。
一体何が起きているのやら。&lt;&#x2F;p&gt;
&lt;p&gt;UNSAT certificateの問題だけではなく、時々充足性判定すら間違うという状況が一ヶ月続いていて、一向に改善すら見られぬ状況。
しかし、これの解決なくして先に進むこともままならないわけで。
というわけでこれ以上今月は言うことなし。
強いて言うなら自分のメモも兼ねて、片っ端からbugをissue化していったくらい。まあこれはいいgithubの使い方なんだろう。まさに日記代わり。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;96&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;104&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;105&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;106&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;107&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;108&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;issues&#x2F;109&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5月の予定&quot;&gt;5月の予定&lt;&#x2F;h2&gt;
&lt;p&gt;5月もclause vivificationの理解を深めるのみ。そのうち、バグが取れていることを期待するのみ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Apr.</title>
        <published>2021-04-10T00:00:00+00:00</published>
        <updated>2021-04-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-04-10-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-04-10-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;充足性判定誤りの3月&quot;&gt;充足性判定誤りの3月&lt;&#x2F;h1&gt;
&lt;p&gt;Splr-0.7シリーズのポイントリリース0.7.1をサクサク公開して、いよいよ並列化という大物に取り掛かるつもりだったのが、ベンチマークの結果の検証で論理バグが検出されて、思いも掛けない終わりのないデバッグに突入してしまいました。
なんと0.7.1でエンバグしたのではなく、0.7.0が既におかしい。
いやもしかするとそれ以前からあったのかもしれない。
SATソルバーを名乗れないものをリリースしてしまっていた！&lt;&#x2F;p&gt;
&lt;p&gt;その上このことに気づいてから1週間経ってもバグが取れない！
時間がかかってしまう理由が簡単な問題では再現しないバグであること。
ベンチマークを走らせて検証スクリプトを走らせるとただ1問だけ不適切な充足解を生成している。
その問題は0.7.1RCで初めて解けるようになって、それ以前のソルバーではタイムアウトしてしまう問題。
なので色々なフィーチャーを切って問題を起こしているモジュールを特定しようとすると、結果が出るまで早くて数時間。
比較実験すらままならないという状況。
コミットしていないので外からは何もやってないように見えて、ずっと頭を抱えまくっていた
、Splrの開発史上ベスト3には入る問題の発生なのでした。&lt;&#x2F;p&gt;
&lt;p&gt;必要はコーディングの母ということで、いくらでも大きくなってしまうUNSAT certificationをメモリに溜め込むのではなく、リアルタイムでファイルに吐き出していくような変更も実装されました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;現状&quot;&gt;現状&lt;&#x2F;h1&gt;
&lt;p&gt;ほぼ1週間を費やして、どうもpropagateでの監視リテラルとそのキャッシュとの整合性に起因するようだというところまで突き止めた。
これを書いている時点で、assert突っ込んで動作の等価性を確認しながら原因の証拠固め、同時に検証出来たところを最適化されたものに戻す作業を繰り返しているところ。
早いところバグなしバージョンだけでもリリースしたいところだけど地道にこのデバッグを終わらせるしか手段がない。&lt;&#x2F;p&gt;
&lt;p&gt;ここで備忘録。
assignされた変数は実は2種類ある：propagate済みのものとまだのもの。
これを区別することなく&lt;code&gt;assigned&lt;&#x2F;code&gt;の返値を使うとカタストロフが発生する。
&lt;code&gt;propagate&lt;&#x2F;code&gt;内では十分に注意すること。
なのでどうして&lt;code&gt;propagate&lt;&#x2F;code&gt;内のループで監視リテラルを1つだけ見つければ通常状態、つまり単位節でないのかはこれが理由。
納得して持ってきたコードではあるのだけど、あまりにも昔のことでボケてしまっていた。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;4月の予定&quot;&gt;4月の予定&lt;&#x2F;h1&gt;
&lt;p&gt;もう、現在は「早くバグをとります」以外のことは言っても虚しいので、これでおしまい。
実はリリース直前まで行ったもの（バグも取れたのでベンチマークを取ったら、まだ充足性判定誤りが取れてなかったのでリリース直前での取り消しは既に2回）は結構いい性能だったのだけど、まあ、充足性判定誤りがあるソルバーはそもそもソルバーではない。
ああ、悔しい限り。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New Implementation of clause vivifier on Splr-0.8</title>
        <published>2021-04-10T00:00:00+00:00</published>
        <updated>2021-05-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-04-10-splr-vivification/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-04-10-splr-vivification/</id>
        
        <content type="html">&lt;h3 id=&quot;2021-04-10&quot;&gt;2021-04-10&lt;&#x2F;h3&gt;
&lt;p&gt;Splr-0.7.1で発見された決定性誤りバグの一因がどうもvivificationにあるようなので、徹底的に見直してみた。
その結果、バグ修正の副産物として大変更に至りました。&lt;&#x2F;p&gt;
&lt;p&gt;これまではひたすら論文[1]のオリジナル疑似コードに忠実な実装を心がけていた:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-07-05_vivi-algo3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ここで&lt;code&gt;confilctAnalysis&lt;&#x2F;code&gt;の引数は&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;$\phi$ -- 論理式式&lt;&#x2F;li&gt;
&lt;li&gt;$D$ -- 仮定されたリテラル列（なぜtrailではいけないのだろう）&lt;&#x2F;li&gt;
&lt;li&gt;$R$ - 矛盾節&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;見ての通り、節を追加して伝播させて、節を削除して、ということを繰り返している。
そのためsandboxなんてものをサブモジュールに追加したりしていたのだけど、この&amp;quot;clause vivification&amp;quot;とは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;節に含まれるリテラルを順に否定して行った時に、いくつ目のリテラルで（この節ひいては式が）矛盾するかを考え、それ以上のリテラルはあっても無駄なので省きましょう&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というだけのこと。だったらこの通りに実装すればいいんじゃない？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb.clause[cid];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, lit) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 順番に
&lt;&#x2F;span&gt;&lt;span&gt;    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;lit); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 否定してみて
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 矛盾した時に
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 短くなっていたら
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;      cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;strengthen_by_vivification&lt;&#x2F;span&gt;&lt;span&gt;(cid, i);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; iまでのリテラルに縮退
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(self.root_level); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; クリーンアップ
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;節の出し入れが一切なくなってclauseDB的な負荷が一切消えてしまった!
これで決まりだな。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2021-04-16&quot;&gt;2021-04-16&lt;&#x2F;h3&gt;
&lt;p&gt;そしてこれがSplr-0.7.1がさらに1週間リリースできなかった原因になってしまった。
うん、全くダメな考えだった。論外だった。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2021-05-04&quot;&gt;2021-05-04&lt;&#x2F;h3&gt;
&lt;p&gt;だめじゃない。ダメなのは矛盾解析の部分で、決定リテラルを積み重ねるこの方法はずっとスマートな気がしてきた。少なくとも、これがSplr-0.7.1におけるvivificationの決定性判定間違いの原因ではない。&lt;&#x2F;p&gt;
&lt;p&gt;というわけでこれで行こう：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb.clause[cid];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; lit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 順番に
&lt;&#x2F;span&gt;&lt;span&gt;    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;lit);       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 否定してみて
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cc) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 矛盾した時に
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; vec &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;conflict_analyze&lt;&#x2F;span&gt;&lt;span&gt;(cc);   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 矛盾解析して
&lt;&#x2F;span&gt;&lt;span&gt;      cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(vec);              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 学習節を追加
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; cid {                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; それが対象節なら、
&lt;&#x2F;span&gt;&lt;span&gt;        cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(cid);         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 対象節を削除
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(self.root_level); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; クリーンアップ
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;References&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] C.-M. Li, F. Xiao, M. Luo, F. Manyà, Z. Lü, and Y. Li, “Clause Vivification by Unit Propagation in CDCL SAT Solvers,&amp;quot; &lt;em&gt;Artif. Intell.&lt;&#x2F;em&gt;, vol. 279, Jul. 2019.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Mar.</title>
        <published>2021-03-28T00:00:00+00:00</published>
        <updated>2021-04-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-03-28-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-03-28-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;Splr-0.7.1リリースのはずが&quot;&gt;Splr-0.7.1リリースのはずが&lt;&#x2F;h2&gt;
&lt;p&gt;前号を出したのが12日でそれから2週間足らずなので、Splr-0.7.1をリリースしたことしか書くことないよなあと思っていたら、リリース前のルーチンワークのベンチマークの検証中にエラーが発見されてしまった。&lt;&#x2F;p&gt;
&lt;p&gt;まさか、UNSAT問題をSATと答えるなんて！
それも、原因モジュールの同定に数時間かかることになってしまって、半日経っても何が問題なのかすら判明できていない有様。
ちょっとこのバグはキツい。リリースは（楽観的にみて）1週間ほど延期になりそうだ。&lt;&#x2F;p&gt;
&lt;p&gt;という以上の内容だけでvol.3を出して、Splr-0.7.1のリリースのタイミングで次の号を出し、そこで UNSAT logの号数を実暦に合わせよう。ああ、それだけが楽しみ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-04-02&quot;&gt;2021-04-02&lt;&#x2F;h2&gt;
&lt;p&gt;やっと、やっと、原因の節が特定できそう。&lt;code&gt;watch&lt;&#x2F;code&gt;が適切なリテラルを持ってない。
多分shrink, shortenでのリテラル削除に監視リテラルが追従してないようだ。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ splr aes.cnf
&lt;&#x2F;span&gt;&lt;span&gt;aes.cnf                                      501284,2928183 |time:     5.21
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:          0, #decision:            0, #propagate:         221128
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:    34160, #ass:   221128, #elm:   245996, prg%:  93.1855
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:        0, LBD2:        0, Binc:  2472979, Perm:  4073761
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:        0, #RST:        0, trgr:        1, peak:        1
&lt;&#x2F;span&gt;&lt;span&gt;         LBD|avrg:   0.0000, trnd:      NaN, depG:   0.0000, &#x2F;dpc:     0.00
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|tASG:      NaN, cLvl:     0.00, bLvl:     0.00, &#x2F;ppc:     0.00
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        1, #sub:    87499, core:   501284, &#x2F;cpr:     0.00
&lt;&#x2F;span&gt;&lt;span&gt;unreachable core: 24650
&lt;&#x2F;span&gt;&lt;span&gt;[src&#x2F;cdb&#x2F;db.rs:958] 
&lt;&#x2F;span&gt;&lt;span&gt;  (l, w.blocker, w.c, &amp;amp;c.lits)
&lt;&#x2F;span&gt;&lt;span&gt;  = ( L151359, L158797, Cid3949122, [ L151358, L149809, L151175 ])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この結果を出すのに実行時間は3時間越え。
原因を正確につきとめようと細かくチェックを入れたら10時間経ってもコアサイズが31000を下回らなかった。
今日中に塞げるだろうか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-04-03&quot;&gt;2021-04-03&lt;&#x2F;h2&gt;
&lt;p&gt;塞げたような気がする。
まだ結論が出てないので「気がする」としか書きようがないのが、とにかく検証中。
バグによって偶然解けたことになってしまった問題なので、何時間かかっても解き、さらにそれが無謬であることを証明しなければならない。
計算が終わるまでじっと我慢しなくては。&lt;&#x2F;p&gt;
&lt;p&gt;ダメだった。この結果を出すのに7時間。Splr開発史上ベスト3に入る難問。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ splr -t 50000 -c aes.cnf                                                                                 
&lt;&#x2F;span&gt;&lt;span&gt;aes.cnf                                      501284,2928183 |time: 24585.10
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:   16888219, #decision:     31352807, #propagate:     5559560810
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     8797, #ass:   243789, #elm:   248698, prg%:  98.2451
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:   798625, LBD2:    24841, Binc:  2484735, Perm:  8987095
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     7868, #RST:     8946, trgr:        1, peak:      128
&lt;&#x2F;span&gt;&lt;span&gt;         LBD|avrg:   7.0407, trnd:   0.3329, depG:   4.9266, &#x2F;dpc:     1.62
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|tASG:   0.0247, cLvl:   313.07, bLvl:   311.69, &#x2F;ppc:    23.16
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:       28, #sub:   101678, core:        0, &#x2F;cpr:  1676.43
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;ans_aes.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s SATISFIABLE: aes.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2021-04-05&quot;&gt;2021-04-05&lt;&#x2F;h3&gt;
&lt;p&gt;バグ取れた！&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Eliminator でwatchを適切に更新してなかったため、&lt;code&gt;propagate&lt;&#x2F;code&gt;が単位節に気づかないことがあった。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ClauseDB::strengthen&lt;&#x2F;code&gt;でbiclauseになった節の&lt;code&gt;LEARNT&lt;&#x2F;code&gt;フラグを落としてなかっため、設定次第で&lt;code&gt;reduce_db&lt;&#x2F;code&gt;が回収してしまっていた。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということらしい。以下の通り、4時間掛かって検証できた。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;[04-05T15:48:54]$ splr -c -t 300000 aes.cnf
&lt;&#x2F;span&gt;&lt;span&gt;aes.cnf                                      501284,2928183 |time: 13814.37
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:   25313304, #decision:     50455202, #propagate:     4858368671
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     8700, #ass:   243745, #elm:   248839, prg%:  98.2645
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:   549214, LBD2:    43074, Binc:  2485952, Perm:  4429040
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     9997, #RST:    13738, trgr:        8, peak:      128
&lt;&#x2F;span&gt;&lt;span&gt;         LBD|avrg:   2.6736, trnd:   0.3569, depG:   4.7183, &#x2F;dpc:     1.01
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|tASG:   1.0058, cLvl:     9.60, bLvl:     8.36, &#x2F;ppc:    10.11
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:       52, #sub:   102614, core:        4, &#x2F;cpr:   282.31
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;ans_aes.cnf
&lt;&#x2F;span&gt;&lt;span&gt; Certificate|file: proof.drat
&lt;&#x2F;span&gt;&lt;span&gt;s UNSATISFIABLE: aes.cnf
&lt;&#x2F;span&gt;&lt;span&gt;[04-05T19:39:15]$ gratgen aes.cnf proof.drat -o proof.grat 
&lt;&#x2F;span&gt;&lt;span&gt;c sizeof(cdb_t) = 4
&lt;&#x2F;span&gt;&lt;span&gt;c sizeof(cdb_t*) = 8
&lt;&#x2F;span&gt;&lt;span&gt;c Using RAT run heuristics
&lt;&#x2F;span&gt;&lt;span&gt;c Parsing formula ... 4035ms
&lt;&#x2F;span&gt;&lt;span&gt;c Parsing proof (ASCII format) ... 907366ms
&lt;&#x2F;span&gt;&lt;span&gt;c Forward pass ... 41143ms
&lt;&#x2F;span&gt;&lt;span&gt;c Starting Backward pass
&lt;&#x2F;span&gt;&lt;span&gt;c Single threaded mode
&lt;&#x2F;span&gt;&lt;span&gt;c Waiting for aux-threads ...done
&lt;&#x2F;span&gt;&lt;span&gt;c Lemmas processed by threads: 3649502 mdev: 0
&lt;&#x2F;span&gt;&lt;span&gt;c Finished Backward pass: 305584ms
&lt;&#x2F;span&gt;&lt;span&gt;c Writing combined proof ... 17723ms
&lt;&#x2F;span&gt;&lt;span&gt;s VERIFIED
&lt;&#x2F;span&gt;&lt;span&gt;c Timing statistics (ms)
&lt;&#x2F;span&gt;&lt;span&gt;c Parsing:  911402
&lt;&#x2F;span&gt;&lt;span&gt;c Checking: 347424
&lt;&#x2F;span&gt;&lt;span&gt;c   * bwd:  305584
&lt;&#x2F;span&gt;&lt;span&gt;c Writing:  17723
&lt;&#x2F;span&gt;&lt;span&gt;c Overall:  1277911
&lt;&#x2F;span&gt;&lt;span&gt;c   * vrf:  1260188
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;c Lemma statistics
&lt;&#x2F;span&gt;&lt;span&gt;c RUP lemmas:  3649502
&lt;&#x2F;span&gt;&lt;span&gt;c RAT lemmas:  0
&lt;&#x2F;span&gt;&lt;span&gt;c   RAT run heuristics:   0
&lt;&#x2F;span&gt;&lt;span&gt;c Total lemmas:  3649502
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;c Size statistics (bytes)
&lt;&#x2F;span&gt;&lt;span&gt;c Number of clauses: 33358889
&lt;&#x2F;span&gt;&lt;span&gt;c Clause DB size:  6030820484
&lt;&#x2F;span&gt;&lt;span&gt;c Item list:       986114048
&lt;&#x2F;span&gt;&lt;span&gt;c Pivots store:    134217728
&lt;&#x2F;span&gt;&lt;span&gt;[04-05T20:39:29]$ gratchk unsat aes.cnf proof.grat
&lt;&#x2F;span&gt;&lt;span&gt;c Reading cnf
&lt;&#x2F;span&gt;&lt;span&gt;c Reading proof
&lt;&#x2F;span&gt;&lt;span&gt;c Done
&lt;&#x2F;span&gt;&lt;span&gt;c Verifying unsat
&lt;&#x2F;span&gt;&lt;span&gt;s VERIFIED UNSAT
&lt;&#x2F;span&gt;&lt;span&gt;[T20:55:04]$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただ時々、SATになっちゃうことがあるんだなあ。あるいは実行時間が大きく変動したりとか。
今のSplrに非決定性はないので、ハードウェアエラーくらいしか理由が思いつかない。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>衝撃の320変数3-SAT</title>
        <published>2021-03-16T00:00:00+00:00</published>
        <updated>2021-03-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-03-16-3SAT-SC20-170058143/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-03-16-3SAT-SC20-170058143/</id>
        
        <content type="html">&lt;p&gt;まともなSAT solverなら250変数の3-SATなんて1秒程度で解け、その求解速度なんてなんの尺度にもならないものだろう。
なので最近のSplrの開発は360変数の3-SATをマイクロベンチマークに使っている。
最近はまあ「そこそこ待ち遠しくない時間」でSAT問題、UNSAT問題どちらも解けるようになってきていた。
で、やっとSAT competition 2021での問題をつまみ食いし始めたのだけど、ある問題に衝撃を受けてしまった。&lt;&#x2F;p&gt;
&lt;p&gt;それはSATな320変数3-SAT問題170058143.cnf。解けて当然だと思ってたのだが、5000秒タイムアウトで解けない。
色々設定変えて、やっと解けたらこんな感じ：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ splr ~&#x2F;Library&#x2F;SAT&#x2F;SC20&#x2F;170058143.cnf
&lt;&#x2F;span&gt;&lt;span&gt;170058143.cnf                                      320,1120 |time:  1574.08
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:    6289871, #decision:      7955609, #propagate:      306206577
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:      320, #ass:        0, #elm:        0, prg%:   0.0000
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:   195608, LBD2:    78093, Binc:    18750, Perm:    19871
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:        1, #RST:    24004, trgr:        2, peak:       64
&lt;&#x2F;span&gt;&lt;span&gt;         LBD|avrg:  14.0921, trnd:   0.9422, depG:   3.3053, &#x2F;dpc:     1.08
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|tASG:   0.9536, cLvl:    18.99, bLvl:    17.84, &#x2F;ppc:    46.90
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        5, #sub:        0, core:        0, &#x2F;cpr:   227.20
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;ans_170058143.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s SATISFIABLE: &#x2F;Users&#x2F;nash&#x2F;Library&#x2F;SAT&#x2F;SC20&#x2F;170058143.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;部分解には至らずに、たまたま解を見つけたということか！&lt;&#x2F;p&gt;
&lt;p&gt;なんというか、どうしたもんか。すげーな。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-03-17&quot;&gt;2021-03-17&lt;&#x2F;h2&gt;
&lt;p&gt;散発的網羅的なclause vivificationを試してみたのだが、否定的だ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2021-03-18&quot;&gt;2021-03-18&lt;&#x2F;h2&gt;
&lt;p&gt;big-bang initializationが効いた。それでもvivificationは必要のようだ。&lt;&#x2F;p&gt;
&lt;p&gt;いや、実際にはvivifierはなんの貢献もしていないので、活性度の「かき混ぜ」が鍵かもしれない。
なので、定期的に下駄を履かせてみると、、、、&lt;&#x2F;p&gt;
&lt;p&gt;ここまでのまとめ&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;big-bang initialization必要。とりあえず初期値0.4。&lt;&#x2F;li&gt;
&lt;li&gt;clause vivification必要。ただしこいつはpurgeもshrinkもしないので効果は変数活性度のかき混ぜのだけと思われる。&lt;&#x2F;li&gt;
&lt;li&gt;頭が重たいLuby stabilization必要。文字通りの三角形なやつではダメ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Nix flakeの作り方</title>
        <published>2021-03-14T00:00:00+00:00</published>
        <updated>2021-03-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-03-14-nix-flakes/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-03-14-nix-flakes/</id>
        
        <content type="html">&lt;p&gt;2021-03-08にnix-2.4のpre-release版が三ヶ月ぶりに更新されて、ようやくnixを置き換えてもエラーなく使えるようになりました。（いやそうでもないみたいだぞ。。。@2021-03-16）
なので早速Splrで使ってみたのでいくつかメモ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;restricted_modeとは&quot;&gt;restricted modeとは&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;nix-env -u&lt;&#x2F;code&gt;でエラーはなくなったものの、flake.nixを作ろうとすると相変わらずrestricted modeではxxxxにアクセスできないというようなエラーが出る。これは&lt;code&gt;--impure&lt;&#x2F;code&gt;フラグを渡してやるといい。&lt;code&gt;nix --help&lt;&#x2F;code&gt;によると、&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the --expr option is given, all installables are interpreted as Nix expressions.
You may need to specify --impure if the expression references impure inputs (such as &lt;code&gt;&amp;lt;nixpkgs&amp;gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ということで、多分12月頃からこうすればよかったようだ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ nix flake init --impure
&lt;&#x2F;span&gt;&lt;span&gt;$ nix build --impure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;flake.nixはどう書けばいいのか&quot;&gt;flake.nixはどう書けばいいのか&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;Nix Wiki&lt;&#x2F;a&gt;に出てくるのは以下の例&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;home-manager&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;github:nix-community&#x2F;home-manager&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs }: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# replace &amp;#39;joes-desktop&amp;#39; with your hostname here.
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nixosConfigurations&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;joes-desktop &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;nixosSystem {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;x86_64-linux&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;.&#x2F;configuration.nix &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;     };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しかし、2020年5月の記事だけど&lt;a href=&quot;https:&#x2F;&#x2F;www.tweag.io&#x2F;blog&#x2F;2020-05-25-flakes&#x2F;&quot;&gt;NIX FLAKES, PART 1: AN INTRODUCTION AND TUTORIAL&lt;&#x2F;a&gt;の以下の例がまず足掛かり。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A flake for building Hello World&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;github:NixOS&#x2F;nixpkgs&#x2F;nixos-20.03&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs }: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;defaultPackage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;x86_64-linux &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# Notice the reference to nixpkgs here.
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;x86_64-linux&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;      stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;mkDerivation {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;gcc -o hello .&#x2F;hello.c&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;installPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;mkdir -p $out&#x2F;bin; install -t $out&#x2F;bin hello&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      };
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを真似すればよさそうだが、この例ではsystemが &lt;code&gt;x86_64-linux&lt;&#x2F;code&gt; に限定されている。
いや &lt;code&gt;darwin&lt;&#x2F;code&gt; メインだし将来的には &lt;code&gt;aarch65&lt;&#x2F;code&gt; も期待したいのでもっとスマートな方法はないかと探すと、
Nix Wikiで使われている&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils&quot;&gt;flake-utils&lt;&#x2F;a&gt;がよさそうである。このパッケージは&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;eachDefaultSystem &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;system&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;attrs)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;を提供している。ええと、これは返値がないように見えるけどこういうこと：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;eachDefaultSystem &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt; (&amp;lt;system&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;attrs) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;attrs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただし、使い方は微妙である。
よくわからないまま使うと、例えば&lt;code&gt;defaultPackege.x86-64-darwin&lt;&#x2F;code&gt;がエクスポートされていないというエラーが出てしまった。
でこれによく似た関数&lt;code&gt;eachSystem&lt;&#x2F;code&gt;の&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;numtide&#x2F;flake-utils#user-content-eachsystem---system---system---attrs&quot;&gt;サンプル&lt;&#x2F;a&gt;をよく見る：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;eachSystem allSystems (system: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;; })
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;   hello&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;aarch64-darwin &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   hello&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;aarch64-genode &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;引数closureの中で&lt;code&gt;hello&lt;&#x2F;code&gt;を使うと最終的に&lt;code&gt;hello.${system}&lt;&#x2F;code&gt;にpopulateされるのだから、&lt;code&gt;defaultPackege.色々なシステム&lt;&#x2F;code&gt;をpopulateするにはclosureの中では&lt;code&gt;defaultPackage&lt;&#x2F;code&gt;にderivationを束縛すればいい。
ということで&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;github:numtide&#x2F;flake-utils&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;defaultPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;        stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;mkDerivation {...};
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とするのが正解。
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;blob&#x2F;f34a664f0f031a9ffe0c4c63558f33ab6b90eec1&#x2F;flake.nix&quot;&gt;実際のコード&lt;&#x2F;a&gt;はこれ:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A modern SAT solver in Rust&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;flake-utils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;github:numtide&#x2F;flake-utils&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;outputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ self&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;flake-utils }:
&lt;&#x2F;span&gt;&lt;span&gt;    flake-utils&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;eachDefaultSystem (system: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;defaultPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;nixpkgs { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;; };
&lt;&#x2F;span&gt;&lt;span&gt;        stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;mkDerivation {
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;splr&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ cargo rustc ];
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;cargo build --release&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;installPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;mkdir -p $out&#x2F;bin; install -t $out&#x2F;bin target&#x2F;release&#x2F;splr target&#x2F;release&#x2F;dmcr&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      ;
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;  ;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでgit cloneしてnix buildでインストールできるようになりました。
うむ。簡単。
オーバレイでnixパッケージ化するよりもお手軽なので、&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;SAT-bench&lt;&#x2F;a&gt;も乗り換えるかも。&lt;&#x2F;p&gt;
&lt;p&gt;初めてFlakesを知ってから半年というか約1年。
長い道のりでした。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;MacOSでRustのプログラムがコンパイルできない&quot;&gt;MacOSでRustのプログラムがコンパイルできない&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;framework Security&lt;&#x2F;code&gt;がないとか言われるなら、それはnixパッケージ化した時と同じような環境を作ってやらなければ。
ということでwebまわりの機能を使うSAT-benchの場合は以下の修正が必要だった。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;1 file changed, 1 insertion(+), 1 deletion(-)
&lt;&#x2F;span&gt;&lt;span&gt;flake.nix | 2 +-
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;modified   flake.nix
&lt;&#x2F;span&gt;&lt;span&gt;@@ -8,7 +8,7 @@
&lt;&#x2F;span&gt;&lt;span&gt;         stdenv.mkDerivation {
&lt;&#x2F;span&gt;&lt;span&gt;           name = &amp;quot;SAT-bench&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;           src = self;
&lt;&#x2F;span&gt;&lt;span&gt;-          buildInputs = [ cargo rustc ];
&lt;&#x2F;span&gt;&lt;span&gt;+          buildInputs = rustc.buildInputs ++ [ cargo rustc libiconv openssl pkgconfig ];
&lt;&#x2F;span&gt;&lt;span&gt;           buildPhase = &amp;quot;cargo build --release&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;           installPhase = &amp;quot;mkdir -p $out&#x2F;bin; install -t $out&#x2F;bin target&#x2F;release&#x2F;sat-bench target&#x2F;release&#x2F;benchm&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Feb.</title>
        <published>2021-03-09T00:00:00+00:00</published>
        <updated>2021-03-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-03-09-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-03-09-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSAT_log&quot;&gt;UNSAT log&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2月の振り返り&quot;&gt;2月の振り返り&lt;&#x2F;h2&gt;
&lt;p&gt;2月はSplr-0.6シリーズのポイントリリースを2つ。
まあ大したものではないのだけど、内部的にはイオンという考え方について色々試してみた。
そして3月になってからリリースされた0.7.0で結局削除ということになりました。
これも含め0.7.0はうまくいかないアイデアを結構整理して削除するようなリリースとなりました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;イオン&quot;&gt;イオン&lt;&#x2F;h2&gt;
&lt;p&gt;非常に単純化してSAT求解過程のモデルを作るなら、無矛盾なリテラル集合を大きくしていく過程をイメージするのがいいだろう。
この集合には変数活性度が高いものから組み込まれていく。
なので、ここに含まれていない変数は大きな活性度は持っていないはずである。
逆にこの条件を満足しない変数はそれ自身がある種のブロッカーすなわち「求解の妨げとなる変数」になっていると思われるので、（導入したステージベースのvar boostingという実装で）フォーカスして集中的に解くのは意味があるのではないだろうか、
そこで求解進行状況の尺度として、後から意思決定の尺度としてこの条件を満足しない変数を調査してみた。
fixされてなくて高いエネルギー準位にいるのだからそのような変数をイオンというのは妥当なものではなかろうか。
しかし、var boostingというアイデアが全然うまくいかないので、この尺度も短期間で放棄されることになりました。
まあ、そもそも適度なリスタートがあるのなら、変数活性度だけでうまくドライブされるはずではある。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;0.6.3までのまとめ&quot;&gt;0.6.3までのまとめ&lt;&#x2F;h2&gt;
&lt;p&gt;ということでSplrはLuby列によって長さが制御されるステージベースで節削減、節包摂、変数活性度減衰率、リスタート条件を変えるという問題に応じた制御パラメータの動的摂動が売りのソルバーということになった。
まあ、妥当なところだろう。
で、これは結局0.1時代のなぜかいい結果が得られていたassert数が伸びない時にはリスタートをブロックする話とさほど違わないものなのだった。
本当に0.3歩前進、0.2歩下がるという感じだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;0.7.0リリース&quot;&gt;0.7.0リリース&lt;&#x2F;h2&gt;
&lt;p&gt;3月にだいぶ食い込みましたが今日0.7.0もリリースできました。
このバージョンではrestart blocking threshold を変えるだけではなく、var decay rateも変えて変数順序の逆転が起きにくくするようにした。
restart 条件を厳しくするだけではstabilizeにならないのではなかろうか。
そして、eliminatorの設定を変えてみた。
節数や変数数を闇雲に減らすより、依存グラフが大きくならない、よい学習節を作り、将来の矛盾生成効率を上げることの方が重要のようだ。
このようなサブモジュールの調整だけで終わって0.6.4がリリースできると思ったら、最後にローカル変数のexport周りを修正したので行数的には大きな変更になり、trait 含めてexportするものがいろいろと変更されたので性能は上がってないけどマイナーバージョンあげるしかないよなあというリリースになりました。
全然ベンチマークでは性能改善してないみたいけど、UF360とかの問題では目に見えてよくなっていると思うのだけどなあ。&lt;&#x2F;p&gt;
&lt;p&gt;すいません、嘘つきました。&lt;&#x2F;p&gt;
&lt;p&gt;Splr-0.7.0をリリースできたのは上の文章を書いた3月9日ではなく12日になりました。
文章書いている時にはgolden masterはできていたつもりだったのですが、求解中に10万回を超えるほどのリスタートを行うソルバからちょうど10万回目のコンフリクトで戦略の適合を行う古いコードを削除しても問題なかろうと思ってその他のクリーンアップと合わせてコミットしてみたら、360変数3SATのベンチマークが3800秒台から5000秒台にまで遅くなってしまった。
この因果関係を見つけ、パラメータチューニングでなんとかなるのか、ならなかったらどうするのか検討するのに1日2日では対応できませんでした。
結局、3800秒台は回復できないままですが、この4日間で、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProgressASG&lt;&#x2F;code&gt; の定義差し替え&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GeometricStabilizer&lt;&#x2F;code&gt; の改訂&lt;&#x2F;li&gt;
&lt;li&gt;ASG, LBD の閾値チューニングし直し&lt;&#x2F;li&gt;
&lt;li&gt;select_decision_litでindex errorが発生。searchのループ作り直し&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;などやって4200秒まで持ち直したあたりでもうタイムアウト。
もう十分だろう＆タイムアウトだ、ということで先ほど日付が変わる直前にリリースしました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;今月の目標&quot;&gt;今月の目標&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2021&#x2F;2021-02-02-UNSATlog&quot;&gt;先月立てた目標&lt;&#x2F;a&gt;がなかなか達成できてないので、今月もSplrの開発をお休みして、ということは今年もSAT competitionには出せなくって、論文を読むべきなのですが、論文を読む前に圏論の勉強をしていたり、ClauseIdの一部をポインタに切り替えると性能が上がるかどうかに非常に興味が湧いてきたり。。。
いや、論文読む方が大事だって！&lt;&#x2F;p&gt;
&lt;p&gt;なんか発行日が一ヶ月遅れのような気がしてきた。内容ではなく発行月で考える方が一般的な気がする。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2021, Jan.</title>
        <published>2021-02-02T00:00:00+00:00</published>
        <updated>2021-02-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-02-02-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-02-02-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;202101&quot;&gt;202101&lt;&#x2F;h2&gt;
&lt;p&gt;あけまして&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;splr-0.6.0&quot;&gt;Splr-0.6.0&lt;&#x2F;a&gt;出ました。
それどころか&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;splr-0.6.1&quot;&gt;0.6.1&lt;&#x2F;a&gt;も&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;Splr-0.6.2&quot;&gt;0.6.2&lt;&#x2F;a&gt;も出ました。
いやあ長かった。
その割にはむしろ圧倒的に性能劣化してしまってますが十分にベンチマークを回すだけのリソースがないんだからしょうがない。
どうでもいい「やってみたらよくなった」的な高速化は捨てる方向に舵を取ったのは長期的にはいい判断だと思いたい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;What’s_Splr-0.6.0?&quot;&gt;What’s Splr-0.6.0?&lt;&#x2F;h2&gt;
&lt;p&gt;Splr-0.6.0の売りは、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;依存crateの削減、&lt;&#x2F;li&gt;
&lt;li&gt;タイムアウトを増加させれば求解数が単調に増加すること、&lt;&#x2F;li&gt;
&lt;li&gt;将来のためにphase, stabilize, stageという構造を土台にしたこと、&lt;&#x2F;li&gt;
&lt;li&gt;ベンチマークの結果主導のよくわからない（理論的根拠のない）ヒューリスティックスを捨てたこと
くらいだろうか。
おっと、その結果2倍くらい性能が悪くなったことも特筆しなければ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;997855&#x2F;104808677-24d97080-582b-11eb-85af-d01fd161bafd.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ただし0.6.0のリリース直後に立て続けに出たpoint releaseによってまあ少しは改善しました。
0.6.1ではLBDの更新を、0.6.2では節削減のタイミングをstabilization のサイクルに合わせるようにしました（最近使用フラグをクリアする影響を除けば、はるかにゆっくり節を削減するので解けなくなることは原則としてないはず）。
遅くはなったけどだんだんよく鳴る法華の太鼓ってね。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ようこそ夏休み&quot;&gt;ようこそ夏休み&lt;&#x2F;h2&gt;
&lt;p&gt;夏休みが終わった！ようやく宿題できました。
やっぱりLBDはいい尺度だったんだ。ということで納得。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-LBD-ave.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;なんというかファイル名は2020-XX-XXでタイムスタンプは202101という収拾がつかないことになってしまった。
反省。
さてこれで去年のcompetition のproceedings 読んで、cactus plot書いて、論文読んだら新シーズンの始まり。
その前に圏論の入門を読んでしまわなければ。
巣ごもり生活に抵抗なし。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;その他&quot;&gt;その他&lt;&#x2F;h2&gt;
&lt;p&gt;大きめのSudokuに&lt;a href=&quot;&#x2F;2021&#x2F;sudoku144&#x2F;&quot;&gt;挑戦&lt;&#x2F;a&gt;。
144x144は対応できたけど、400x400はCNFの生成でギブアップ。
ちょっと無理。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;今後の予定&quot;&gt;今後の予定&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;pull&#x2F;72&quot;&gt;Splr-0.6.3&lt;&#x2F;a&gt;がすぐにでも出せそうなのでまずはそこに集中します。
ベンチマークをすると時間を延ばしても全然求解数が増えないので、問題数を絞る代わりにタイムアウトを十分に長くした設定で何が起きているか調べている最中。
結果に結びつくかはまだまだ不明だけどUUF250の求解速度が感動的なくらい速くなっている。
ちょっと期待できるものになるのではなかろうか。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust製のSATソルバーで144x144のSudokuを解こう</title>
        <published>2021-01-17T00:00:00+00:00</published>
        <updated>2021-01-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-01-17-sudoku144/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-01-17-sudoku144/</id>
        
        <content type="html">&lt;p&gt;着々と巨大なSudokuが解けるようになったのでどんどん行きましょう。
largeとかgiantとかを追加キーワードにして検索してとてもよさそうな&lt;a href=&quot;https:&#x2F;&#x2F;sudokugeant.cabanova.com&#x2F;noflash.html&quot;&gt;サイト&lt;&#x2F;a&gt;を見つけたけど、そのサイトはflashで書いてあって一切見れない。
なんという時代（技術）の断絶！&lt;&#x2F;p&gt;
&lt;p&gt;ただ&lt;a href=&quot;http:&#x2F;&#x2F;forum.enjoysudoku.com&#x2F;giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html&quot;&gt;チャットページ&lt;&#x2F;a&gt;が生きていたのでなんとか144x144とか400x400の問題を見つけることができました。&lt;&#x2F;p&gt;
&lt;p&gt;ということで&lt;a href=&quot;http:&#x2F;&#x2F;forum.enjoysudoku.com&#x2F;giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html#p68796&quot;&gt;144x144 sudoku&lt;&#x2F;a&gt;を対象にしてみます。
parseをちゃっちゃと書いて、実行してみるとルール生成中のプロセスサイズが主記憶の16GBを超え出したのでさらにルール数の削減が必要になりました。まあ、気づいていたけどこれまでやらなかった&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;全ての場合を網羅するルールを生成してから、初期状態を入れるのは無駄&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;という当たり前のことをいよいよ&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;commit&#x2F;a21fc2f90c4b965cc417b0d07af181de68a1bd88&quot;&gt;実践&lt;&#x2F;a&gt;することになりました。&lt;&#x2F;p&gt;
&lt;p&gt;144x144の問題も400x400の問題もどちらも人間が解きやすいように初期状態で結構なセルが埋まっているのでそれらに関する無意味なルールの作成を止めれば、本当に次数が1下がるくらいの効果が期待できるのではなかろうか。
さらに二重にルールを作成していたところがあったので（上三角だけ計算するような感じで）半分だけ生成するようにすると生成されるCNFはおよそ200MB。
これは最初に生成されたものより1桁は小さくなるくらいの効果がありました。
これで、生成時にも16GB内で収まるようになった（ヘッダーを作るためにファイルに書き出すのは全てのルールを生成した後）し、Splr的にも節数は全然問題ありません。
実際、Splrは数秒で解きました。色々とデータが大きいので試したい方は以下をどうぞ。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat.git
&lt;&#x2F;span&gt;&lt;span&gt;cd sudoku_sat
&lt;&#x2F;span&gt;&lt;span&gt;cargo run --bin sudoku144 --release &amp;lt; sudoku144.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;　
ちなみにこの変更を施しても400x400は全然ダメ。ルールの生成中にプロセスサイズが40GBを超え、1時間経っても生成が終わらない。ちょっと無理ですね。ルール数は $O(n^4)$ だからなあ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Link&quot;&gt;Link&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Dec.</title>
        <published>2021-01-02T00:00:00+00:00</published>
        <updated>2021-01-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2021/2021-01-02-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2021/2021-01-02-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;2020年振り返り&quot;&gt;2020年振り返り&lt;&#x2F;h2&gt;
&lt;p&gt;結局0.5.1はリリースできませんでした。12月にやったことは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;リフェーズ(re-phasing to best phase)に関するチューニング&lt;&#x2F;li&gt;
&lt;li&gt;Sudoku 64への応用&lt;&#x2F;li&gt;
&lt;li&gt;Advent of Code 2020への応用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というあたり。
個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。
やはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Best_Phase_Rewarding&quot;&gt;Best Phase Rewarding&lt;&#x2F;h2&gt;
&lt;p&gt;Rephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして線型結合（単に和をとるだけ）してみたら考えてみる価値がある結果になった。
混ぜない方がいい。やはり合議制のマルチエージェントの並行動作が行き着くところかもしれない。
全然ベンチマークでのベストを更新できてないので、これが本当によい手法と言えるかどうかは微妙なんだけど、それまでのもっとも解に近い点を足掛かりにして探索を進めるのはあるかもしれないし、まあ納得できる。
意外なのは極端な設定に振った方が結果が出ていること。
Stabilizationでいえばstabilizationしっぱなしが一番いいという感じ。
なので現在のコードはマルチエージェント合議制に対しては否定的なんだがエビデンスを得るためには、色々試してみないといけない。
Luby数列を使ったStabilizationとのコード的な組み合わせ爆発もあるし、なかなかこれでいいという踏ん切りがつけられない。
ということで一ヶ月では終わる話題ではなかったのでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Sudoku_64&quot;&gt;Sudoku 64&lt;&#x2F;h2&gt;
&lt;p&gt;Sudoku 64は&lt;a href=&quot;http:&#x2F;&#x2F;www.sudoku-download.net&#x2F;sudoku_64x64.php&quot;&gt;ここ&lt;&#x2F;a&gt;で見つけたもの。
Sudoku 25が1秒以下で解けたこと、一意な解答保証のため結構初期状態で埋まったものだったことから、これもすぐ解けるのかと思ったら&lt;a href=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2021&#x2F;2021-01-02-UNSATlog&#x2F;2020&#x2F;sudoku64&#x2F;&quot;&gt;20秒も掛かってしまった&lt;&#x2F;a&gt;。
BCP 始める前に解けているのでこれは pre-processor が重いのだろう。外してみると8秒でした。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ splr --ELI 0  sudoku64.cnf
&lt;&#x2F;span&gt;&lt;span&gt;sudoku64.cnf                                262144,41048269 |time:     8.31
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:          0, #decision:            0, #propagate:         262144 
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   259891, #ass:     2253, #elm:        0, prg%:   0.8595 
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:        0, LBD2:        0, Binc: 41029632, Perm: 41037005 
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:        0, #RST:        0, Lspn:        1, Lcyc:        0 
&lt;&#x2F;span&gt;&lt;span&gt;         EMA|tLBD:      NaN, tASG:      NaN, core:   262144, &#x2F;dpc:      NaN 
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     0.00, cnfl:     0.00, bjmp:     0.00, &#x2F;ppc:      inf 
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        0, cviv:        0, #vbv:        0, &#x2F;cpr:      NaN 
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_sudoku64.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s SATISFIABLE: sudoku64.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;Advent_of_Code_2020&quot;&gt;Advent of Code 2020&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Advent of Code&lt;&#x2F;a&gt;に初参加。面白かった。
SATで解けそうな問題が2つほどあってSplrを使ってみましたが、一勝一敗。
20日目のタイル組み合わせ問題では作ったCNFが10GBを超えてしまって、Splrにロードはできたものうんともすんとも言わなくなってしまいました。
結局その問題は単純にforループで回したら解けました。残念。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;今後の展望&quot;&gt;今後の展望&lt;&#x2F;h2&gt;
&lt;p&gt;まずは0.6.0をリファクタリングバージョンとしてリリースしてしばらく勉強します。
それから年2回のリリースが現実的なので5月位に0.6.0のパラメータチューニングあるいは過去のものとの再融合バージョンが出せたらいいなあ。
あ、夏休みの宿題もしなければ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust製のSATソルバーで64x64のSudokuが解けるだろうか</title>
        <published>2020-12-18T00:00:00+00:00</published>
        <updated>2020-12-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-12-18-sudoku64/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-12-18-sudoku64/</id>
        
        <content type="html">&lt;p&gt;Splr-0.6.0のリリース直前のベンチマークをしながら、息抜きでもっと大きなSudokuを探してみました。&lt;&#x2F;p&gt;
&lt;p&gt;http:&#x2F;&#x2F;www.sudoku-download.net&#x2F;sudoku_64x64.php&lt;&#x2F;p&gt;
&lt;p&gt;さあこの問題を&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;blob&#x2F;master&#x2F;src&#x2F;bin&#x2F;sudoku64.rs&quot;&gt;Splrで解いてみよう&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;元データがpdfしかないので人手で取り込み、変換、間違いの修正に3時間掛かって、ようやくSplrの出番。20秒で正解でした。&lt;&#x2F;p&gt;
&lt;p&gt;大きさの割に空欄が少ないのでN=25と比べてそんなに計算量は増えないだろうと思ったのが2桁近く増えてしまった。なかなか勘はあたらないものだなあ。
ちなみに生成されるCNFの大きさはこんな感じ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;変数数: 262144 = (2^6)^3 = 1M * 2^(-2)&lt;&#x2F;li&gt;
&lt;li&gt;節数: 41048269&lt;&#x2F;li&gt;
&lt;li&gt;ファイルサイズ: 678MB&lt;&#x2F;li&gt;
&lt;li&gt;（参考：&lt;a href=&quot;&#x2F;2020&#x2F;2020-08-19-sudoku25&#x2F;&quot;&gt;sudoku25&lt;&#x2F;a&gt;のファイルサイズは14MB）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;コミットしなくてよかった。&lt;&#x2F;p&gt;
&lt;p&gt;ということで今日も5時間ほど遊んでしまった。はやく年賀状描かねば。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Nov.</title>
        <published>2020-12-04T00:00:00+00:00</published>
        <updated>2020-12-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-12-04-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-12-04-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;冬眠への道&quot;&gt;冬眠への道&lt;&#x2F;h1&gt;
&lt;p&gt;今年もいよいよあと一ヶ月となってきました。夏からずっと取り組んでいるSplrのバージョン0.5.1はおそらく0.6.0としてリリースすることになると思うけどもう少し時間かかりそう。Splrの新版がリリースできたら今年の残りは勉強と研究に当てようと思う。絶対、論文読んだ方がいいよなあ。読みかけの専門書も溜まっているし。おっと、その前に夏休みの宿題を終わらせねば。節の有効性と取得環境の関係についてというテーマでいいはずだけど。積み残しが山のようだ。これではとても一ヶ月で終わりそうにないな。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Sudoku25&quot;&gt;Sudoku25&lt;&#x2F;h1&gt;
&lt;p&gt;今月はSudoku25に振り回された一ヶ月でした。実はSAT符合化に問題があったのでCNFファイルを作り直したら一瞬で解けるようになったものの、それ以前は1日CPUをぶん回しても解けなかったので色々とソルバーに手を入れてました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ cargo run --bin sudoku25 --release
&lt;&#x2F;span&gt;&lt;span&gt;    Finished release [optimized] target(s) in 0.02s
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;release&#x2F;sudoku25`
&lt;&#x2F;span&gt;&lt;span&gt;(embedded 925000 element vector)               15625,925000 |time:     0.71
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:        411, #decision:         4381, #propagate:           4786 
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     1733, #ass:    13892, #elm:        0, prg%:  88.9088 
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:      350, LBD2:       38, Binc:   922540, Perm:   924410 
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#RST:       30, #BLK:        1, #STB:        0, #CNC:        0 
&lt;&#x2F;span&gt;&lt;span&gt;         EMA|tLBD:  28.4606, tASG:  39.8419, eMLD:   4.0016, eCCC:   0.1080 
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     7.07, cnfl:     3.42, bjmp:     2.76, &#x2F;ppc:    11.64 
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        1, cviv:        0, #vbv:        0, &#x2F;cpr:    13.70 
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;found!
&lt;&#x2F;span&gt;&lt;span&gt; 8 12 11 10 18 14 25  4 16 24 20 17  1  9 21 19  5 15  6  2 22 23  7  3 13 
&lt;&#x2F;span&gt;&lt;span&gt; 2 23 13  7 25 22  9 15 19 20 12 24 10 11  4 17 16 18  1  3  8  6  5 14 21 
&lt;&#x2F;span&gt;&lt;span&gt; 9  4 19 22 21 13  3 18 17  5 16  6 25 14  7 23 11 12  8 10 20 15  1 24  2 
&lt;&#x2F;span&gt;&lt;span&gt;16  1 20 15 24 10 21  6  8 23  5  2 18  3 13 14  7  4  9 22 12 25 11 17 19 
&lt;&#x2F;span&gt;&lt;span&gt;14  5 17  6  3  1  7  2 11 12 23 22 19  8 15 21 25 24 13 20 10  9 18 16  4 
&lt;&#x2F;span&gt;&lt;span&gt;13 25  8  4  2 18 20 21 24 10 15  1  7 23  6 16  9  5 19 11 17  3 14 22 12 
&lt;&#x2F;span&gt;&lt;span&gt;22 24  3 21 23  9 17 19 13 16 18 14 20 25  5  6 12  2 15  4  1 10  8 11  7 
&lt;&#x2F;span&gt;&lt;span&gt; 7 14 15 12 10  3  4  8  2 11 22 16  9 19 17 20 13 25 23  1  6 24 21  5 18 
&lt;&#x2F;span&gt;&lt;span&gt;17 11 16  5  1 15  6 23  7 22  3 13  4 12  8 18 21 10 14 24 25 20 19  2  9 
&lt;&#x2F;span&gt;&lt;span&gt; 6  9 18 19 20 12  5 14  1 25  2 10 21 24 11  7 17  3 22  8 16  4 15 13 23 
&lt;&#x2F;span&gt;&lt;span&gt; 3  8  2 11  4 20 19  9 15 18  1 25 13  7 16 24  6 14  5 17 21 12 22 23 10 
&lt;&#x2F;span&gt;&lt;span&gt; 5 22 10 25 17  2  1  3  4 13  8 11  6 21 19 12 23 20 18  9  7 14 24 15 16 
&lt;&#x2F;span&gt;&lt;span&gt;18 20 12 16 13  8 24  5  6  7  9 23 17 10 14 15 22  1 21 25 19 11  2  4  3 
&lt;&#x2F;span&gt;&lt;span&gt;24 15  7 23 14 21 11 25 12 17  4  5 22 20  2 10  8 16  3 19 13 18  6  9  1 
&lt;&#x2F;span&gt;&lt;span&gt;21 19  9  1  6 16 10 22 23 14 24  3 12 15 18 11  2  7  4 13  5 17 20 25  8 
&lt;&#x2F;span&gt;&lt;span&gt;10 16  1 14  8 25 13 12  5  2 17 18 15 22 24  4 19 21 11 23  9  7  3  6 20 
&lt;&#x2F;span&gt;&lt;span&gt;12  2 25 17  7  6 15 24 18 21 10 19 11 13  1  3 14  9 20 16  4 22 23  8  5 
&lt;&#x2F;span&gt;&lt;span&gt;15 21  4 13 11 17 23 16 22  3  7  9  8  5 20 25  1  6  2 12 14 19 10 18 24 
&lt;&#x2F;span&gt;&lt;span&gt;19 18 23 24  5  4  8 20  9  1  6 21 14 16  3 22 10 17  7 15 11  2 13 12 25 
&lt;&#x2F;span&gt;&lt;span&gt;20  3  6  9 22 11 14  7 10 19 25  4 23  2 12 13 18  8 24  5 15  1 16 21 17 
&lt;&#x2F;span&gt;&lt;span&gt; 4 10  5  8 16 23 18 11 21 15 19 12  2  6 25  1 24 22 17  7  3 13  9 20 14 
&lt;&#x2F;span&gt;&lt;span&gt;23 17 22 20 19 24  2  1 25  6 21  8  3  4  9  5 15 13 10 14 18 16 12  7 11 
&lt;&#x2F;span&gt;&lt;span&gt;25 13 21 18 15  7 12 10 14  9 11 20 24 17 23  8  3 19 16  6  2  5  4  1 22 
&lt;&#x2F;span&gt;&lt;span&gt; 1  7 24  2 12 19 16 13  3  4 14 15  5 18 22  9 20 11 25 21 23  8 17 10  6 
&lt;&#x2F;span&gt;&lt;span&gt;11  6 14  3  9  5 22 17 20  8 13  7 16  1 10  2  4 23 12 18 24 21 25 19 15 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;結果、1秒以内に解ける問題だということでした。やったね。&lt;&#x2F;p&gt;
&lt;p&gt;面白いことはこの問題に限ってはstabilization modeを駆使した上で変数活性度をむしろリセットした方が進捗率が向上したこと。おそらく未探索空間を積極的に探訪するようになったせいだろうと思うけど、これは他の問題に生かすべきアプローチだろうか。何か最小不動点的なところでの相転移が必要なのかも知れないが、実際にやってみると極端に悪くなる。とは言えこのまま捨てるには惜しい現象だと思う。リセットせずとも同じような効果としてrephaseをすればいいので、ここを検討した方がいいのではと考えている。Learning Rateベースの活性度も、蛸壺分化型の尺度なので、グローバルに見ての最適保証戦略ではないことは注意すべきだろう。まあこれも基本的に性能悪化するという傾向は同じなのでなかなか先が見えないテーマではある。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Luby_Stabilization&quot;&gt;Luby Stabilization&lt;&#x2F;h1&gt;
&lt;p&gt;変数活性度のリセットの前に思いついたのがLubyStabilization。これはSplrの次バージョンに絶対に取り込みたいと思う。いくつかのリスタートのパラメータセットのバリエーションにおいて問題になるのが最終的にリスタート間隔が合理的なものでなくなる逸脱現象。そもそもリスタート用のパラメータが不適切なせいではあるが、だったら強制的に初期状態に定期的に戻せばいいのではなかろうかと考えたのがきっかけ。長い目では増加数列だが、短期的には増減を繰り返すとなると思い出すのは当然Luby数列。これでstabilization modeの間隔を調整すればいいのではないだろうか。単調に増加し（一方でその上限まで持たせる）CaDiCaLの制御法よりずっとスマートに思えた。これでよくわからない尺度に基づくリスタートの制御はやめて、極めて頻繁にリスタートを繰り返すexploreモードと全くリスタートをしないstabilizedモードを切り替えていけば放っておいてもかなりいい戦略になると思うのだがどうだろうか。よく検討しないうちに変数活性度のリセットにまで広げたので一旦戻ってちょっとだけベンチマークしてみることにした。まあこれで適当なところで0.5.1だか0.6.0だかにしよう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ベンチマーク疲れ&quot;&gt;ベンチマーク疲れ&lt;&#x2F;h1&gt;
&lt;p&gt;前回も書いたかもしれないけど、ベンチマークをインチキな短いタイムアウト付きで走らせるのは電気代ばかり掛かって（研究した気になるばかりで）あまり生産的ではない気がしてきた。計算リソースがないに等しいからといって、インチキなベンチマークでお茶を濁してきたわけだが、もう標準ベンチマークでの測定はやめた方が精神衛生上いいかもしれない。3SATはちょっと傾向が違いすぎる気もするので、その程度の何か違う小さな問題セットに移りたいと強く思いだした。とはいえ新版のリリース前にはやらないといけない。そして一つ前のバージョンよりも遅くなっているのに新盤をリリースしないといけないのは忸怩たる思いである。しかし、0.5.1だか0.6.0はそうやってリリースするのだ。そして一ヶ月の雌伏の時を迎えるのだ。それでは。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JSONファイルをドラッグ&amp;ドロップする</title>
        <published>2020-11-08T00:00:00+00:00</published>
        <updated>2020-11-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-11-08-Drop-a-JSON-file/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-11-08-Drop-a-JSON-file/</id>
        
        <content type="html">&lt;p&gt;画像ファイルとかURLとかをドロップする話はそこそこ見つかるけど、JSONファイルをドロップするのに手こずったのでメモ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span&gt;  NavigationView { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;onDrop(of: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;public.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;], isTargeted: nil) { providers, location &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; providers&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;first {
&lt;&#x2F;span&gt;&lt;span&gt;           item&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;loadItem(forTypeIdentifier: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;public.json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, options: nil) { (urlData, error) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; urlData &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as?&lt;&#x2F;span&gt;&lt;span&gt; URL {
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;self.&lt;&#x2F;span&gt;&lt;span&gt;json &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loadJson(url: url)
&lt;&#x2F;span&gt;&lt;span&gt;               }
&lt;&#x2F;span&gt;&lt;span&gt;           }
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return true
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return false
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;public.json&amp;quot;&lt;&#x2F;code&gt; の&lt;code&gt;public&lt;&#x2F;code&gt;とはなんなのか？&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;isTargeted&lt;&#x2F;code&gt; とはなんなのか？&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Item&lt;&#x2F;code&gt; と &lt;code&gt;Object&lt;&#x2F;code&gt; の違いがよーわかってない。&lt;&#x2F;li&gt;
&lt;li&gt;参考にしたページ（複数）ではクロージャの中には例のSystemサービススレッドにfetchをお願いするコードが入っていたが、ローカルファイルをロードするのにそれはいらんじゃろ、ということで削除。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;urlData&lt;&#x2F;code&gt;から&lt;code&gt;URL&lt;&#x2F;code&gt;型を作る過程も1ステップ削除してある。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;url&lt;&#x2F;code&gt; は &lt;code&gt;Data(contentOf:)&lt;&#x2F;code&gt;の引数に使える。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LubyStabilization</title>
        <published>2020-11-07T00:00:00+00:00</published>
        <updated>2020-11-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-11-07-LubyStabilization/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-11-07-LubyStabilization/</id>
        
        <content type="html">&lt;p&gt;Luby seriesでstabilizationする。まだ結果が出てないだけども、これはいいかも！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-18&quot;&gt;2020-11-18&lt;&#x2F;h3&gt;
&lt;p&gt;Luby Stabilization だかLuby Un-stabilization だか。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-20&quot;&gt;2020-11-20&lt;&#x2F;h3&gt;
&lt;p&gt;今やろうとしていることはrandom walkの導入に類することかも知れぬ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SATソルバのベンチマークについて</title>
        <published>2020-11-03T00:00:00+00:00</published>
        <updated>2020-11-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-11-03-minimize-the-worst/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-11-03-minimize-the-worst/</id>
        
        <content type="html">&lt;p&gt;SATソルバの性能を議論する唯一の指標はSAT competition で使われている400問のベンチマークの求解数だけだろう。
しかしその評価は膨大な計算機リソースを必要とし、正直なところ個人ベースでは現実的でない。なので、これまでは外挿可能だろうという楽観的な見通しの下、極めて短いタイムアウトを設定して実験を繰り返してきた。さらにその前段のスクリーニングとして &lt;code&gt;SAT-bench&lt;&#x2F;code&gt; による3-SAT問題中心のマイクロベンチマークを実行して、合計実行時間の短縮と短いタイムアウト時間内での求解数の向上とを改善指針にしてきた。&lt;&#x2F;p&gt;
&lt;p&gt;しかしこれは過学習の危険性が避けられない。これまではこの問題は敢えて無視してきたけど、泥沼のようなパラメータチューニングはそれでも避けられないため、&lt;a href=&quot;&#x2F;2020&#x2F;2020-10-31-UNSATlog&#x2F;&quot;&gt;ちょっとしたパラメータチューニングのつもりで始めた改良ですら二ヶ月が経ってしまう&lt;&#x2F;a&gt;。そしてこの実験に追われて、SAT Competition ベンチマークの対象を今年のものに変更することすらできてないという惨状。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-09-12-banner.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この状況は変えよう。SAT Competition ベンチマークの結果が悪くてもリリースできるような指針を作って行こうと思う。&lt;&#x2F;p&gt;
&lt;p&gt;3-SATで高速な設定がSAT Competition ベンチマークでの好成績に全く結びついていない以上、&lt;code&gt;SAT-bench&lt;&#x2F;code&gt; での評価指針は
（今までやってきた）合計実行時間の最小化ではなく、もっと大幅に延長したタイムアウト時間内での求解数、そしてその最悪問題の実行時間の最小化としてみたらどうだろうか。
これは &lt;em&gt;解ければ必要時間は気にしない&lt;&#x2F;em&gt; という方針に沿うものになっているのではなかろうか。
そして、この値が改善できれば、SAT Competion ベンチマーク（それもタイムアウト時間が正式ルールよりも大きく短い）の結果が悪くても新バージョンとしてリリースできる、と。&lt;&#x2F;p&gt;
&lt;p&gt;これが今年、1番のアイデアかもしれない。
仕事としての研究が終わってからようやく研究マネージメントの重要性を理解した気がする。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Oct.</title>
        <published>2020-10-31T00:00:00+00:00</published>
        <updated>2020-10-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-10-31-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-10-31-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;相変わらず停滞中&quot;&gt;相変わらず停滞中&lt;&#x2F;h1&gt;
&lt;p&gt;リリースしたり夏休みの宿題をしたりするはずだった9月、10月が過ぎ、相変わらず停滞中です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;0.5.1のリリース&quot;&gt;0.5.1のリリース&lt;&#x2F;h2&gt;
&lt;p&gt;Monotonusにするついでのリスタートパラメータの設定が泥沼。それでも、少なくとも&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;block_restart&lt;&#x2F;code&gt;, &lt;code&gt;force_restart&lt;&#x2F;code&gt;の復活&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;structopt&lt;&#x2F;code&gt;, &lt;code&gt;libc&lt;&#x2F;code&gt;依存性の削除&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;という内部的なそれなりの変更はコミット済み。
しかし、あまりに長い膠着状態なので、これ以上色々なアイデアを導入するのは一旦放棄しました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Sudoku25&quot;&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-08-19-sudoku25&#x2F;&quot;&gt;Sudoku25&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;いやー全然ダメだわ。数十秒で解けたというのが信じられない。これもベンチマークの対象に入れて、一ヶ月色々なパラメータで試してみたけど約10040変数からの停滞から脱出できない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;SAT_Competition_2020&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;satcompetition.github.io&#x2F;2020&#x2F;&quot;&gt;SAT Competition 2020&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;試行錯誤に時間を取られていまだにキャッチアップできていません。これは今年中にしなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;夏休みの宿題&quot;&gt;夏休みの宿題&lt;&#x2F;h2&gt;
&lt;p&gt;上に同じ。これもSAT問題のよりよい理解はソルバー開発にプラスのはずなんだけど、全く研究マネージメントの失敗です。これも今年中にしなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;今後の見込み&quot;&gt;今後の見込み&lt;&#x2F;h2&gt;
&lt;p&gt;ということでSplr-0.5.1を10日以内になんでもいいからリリースして（とは言え0.5.0より遅いものをリリースするわけにはいかないのでrelease blockerが厳然と立ちはだかっている）、今年の開発は一旦フリーズして積み残しの課題をしようと思います。もう二ヶ月しか残ってないのだ。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Sep.</title>
        <published>2020-10-10T00:00:00+00:00</published>
        <updated>2020-10-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-10-10-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-10-10-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;怪我の8〜9月&quot;&gt;怪我の8〜9月&lt;&#x2F;h2&gt;
&lt;p&gt;すっかり遅くなってしまった。あちこち怪我したせいで色々と時間をとられてしまいました。9月はパラメータチューニングだけやって0.5.2をリリースするつもりだったのだけど、実行時間に対して求解可能問題が単調に増えるソルバにしたくてやっている最中にまた脱線してしまいました。ということで特に成果なし。強いて言うなら、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;StructOpts&lt;&#x2F;code&gt;への依存を削除。オブジェクトサイズがほぼ半減した！さらに&lt;code&gt;libc&lt;&#x2F;code&gt;への依存も実は std::time::{Duration, Instant}　で代替できたのでこれも削除。今やSplrが依存するのは&lt;code&gt;bitflags&lt;&#x2F;code&gt;だけ！&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;つい昨日気づいたけどリスタート延期の判断を矛盾発生時まで遅延させるのは筋が悪い。タイミングを逸している。作り直すべき。9月に散々試したいろいろなstabilizationの実験結果は全て放棄することになりました。まあ、リスタートに関するオリジナルの尺度は捨ててもいいかなと思っていたところではある。しかし、何を使っても実はベンチマークの設定が超短期間ならあまり意味がなくて、十分に線形に求解数が伸びていくことの方が大事なんだろう。これを実践するにはリソースがなさすぎ。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;これまではchronoBTの理解ができていない箇所をうまいこと避けるような実装になっていたけど、レアケースでは無限ループに陥っていたことが判明。矛盾レベルのリテラルが一つしか含まれない矛盾節に対するバックトラックの処理を正しく実装し直した。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;もしかしてと思ってリテラル監視節リストをVecDequeにしてみたりBinaryHeapにしてみたりしました。stabilizationと同じ効果があるのではと思ったのだけど、全般的にはむしろ性能悪化の傾向。計算量多すぎ。そもそもSplrのカクタスプロットが早い段階から悪化するのはやはり計算量のレベルの問題だろうか。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;他に何かあったかな？　思い出したら追加します。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;追伸&quot;&gt;追伸&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-08-19-sudoku25&#x2F;&quot;&gt;sudoku25が5000秒以内に解けなかった&lt;&#x2F;a&gt;のが大変ショックなのでした。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Aug.</title>
        <published>2020-09-12T00:00:00+00:00</published>
        <updated>2020-09-12T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-09-12-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-09-12-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;8月の目玉&quot;&gt;8月の目玉&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;splr&#x2F;&quot;&gt;Splr-0.5.0&lt;&#x2F;a&gt;をリリースしました。表立ってはclause vilification の導入です。一方裏ではリスタートの尺度がオリジナルなものへ変更されました。これは今のところ充分な評価ができてないのでChangelogではundocumentedで済ませたという代物。宿題です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Glucose-4.1との比較&quot;&gt;Glucose-4.1との比較&lt;&#x2F;h2&gt;
&lt;p&gt;前回, Glucoseと比べて全然遅いという話をしましたが、0.5.0はタイムアウトを100秒に設定するとoutperformできるようになりました。結構早い段階でこの成果は出ていたのですが、タイムアウトを500秒に伸ばすと100秒での求解数が10近くも落ちてしまうため、本当にいいのかどうかなんとも言えない。これはSplrがタイムアウト時間を考慮して{pre, in}-processorのタイムスロットを決めているため、ある時間で解ける問題がそれより長いタイムアウト設定で解ける保証がないことから生じた問題なので、本質的には仕方ないとしか言いようがありません。一方でこれはprocessorに与える時間に関するヒューリスティックスに改善の余地があることを示しているようにも思え、ついついその試行錯誤に時間を掛けてしまったせいでリリースが一ヶ月は延びる羽目になってしまいました。適当なところで打ち切ってパラメータチューニングは0.5.1にしようと思ったのですが、これまたパラメータチューニングで済むかどうか、やってみないことにはなんとも。
で結局タイムアウト500秒域では多分Glucoseを上回ることはないでしょう。やっぱりなんか根本のところで王道を外しているようにしか見えない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;リスタートについて&quot;&gt;リスタートについて&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-08-19-splr-with-vivification&#x2F;&quot;&gt;Clause vivification&lt;&#x2F;a&gt;とリフレーズの探求が0.5.0の主たる変更点ですが、後者を色々と試していて、特に一体Stableはどういう時に必要とされるのかを考えていて、結局オリジナルな尺度をリスタートモジュールに導入することになってしまいました。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;学習節のLBDが大きくてもそれがリテラル断定(assertionの訳です）への道のりの途中ならそれを許容してもいいだろう。つまり非常に頻繁に活性度の更新が起きているリテラルが存在する間は（それは今大きな問題になっている重要なリテラルなのでその解決を優先するため）リスタートを抑制してもいいんじゃなかろうか。&lt;&#x2F;li&gt;
&lt;li&gt;学習節のLBDの良さはその相対地で決まるのではなく、矛盾解析に使われるかどうかで決まるのではなかろうか。直近の傾向が矛盾解析中に出てきた最大LSBのEMAより大きければそれはリスタートに値するのでは。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;なんだかどちらもよさそうに思えて、実際実験結果もこれを棄却できてなさそうなので試しに入れてみました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;9月の抱負&quot;&gt;9月の抱負&lt;&#x2F;h2&gt;
&lt;p&gt;生活が忙しくなって、さらに体力減少中なのでペースは落ちるだろうけど、processorのもうちょっとよい実行契機を見つけたい。これだけやって0.5.1を出したいものです。そしてSC2020に更新しなければ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Zoomについて</title>
        <published>2020-08-30T00:00:00+00:00</published>
        <updated>2020-08-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-30-zoom/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-30-zoom/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NEW&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;gigazine.net&#x2F;news&#x2F;20200828-zoom-read-write-cookie&#x2F;&quot;&gt;Zoom Windows clientがブラウザに保存されたCookieをアンインストール時に操作していることが判明&lt;&#x2F;a&gt;, 2020-08-28&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;wedge.ismedia.jp&#x2F;articles&#x2F;-&#x2F;19630&quot;&gt;NASA, ドイツ外務省が使用制限、バンク・オブ・アメリカ、ダイムラー、エリクソンが使用禁止&lt;&#x2F;a&gt;, シンガポール政府は使用禁止解除&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gigazine.net&#x2F;news&#x2F;20200409-google-bans-zoom&#x2F;&quot;&gt;Googleがオンラインビデオ会議アプリ「Zoom」の使用を禁止&lt;&#x2F;a&gt;, 2020-04-09&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jp.techcrunch.com&#x2F;2020&#x2F;04&#x2F;08&#x2F;2020-04-07-taiwans-government-bars-its-agencies-from-using-zoom-over-security-concerns&#x2F;&quot;&gt;台湾行政院が政府機関でのZoom使用を禁止&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;オーストラリアは国防軍、議会でのZoom使用を禁止(dead link https:&#x2F;&#x2F;www.theaustralian.com.au&#x2F;nation&#x2F;politics&#x2F;zoom-ban-for-mps-over-security-concerns&#x2F;news-story&#x2F;39db4e7938c897a3a9318e30b29920a6)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;theintercept.com&#x2F;2020&#x2F;03&#x2F;31&#x2F;zoom-meeting-encryption&#x2F;&quot;&gt;End-to-Endをうたっていたが実際はそうではない&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2020&#x2F;04&#x2F;03&#x2F;zoom-calls-routed-china&#x2F;&quot;&gt;一部のビデオコールが中国を経由&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;TechCrunch, &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2020&#x2F;03&#x2F;31&#x2F;zoom-at-your-own-risk&#x2F;&quot;&gt;Zoomは使うべきでない&lt;&#x2F;a&gt;, 2020-03-31&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jp.reuters.com&#x2F;article&#x2F;spacex-zoom-video-commn-idJPKBN21K160&quot;&gt;イーロンマスクがSpaceXでZoomを使用することを禁止&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnet.com&#x2F;news&#x2F;zoom-every-security-issue-uncovered-in-the-video-chat-app&#x2F;&quot;&gt;ニューヨーク市の教育省がMicrosoft Teamsを使用するよう各学校に連絡&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gigazine.net&#x2F;news&#x2F;20200327-zoom-ios-app-sends-data-facebook&#x2F;&quot;&gt;ZOOMはFacebookアカウントを持っていない人のデータもFacebookに送信している&lt;&#x2F;a&gt;, 2020-03-27&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;実績&quot;&gt;実績&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;(iPhone) Facebookアカウントを持っていない人のデータもFacebookに送っていた&lt;&#x2F;li&gt;
&lt;li&gt;(Mac) ユーザーの使用するMacに秘密裏にウェブサーバーをインストールしていた&lt;&#x2F;li&gt;
&lt;li&gt;(Mac) 管理権限を持たないMacユーザーに対して、アプリケーションを自動でインストールする&lt;&#x2F;li&gt;
&lt;li&gt;(Mac) TimeMachine実行時になんでも実行できるスクリプトをインストール&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Make_clean&quot;&gt;Make clean&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.techjunkie.com&#x2F;mac-uninstall-zoom&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;apple.stackexchange.com&#x2F;questions&#x2F;358651&#x2F;unable-to-completely-uninstall-zoom-meeting-app&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;eclecticlight.co&#x2F;2019&#x2F;07&#x2F;10&#x2F;apple-has-pushed-an-update-to-mrt-to-remove-zooms-hidden-web-server&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing clause vivification on Splr</title>
        <published>2020-08-19T00:00:00+00:00</published>
        <updated>2020-08-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification/</id>
        
        <content type="html">&lt;p&gt;Version 0.4.2 リリース直前のSplr、性能的には妥協できるものが出来たので次の課題は妥当性。
SAT問題はいいのだけど、UNSAT問題に対する certification がおかしなものになっているとか。
vivification を切ると問題が解消するので、vivify時の節の追加削除が正しくcertification に反映されてないようだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1._gratgenのこういうメッセージがどうやっても解消できない&quot;&gt;1. gratgenのこういうメッセージがどうやっても解消できない&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;c Ignoring deletion of non-existent clause (pos 30441)
&lt;&#x2F;span&gt;&lt;span&gt;c Ignoring deletion of non-existent clause (pos 30441)
&lt;&#x2F;span&gt;&lt;span&gt;c Ignoring deletion of non-existent clause (pos 30441)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;うーん、そんなはずはないのだが。。。&lt;&#x2F;p&gt;
&lt;p&gt;理由：節内リテラルの順序とcertificateに書き出されたものでの順序とが一致していなかった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2._なぜかAssignStack中に未割り当てリテラルが出現する&quot;&gt;2. なぜかAssignStack中に未割り当てリテラルが出現する&lt;&#x2F;h2&gt;
&lt;p&gt;理由：変数への仮割り当ての前提条件の検査が不十分だった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3._2020-08-21_記号の読み間違え判明&quot;&gt;3. 2020-08-21 記号の読み間違え判明&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-07-05-vivification2&#x2F;&quot;&gt;Clause Vivification updated 2020&lt;&#x2F;a&gt;に記載の通り。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4._vivify中に決定による割り当てを行っただけでcertificateが不当なものになってしまう&quot;&gt;4. vivify中に決定による割り当てを行っただけでcertificateが不当なものになってしまう&lt;&#x2F;h2&gt;
&lt;p&gt;理由：Eliminatorがバグってた！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5._Eliminatorを直しても以下省略&quot;&gt;5. Eliminatorを直しても以下省略&lt;&#x2F;h2&gt;
&lt;p&gt;理由：&lt;code&gt;cdb.detach(); cdb.garbage_collect();&lt;&#x2F;code&gt; が非常に怪しい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6._propagateしなくてもおかしくなる&quot;&gt;6. &lt;code&gt;propagate&lt;&#x2F;code&gt;しなくてもおかしくなる&lt;&#x2F;h2&gt;
&lt;p&gt;理由：節の追加削除しか原因はない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;7._Rule._3の解釈が怪しい&quot;&gt;7. Rule. 3の解釈が怪しい&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rule_3&lt;&#x2F;strong&gt;: If $\text{UP}(\phi \cup {\neg l_1, \ldots, \neg l_i }) = \Box$, then $\phi \cup {\neg l_1, \ldots, \neg l_i }$ is unsatisfiable and clause $l_1 \vee \cdots \vee l_i$ is a logical consequence of $\phi$ and could replace $C$. However, as before, let $R$ be the set of literals of the falsified clause, $conflAnalysis(\phi, \neg C&#x27; \cup {\neg l_i }, R)$, which is a sub-clause of $l_1 \vee \cdots \vee l_i$ .&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;そもそも&lt;code&gt;conflict_analysis&lt;&#x2F;code&gt;の引数の解釈は大丈夫だろうか。なぜ3引数なのか。ということで論文より引用し直し。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-08-19_Algorithm4-conflAnalysis.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-07-05_vivi-algo3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大丈夫なようだ。矛盾しているリテラルを拾うためにリテラルベースではなく、変数ベースでアクセスしている。
特に問題はない。例えば節長が1の学習節をcertificateに含めても問題は発生しない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;8._しかし生成された節を_certificate_に含めると証明にならない&quot;&gt;8. しかし生成された節を certificate に含めると証明にならない&lt;&#x2F;h2&gt;
&lt;p&gt;理由：&lt;strong&gt;Algorithm 4&lt;&#x2F;strong&gt;は間違い。もし最上位レベルでの含意によって割り当てられるリテラルだけからなる節によって矛盾が発生したとする。この場合&lt;strong&gt;Algorithm 4&lt;&#x2F;strong&gt;では決定変数が学習節に含まれない。なので&lt;strong&gt;Algorithm 4&lt;&#x2F;strong&gt;は以下であるべき。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;  fn analyze(asg: &amp;amp;AssignStack, cdb: &amp;amp;ClauseDB, lits: &amp;amp;[Lit], reason: &amp;amp;[Lit], ...) -&amp;gt; Vec&amp;lt;Lit&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;       let mut res: Vec&amp;lt;Lit&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;       for l in reason { seen[l.vi()] = key; }
&lt;&#x2F;span&gt;&lt;span&gt;       for l in asg.stack_iter().rev() {
&lt;&#x2F;span&gt;&lt;span&gt;           if seen[l.vi()] != key { continue; }
&lt;&#x2F;span&gt;&lt;span&gt;           if lits.contains(l) {
&lt;&#x2F;span&gt;&lt;span&gt;               res.push(!*l);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-              continue;
&lt;&#x2F;span&gt;&lt;span&gt;           } else if lits.contains(&amp;amp;!*l) {
&lt;&#x2F;span&gt;&lt;span&gt;               res.push(*l);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-              continue;
&lt;&#x2F;span&gt;&lt;span&gt;           }
&lt;&#x2F;span&gt;&lt;span&gt;           for r in asg.reason_literals(cdb, *l).iter() { seen[r.vi()] = key; }
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;       res
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;2020-08-23: これでバグが取れた！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;最終版&quot;&gt;最終版&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(asg: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AssignStack, cdb: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; ClauseDB) -&amp;gt; MaybeInconsistent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ci) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; cdb[ci];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; clits &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; copied: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;this_clause: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;l) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; continue &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; This path is optimized for the case the decision level is zero.
&lt;&#x2F;span&gt;&lt;span&gt;                    copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cid: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ClauseId&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(copied[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;                    };
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;cc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb[cc].lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 3
&lt;&#x2F;span&gt;&lt;span&gt;                        copied &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;analyze&lt;&#x2F;span&gt;&lt;span&gt;(cdb, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;copied, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;r, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; seen);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() { flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(asg.root_level);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cj) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cid { cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;(cj); }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;cc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;                    copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 4
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flipped { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied); }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(SolverError::Inconsistent),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;(ci),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; l0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; copied[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;                cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;certificate_add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;copied);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(l0) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_at_rootlevel&lt;&#x2F;span&gt;&lt;span&gt;(l0)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_none&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span&gt;(SolverError::Inconsistent);
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;(ci);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            n &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            n &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied);
&lt;&#x2F;span&gt;&lt;span&gt;                cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;detach&lt;&#x2F;span&gt;&lt;span&gt;(ci);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;retain&lt;&#x2F;span&gt;&lt;span&gt;(|ci| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;cdb[ci].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(Flag::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;DEAD&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust製の「SATソルバーで25x25のナンプレが解けるだろうか」</title>
        <published>2020-08-19T00:00:00+00:00</published>
        <updated>2020-11-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-19-sudoku25/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-19-sudoku25/</id>
        
        <content type="html">&lt;p&gt;何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。
http:&#x2F;&#x2F;labs.timedia.co.jp&#x2F;2017&#x2F;07&#x2F;sat25x2520.html&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|
&lt;&#x2F;span&gt;&lt;span&gt;| . 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| . 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| . 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span&gt;| .  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  .|
&lt;&#x2F;span&gt;&lt;span&gt;|11  .  .  .  9| .  .  .  .  .| .  .  .  .  .| .  .  .  .  .| .  .  . 19  .|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この問題をSATで解く（正確には、他の人に解いてもらう）という話です。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;さて、制約充足問題というと、すぐに思いつくのがSATであろう。ということで調べると、SATでパズルを解く研究をしている神戸大学情報基盤センターが直ぐに見つかる。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;「SATでパズルを解く研究をしている」という表現はどうなのかと思わないでもないけどもそれは置いといて、田村先生によって&lt;a href=&quot;http:&#x2F;&#x2F;labs.timedia.co.jp&#x2F;2017&#x2F;07&#x2F;sat25x2520-1.html&quot;&gt;20秒で解かれてしまった&lt;&#x2F;a&gt;そうだ。&lt;&#x2F;p&gt;
&lt;p&gt;さて、Splrだとどうだろうか。面白そうなのでやってみました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Sudokuの符号化(part_1)&quot;&gt;Sudokuの符号化(part 1)&lt;&#x2F;h1&gt;
&lt;p&gt;Sudokuのルールは以下の4つ。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;セルには一つの数を割り当てる（単一制約）&lt;&#x2F;li&gt;
&lt;li&gt;行には全ての数をそれぞれ一回のみ割り当てる（行制約）&lt;&#x2F;li&gt;
&lt;li&gt;列には全ての数をそれぞれ一回のみ割り当てる（列制約）&lt;&#x2F;li&gt;
&lt;li&gt;ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;既に何度か符号化しているものの、以前作ったものがサイズ25に対応できてなかったことがわかったのでもう一度&lt;a href=&quot;https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2020&#x2F;2020-08-19-sudoku25&#x2F;2020&#x2F;2020-05-26-MiracleSudoku&#x2F;&quot;&gt;What&#x27;s Miracle Sudoku?&lt;&#x2F;a&gt;で導入した、第１象限限定の幾何構造体&lt;code&gt;Pos&lt;&#x2F;code&gt;、その上の状態保持構造体&lt;code&gt;Cell&lt;&#x2F;code&gt;をそのまま利用して作り直し。例えばこんな感じで簡単に書ける。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pos::at(i, j);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; jj &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; q &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pos::at(i, jj);
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;9 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;             rules.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;requires&lt;&#x2F;span&gt;&lt;span&gt;(q.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そして上の問題の設定は、件のブログではverbatimで与えられていたのでコピペして&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;として取り込み、スライスをうまく作ってparseするのが現実的（解くのが数秒で問題入力が1時間ではちょっとね）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; dim: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;S25&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(Pos, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; block_len &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(dim &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as f64&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(ii, l) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;S25&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;lines&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ii &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;(block_len &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;     i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;  } 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;でやってみたところ、全然だめ。いろいろ補助的なルールを追加しても5000秒でもだめ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-10-13&quot;&gt;2020-10-13&lt;&#x2F;h3&gt;
&lt;p&gt;CaDiCaLが8000秒掛かっても解けないじゃん！！こんなん解けねーよ！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-02&quot;&gt;2020-11-02&lt;&#x2F;h3&gt;
&lt;p&gt;先月は10040あたりでピタリと停滞していたのが10150あたりまで伸びるようになってきた。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-06&quot;&gt;2020-11-06&lt;&#x2F;h3&gt;
&lt;p&gt;10040とか10150とか言っていたのはasserted varsの個数だけど、eliminated varsのことを考えてないので正確ではない。
大体残り5080くらいということ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-07&quot;&gt;2020-11-07&lt;&#x2F;h3&gt;
&lt;p&gt;CaDiCaLで実行すると数時間掛かった。残りが減れば加速するかと思っていたけど、CaDiCaLですら残り4000台は淡々としか減っていかない。
残り3000の前半くらいからやっと終わりが見えてくる。
うーむ、4000台への突入ではなく3000台を通り過ごさなければならないのか。これは長い。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-18&quot;&gt;2020-11-18&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-11-07-LubyStabilization&quot;&gt;新しい実装&lt;&#x2F;a&gt;で5000秒で残り5081とか10000秒で4991くらい。
これはブレークスルーであるが、一方でコアがなかなか小さくならない（1100程度）ので時間を掛けても解けるかどうか自信がない。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ splr -t 10000 sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;sudoku25.cnf                                   15625,970146 |time: 10000.10
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:  108320000, #decision:    151987030, #propagate:     7602488160 
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     4991, #ass:    10205, #elm:      429, prg%:  68.0576 
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:    27129, LBD2:      291, Binc:  1020680, Perm:  1057443 
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:    44811, #RST:   383671, span:     8192, shft:    16382 
&lt;&#x2F;span&gt;&lt;span&gt;         EMA|tLBD:   1.6215, tASG:   0.9990, core:     1196, &#x2F;dpc:     1.40 
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:    32.07, cnfl:    44.64, bjmp:    43.51, &#x2F;ppc:    70.19 
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:       42, cviv:       16, #vbv:        0, &#x2F;cpr:   282.31 
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: HighSuccessiveConflict (long decision chains)
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s UNKNOWN (TimeOut): sudoku25.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2020-11-21&quot;&gt;2020-11-21&lt;&#x2F;h3&gt;
&lt;p&gt;三連休は数独三昧になりそうだ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;202011-21T11:23 (Online TeXを見ながら) 5000秒で4800台とか。&lt;&#x2F;li&gt;
&lt;li&gt;202011-22T22:00 2000秒台で4800台突入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2020-11-24&quot;&gt;2020-11-24&lt;&#x2F;h3&gt;
&lt;p&gt;あー、あるルールを追加してなかったなあと思って&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;commit&#x2F;1e41b14aecd58d02cb1a2087d3c239f661b67e5e&quot;&gt;生成プログラムを変更&lt;&#x2F;a&gt;したらCaDiCaLが一瞬で解くようになった。
もしかしてと思ってやってみたら、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ splr sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;sudoku25.cnf                                   15625,972021 |time:    15.03
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:        324, #decision:         2920, #propagate:         101930 
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     2507, #ass:    13118, #elm:        0, prg%:  83.9552 
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:      229, LBD2:       35, Binc:   922556, Perm:   924329 
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:        8, #RST:        0, span:        1, shft:        0 
&lt;&#x2F;span&gt;&lt;span&gt;         EMA|tLBD:  38.8489, tASG:  52.9797, core:        0, &#x2F;dpc:     9.01 
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.22, cnfl:     1.17, bjmp:     0.76, &#x2F;ppc:   314.60 
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        2, cviv:        0, #vbv:        0, &#x2F;cpr:     8.31 
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s SATISFIABLE: sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;$ dmcr sudoku25.cnf 
&lt;&#x2F;span&gt;&lt;span&gt;A valid assignment set for sudoku25.cnf is found in .ans_sudoku25.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ぎょえーーーーー、なんだったんだこの一ヶ月の電気代！！！！！！&lt;&#x2F;p&gt;
&lt;p&gt;とりあえず証拠の品を部分公開。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| 8 12 11 10 18|14 25  4 16 24|20 17  1  9 21|19  5 15  6  2|22 23  7  3 13|
&lt;&#x2F;span&gt;&lt;span&gt;| 2  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  . 21|
&lt;&#x2F;span&gt;&lt;span&gt;| 9  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  2|
&lt;&#x2F;span&gt;&lt;span&gt;|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  . 19|
&lt;&#x2F;span&gt;&lt;span&gt;|14  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  4|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  . 12|
&lt;&#x2F;span&gt;&lt;span&gt;|22  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  7|
&lt;&#x2F;span&gt;&lt;span&gt;| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5 18|
&lt;&#x2F;span&gt;&lt;span&gt;|17  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  9|
&lt;&#x2F;span&gt;&lt;span&gt;| 6  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  . 23|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| 3  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|
&lt;&#x2F;span&gt;&lt;span&gt;| 5 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  . 16|
&lt;&#x2F;span&gt;&lt;span&gt;|18 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  3|
&lt;&#x2F;span&gt;&lt;span&gt;|24 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  1|
&lt;&#x2F;span&gt;&lt;span&gt;|21  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6 20|
&lt;&#x2F;span&gt;&lt;span&gt;|12  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  5|
&lt;&#x2F;span&gt;&lt;span&gt;|15  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  . 24|
&lt;&#x2F;span&gt;&lt;span&gt;|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  . 25|
&lt;&#x2F;span&gt;&lt;span&gt;|20  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  . 17|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;span&gt;| 4  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  . 14|
&lt;&#x2F;span&gt;&lt;span&gt;|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|
&lt;&#x2F;span&gt;&lt;span&gt;|25  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  . 22|
&lt;&#x2F;span&gt;&lt;span&gt;| 1  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  6|
&lt;&#x2F;span&gt;&lt;span&gt;|11  6 14  3  9| 5 22 17 20  8|13  7 16  1 10| 2  4 23 12 18|24 21 25 19 15|
&lt;&#x2F;span&gt;&lt;span&gt;+--------------+--------------+--------------+--------------+--------------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;Sudokuの符号化(part_2)&quot;&gt;Sudokuの符号化(part 2)&lt;&#x2F;h1&gt;
&lt;p&gt;Sudokuのルールは以下の4つ（これは再掲）：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）&lt;&#x2F;li&gt;
&lt;li&gt;行には全ての数をそれぞれ一回のみ割り当てる（行制約）&lt;&#x2F;li&gt;
&lt;li&gt;列には全ての数をそれぞれ一回のみ割り当てる（列制約）&lt;&#x2F;li&gt;
&lt;li&gt;ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ここで、2から4は以下のように解釈すべきである：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;行、列、ブロックなどのグループはあるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;commit&#x2F;2f73c7205b7658658b154e1dfe2a54a48e054538&quot;&gt;拡大最多単一制約&lt;&#x2F;a&gt;）&lt;&#x2F;li&gt;
&lt;li&gt;行、列、ブロックなどのグループは全ての数をそれぞれ少なくとも1回割り当てる（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;commit&#x2F;1e41b14aecd58d02cb1a2087d3c239f661b67e5e&quot;&gt;拡大最少単一制約&lt;&#x2F;a&gt;）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;この2番目が最初のプログラムにはなかった（negative assertionsからpositive assertionへの導出がなかったので、そりゃ探索空間が小さくならないわ）。
行制約の単純な解釈だと抜け落ちてしまう。
それでもN=9, 16くらいだと問題にならないので、ブログなどでは出てこなくても当然かもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;これが色々なソルバーの説明で出てくるXOR gateの話に繋がるのだろうか。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-11-25&quot;&gt;2020-11-25&lt;&#x2F;h3&gt;
&lt;p&gt;上の説明とコードを見比べていて、無駄なルールを生成していたことに気づいたので、削除するとさらに速くなりました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ splr sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;sudoku25.cnf                                   15625,925146 |time:     0.50
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:        314, #decision:         3452, #propagate:         110839 
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:     3967, #ass:    11658, #elm:        0, prg%:  74.6112 
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:      243, LBD2:       27, Binc:   922541, Perm:   924411 
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:        7, #RST:        0, span:        1, shft:        0 
&lt;&#x2F;span&gt;&lt;span&gt;         EMA|tLBD:  41.1487, tASG:  52.2173, core:        0, &#x2F;dpc:    10.99 
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     5.74, cnfl:     1.63, bjmp:     1.14, &#x2F;ppc:   352.99 
&lt;&#x2F;span&gt;&lt;span&gt;        misc|elim:        2, cviv:        0, #vbv:        0, &#x2F;cpr:    10.47 
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_sudoku25.cnf
&lt;&#x2F;span&gt;&lt;span&gt;s SATISFIABLE: sudoku25.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;Sudokuの符号化(part_3)&quot;&gt;Sudokuの符号化(part 3)&lt;&#x2F;h1&gt;
&lt;p&gt;Sudokuのルールは以下の2つである：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）&lt;&#x2F;li&gt;
&lt;li&gt;行、列、ブロックなどのグループには全ての数をそれぞれ{多くとも,少なくとも}一回のみ割り当てる（拡大最多・最少単一制約）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;2のルールから実行時に以下が自動的に導出される：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;グループにおいて、あるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない(positive to negative implication)&lt;&#x2F;li&gt;
&lt;li&gt;グループにおいて、N-1セルにある数が割り当てられる可能性がなくなったら、残りセルにその数が割り当てられる(negatives to positive implication)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;これにより探索空間が単調に減少する。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>RustのClone on Writeについて</title>
        <published>2020-08-15T00:00:00+00:00</published>
        <updated>2020-08-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-15-Cow/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-15-Cow/</id>
        
        <content type="html">&lt;p&gt;自転車本では紹介されてないけれど、Rustならでは必要とされる面白い型、Copy on Writeではなくて、Clone on Writeを意味する&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot;&gt;&lt;code&gt;std::borrow::Cow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; の紹介です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;前提知識：str_と_Stringの違い&quot;&gt;前提知識：&lt;code&gt;str&lt;&#x2F;code&gt; と &lt;code&gt;String&lt;&#x2F;code&gt;の違い&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str&lt;&#x2F;code&gt; -- （固定長の）UTF-8文字のスライス&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; -- UTF-8文字のスライスへのポインタ&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;String&lt;&#x2F;code&gt; -- ヒープ上に置かれた、追加を含めた変更ができる文字列&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;前提知識：文字列定数とその参照&quot;&gt;前提知識：文字列定数とその参照&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;ローカル変数&quot;&gt;ローカル変数&lt;&#x2F;h4&gt;
&lt;p&gt;まず、以下のように関数内のローカルデータとして確保された文字列定数を参照する変数の型を確認しておきます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;a fixed string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これは &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;a fixed string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;a fixed string&amp;quot;&lt;&#x2F;code&gt;はローカルなデータなので（Boxも使ってないし）ヒープに置く必要はありません。&lt;&#x2F;li&gt;
&lt;li&gt;変数&lt;code&gt;s&lt;&#x2F;code&gt;はその確保された領域を指すように型付けられます。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;str&lt;&#x2F;code&gt;は通常Rustのプログラムには出てきません。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ちなみに&lt;code&gt;s&lt;&#x2F;code&gt;がグローバル変数&lt;code&gt;S&lt;&#x2F;code&gt;になるとどうなるでしょう。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; 設計中
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; S: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;??? = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;a fixed string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;グローバル変数も他の言語同様にヒープではなくOSで言うところのデータ領域に置かれるのでやはり&lt;code&gt;str&lt;&#x2F;code&gt;であり、
その領域を指すので変数&lt;code&gt;S&lt;&#x2F;code&gt; は&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;型になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; S: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;a fixed string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;前提知識：strとString間の変換&quot;&gt;前提知識：&lt;code&gt;str&lt;&#x2F;code&gt;と&lt;code&gt;String&lt;&#x2F;code&gt;間の変換&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;&amp;amp;strからStringへ&quot;&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;から&lt;code&gt;String&lt;&#x2F;code&gt;へ&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;型の変数があればその指している対象から&lt;code&gt;to_string&lt;&#x2F;code&gt;メソッドを使って&lt;code&gt;String&lt;&#x2F;code&gt;を作ることができます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A fixed string&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ヒープ操作を必要とする
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;この時&lt;code&gt;t&lt;&#x2F;code&gt;の実体はヒープ上に置かれたfat pointerです。固定長なのでメモリを大きく消費するわけではありませんが、実体へのポインタを含む構造体をヒープ上に構成する必要があります。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Stringから&amp;amp;strへ&quot;&gt;&lt;code&gt;String&lt;&#x2F;code&gt;から&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;へ&lt;&#x2F;h3&gt;
&lt;p&gt;逆の操作は&lt;code&gt;as_str()&lt;&#x2F;code&gt;です。この操作は&lt;code&gt;String&lt;&#x2F;code&gt;を構成するfat pointerを流用すればいいので極めて軽量です。
これは&lt;code&gt;&amp;amp;srt&lt;&#x2F;code&gt;から&lt;code&gt;String&lt;&#x2F;code&gt;への変換が&lt;code&gt;to_*&lt;&#x2F;code&gt;系なのに対し、&lt;code&gt;String&lt;&#x2F;code&gt;から&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;への変換が&lt;code&gt;as_*&lt;&#x2F;code&gt;系の&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv&quot;&gt;命名&lt;&#x2F;a&gt;になっていることからもわかります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A fixed string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str =&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;();    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 軽量な操作
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここまでが前提知識でした。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;問題となるシナリオ:_&amp;amp;str_と_String_の混在&quot;&gt;問題となるシナリオ: &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; と &lt;code&gt;String&lt;&#x2F;code&gt; の混在&lt;&#x2F;h1&gt;
&lt;p&gt;さて、以下のような構造体&lt;code&gt;S&lt;&#x2F;code&gt;に対してその文字列表現を返す&lt;code&gt;rep()&lt;&#x2F;code&gt;メソッドを定義するとします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  vec: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただし、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;その構造体が持っているフィールド&lt;code&gt;index&lt;&#x2F;code&gt;が0の時は固定のメッセージを返す。&lt;&#x2F;li&gt;
&lt;li&gt;そうでなければ内部データの値がわかる文字列にしたい。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;とします。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; 設計中
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;??? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;Case_1:_index_==_0_のオブジェクトの場合&quot;&gt;Case 1: index == 0 のオブジェクトの場合&lt;&#x2F;h3&gt;
&lt;p&gt;この場合、&lt;code&gt;rep()&lt;&#x2F;code&gt;内部で固定のメッセージを保持するローカル変数&lt;code&gt;mes&lt;&#x2F;code&gt;の値をそのまま返すことにします。
&lt;code&gt;mes&lt;&#x2F;code&gt;の型は &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; であることから&lt;code&gt;rep()&lt;&#x2F;code&gt;の返値型も&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできるはず
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mes: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;null object&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;         mes
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;Case_2:_それ以外&quot;&gt;Case 2: それ以外&lt;&#x2F;h3&gt;
&lt;p&gt;フィールド&lt;code&gt;vec&lt;&#x2F;code&gt;の値を埋め込んだ文字列を作るため&lt;code&gt;format!&lt;&#x2F;code&gt;を使うことにしました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;format!&lt;&#x2F;code&gt;の返す型は&lt;code&gt;String&lt;&#x2F;code&gt;なので&lt;code&gt;rep()&lt;&#x2F;code&gt;の返値型も&lt;code&gt;String&lt;&#x2F;code&gt;になります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできない
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{{{:?}}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec)
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで型が一致しない問題に直面します。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;案1:_&amp;amp;strへの統一&quot;&gt;案1: &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;への統一&lt;&#x2F;h3&gt;
&lt;p&gt;既に見たようにどちらの方向にも変換できるのでまず&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;へ統一することを考えてみます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mes: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;null object&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;         mes
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{{{:?}}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これはライフタイム制約を満足しないエラーになります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;error[E0515]: cannot return value referencing temporary value
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   |          format!(&amp;quot;S{{{:?}}}&amp;quot;, self.vec).as_str()                                                        
&lt;&#x2F;span&gt;&lt;span&gt;   |          ------------------------------^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |          |
&lt;&#x2F;span&gt;&lt;span&gt;   |          returns a value referencing data owned by the current function
&lt;&#x2F;span&gt;&lt;span&gt;   |          temporary value created here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下のようにローカル変数&lt;code&gt;res&lt;&#x2F;code&gt;にバインドしても、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mes: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;null object&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;         mes
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{{{:?}}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec);
&lt;&#x2F;span&gt;&lt;span&gt;         res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ライフタイムが短すぎることには変わりはないので、エラーになります（&lt;code&gt;res&lt;&#x2F;code&gt;はヒープに置かれても所有者である&lt;code&gt;rep&lt;&#x2F;code&gt;からexitする時点で回収されてしまう）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;error[E0515]: cannot return value referencing local variable `res`
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   |          res.as_str()                                                        
&lt;&#x2F;span&gt;&lt;span&gt;   |          ---^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |          |
&lt;&#x2F;span&gt;&lt;span&gt;   |          returns a value referencing data owned by the current function
&lt;&#x2F;span&gt;&lt;span&gt;   |          `res` is borrowed here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なので、&lt;code&gt;format!&lt;&#x2F;code&gt;で作った&lt;code&gt;String&lt;&#x2F;code&gt;実体を呼び出し側に渡さないといけません。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;案2:_Stringへの統一&quot;&gt;案2: &lt;code&gt;String&lt;&#x2F;code&gt;への統一&lt;&#x2F;h3&gt;
&lt;p&gt;ということで&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;型の&lt;code&gt;mes&lt;&#x2F;code&gt;を返しているパスの型を変えることにします。関数の返値型を変えてコンパイルすると以下のようなエラーメッセージが表示されます。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;error[E0308]: mismatched types
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;main.rs:13:10
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   |   fn rep(&amp;amp;self) -&amp;gt; String {                                                                               
&lt;&#x2F;span&gt;&lt;span&gt;   |                    ------ expected `std::string::String` because of return type
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;   |          mes                                                                                           
&lt;&#x2F;span&gt;&lt;span&gt;   |          ^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |          |
&lt;&#x2F;span&gt;&lt;span&gt;   |          expected struct `std::string::String`, found `&amp;amp;str`
&lt;&#x2F;span&gt;&lt;span&gt;   |          help: try using a conversion method: `mes.to_string()`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ヘルプに従って修正すれば問題はなくなります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mes: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;null object&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;         mes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{{{:?}}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec);
&lt;&#x2F;span&gt;&lt;span&gt;         res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しかしこれは、必要とは思われないヒープでのオブジェクト生成をしているため、時間的にも空間的にも（できれば避けたい）コストをかけてしまっています。ゼロコストアブストラクションをうたうRustのプログラムとしては是非とも避けたいところです。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;案3:_型の包含&quot;&gt;案3: 型の包含&lt;&#x2F;h3&gt;
&lt;p&gt;この問題を解決するには「借用」と「実体」のどちらも返せるような&lt;code&gt;enum&lt;&#x2F;code&gt;を用意するという手が使えます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;借用でいいならなら借用を包む&lt;&#x2F;li&gt;
&lt;li&gt;実体が必要なら、実体を包む&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; 設計中（ライフタイム指定がまだついていない）
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;WrapStr {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;from_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;from_format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; WrapStr {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mes: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;null object&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;         WrapStr::from_str(mes)
&lt;&#x2F;span&gt;&lt;span&gt;     } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;         WraStr::from_format(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{{{:?}}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec))
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;こうすれば型の問題は解決するし、見かけ上構造体で包むコストは（おそらく）コンパイラの最適化中に何もしないコードに変換されることが期待できます。ということで&lt;code&gt;WrapStr&lt;&#x2F;code&gt;を追加定義すれば問題解決します。ポインタを含むのでライフタイム制約が必要かな。。。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Cow&quot;&gt;Cow&lt;&#x2F;h1&gt;
&lt;p&gt;しかし自分で定義するよりも、このような状況のための型がすでに標準ライブラリに用意されているのでそれを使いましょう。
それがClone on Write, &lt;code&gt;Cow&lt;&#x2F;code&gt;型です。これは以下のように定義されています。
https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Cow&amp;lt;&amp;#39;a, B&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    B: &amp;#39;a + ToOwned + ?Sized, 
&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Borrowed(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; B),
&lt;&#x2F;span&gt;&lt;span&gt;    Owned(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ToOwned&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::Owned),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ToOwned&lt;&#x2F;code&gt;は借用したデータから、所有権を持つ実体を構成することができるというトレイトです。
文字列関連では以下のようになっています。
https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;trait.ToOwned.html&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;trait.ToOwned.html
&lt;&#x2F;span&gt;&lt;span&gt;impl ToOwned for str
&lt;&#x2F;span&gt;&lt;span&gt;  type Owned = String
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F;&#x2F; Examples
&lt;&#x2F;span&gt;&lt;span&gt;  let s: &amp;amp;str = &amp;quot;a&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  let ss: String = s.to_owned();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;つまり&lt;code&gt;str&lt;&#x2F;code&gt;から&lt;code&gt;String&lt;&#x2F;code&gt;が作れると。これを見ながら&lt;code&gt;Cow&lt;&#x2F;code&gt;の定義の&lt;code&gt;B&lt;&#x2F;code&gt;を&lt;code&gt;str&lt;&#x2F;code&gt;に変換してやると以下のようになります。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;pub enum Cow&amp;lt;&amp;#39;a, str&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    str: &amp;#39;a + ToOwned + ?Sized,  &#x2F;&#x2F; 条件OK
&lt;&#x2F;span&gt;&lt;span&gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Borrowed(&amp;amp;&amp;#39;a str),
&lt;&#x2F;span&gt;&lt;span&gt;    Owned(String),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで、借用(&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;)は&lt;code&gt;Cow::Borrowed&lt;&#x2F;code&gt;で実体(&lt;code&gt;String&lt;&#x2F;code&gt;)は&lt;code&gt;Cow::Owned&lt;&#x2F;code&gt;で包んでやればいいことがわかりました。&lt;&#x2F;p&gt;
&lt;p&gt;最終的なプログラムはこうなります。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::borrow::Cow;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;S {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; Cow&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      Cow::Borrowed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Null S&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)                  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 場所は確保済み =&amp;gt; 借用したい
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      Cow::Owned(format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;S[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;]&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, self.vec)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 借用ではダメ =&amp;gt;実体を渡したい
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使う側では一回derefしてやれば借用であったか実体であったかを気にする必要はありません。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;   println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ちなみにderefしたものが何型になっているかというと、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; コンパイルできる
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; temp: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str = &amp;amp;*&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;rep&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;だそうです。文字列のスライスみたいですね。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;コストについて&quot;&gt;コストについて&lt;&#x2F;h3&gt;
&lt;p&gt;derefのコストは以下に引用したようにポインタ辿りだけなので、「軽量」と言ってしまっていいでしょう。&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;alloc&#x2F;borrow.rs.html#320&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;alloc&#x2F;borrow.rs.html#320
&lt;&#x2F;span&gt;&lt;span&gt;#[stable(feature = &amp;quot;rust1&amp;quot;, since = &amp;quot;1.0.0&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;impl&amp;lt;B: ?Sized + ToOwned&amp;gt; Deref for Cow&amp;lt;&amp;#39;_, B&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    type Target = B;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    fn deref(&amp;amp;self) -&amp;gt; &amp;amp;B {
&lt;&#x2F;span&gt;&lt;span&gt;        match *self {
&lt;&#x2F;span&gt;&lt;span&gt;            Borrowed(borrowed) =&amp;gt; borrowed,
&lt;&#x2F;span&gt;&lt;span&gt;            Owned(ref owned) =&amp;gt; owned.borrow(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;borrow.rs.html#212&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;borrow.rs.html#212
&lt;&#x2F;span&gt;&lt;span&gt;#[stable(feature &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;rust1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, since &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized&amp;gt; Borrow&amp;lt;T&amp;gt; for T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;        self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;borrow.rs.html#226&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;src&#x2F;core&#x2F;borrow.rs.html#226
&lt;&#x2F;span&gt;&lt;span&gt;#[stable(feature &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;rust1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, since &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized&amp;gt; Borrow&amp;lt;T&amp;gt; for &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;**&lt;&#x2F;span&gt;&lt;span&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JaNG version 1.0.2</title>
        <published>2020-08-14T00:00:00+00:00</published>
        <updated>2020-08-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-14-justanote-102/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-14-justanote-102/</id>
        
        <content type="html">&lt;p&gt;このブログの静的サイトジェネレータ（名前はまだない。とりあえず&#x27;JaNG&#x27;, &lt;em&gt;Just-A-Note Generator&lt;&#x2F;em&gt; にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;&quot;&gt;Observable&lt;&#x2F;a&gt;が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;githubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。&lt;&#x2F;li&gt;
&lt;li&gt;ところがjsonを読み込もうとすると &lt;code&gt;Cross-Access-Allow-Origin&lt;&#x2F;code&gt; の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるようにしてみたけど、それはどう考えてもかっこ悪い。&lt;&#x2F;li&gt;
&lt;li&gt;サーバに最初にデータを揃えて静的サイトの生成を始めるというのがどう考えても自然なので、asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 &lt;code&gt;nuxtServerInit&lt;&#x2F;code&gt;　をストアに追加しました。（追加するのも一苦労。actionsの中に書くのね。）この関数は最終的にcommitでstoreのデータを更新すればよいと。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; store&#x2F;index.js
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;actions &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;nuxtServerInit&lt;&#x2F;span&gt;&lt;span&gt;({ commit }) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;mutations&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;forEach&lt;&#x2F;code&gt; で呼び出す関数が &lt;code&gt;async&lt;&#x2F;code&gt; にできないことを理解するのに一苦労（まあ、&lt;code&gt;nuxtServerInit&lt;&#x2F;code&gt;の先頭に&lt;code&gt;async&lt;&#x2F;code&gt;を置きながら、forEachの無名関数にもおかなくていいのか &lt;strong&gt;うっすらと&lt;&#x2F;strong&gt; 疑問は感じてた）。
for文に書き直して、レンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでデータ取得問題がやっと解決。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; store&#x2F;index.js
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;actions &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;nuxtServerInit&lt;&#x2F;span&gt;&lt;span&gt;({ commit }) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;arr &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;entries&lt;&#x2F;span&gt;&lt;span&gt;(gist)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span&gt;arr) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;art &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;val[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(art.gistid &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        art.url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;`https:&#x2F;&#x2F;gist.github.com&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;art&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;owner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;art&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;gistid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= await &lt;&#x2F;span&gt;&lt;span&gt;axios.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;`${&lt;&#x2F;span&gt;&lt;span&gt;art&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}.json`&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(j.data &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          art.content &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;`could not load ${&lt;&#x2F;span&gt;&lt;span&gt;art&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}.json`
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          art.content &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;j.data.div
&lt;&#x2F;span&gt;&lt;span&gt;          art.description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;j.data.description
&lt;&#x2F;span&gt;&lt;span&gt;          art.created_at &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;j.data.created_at.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;mutations&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, arr)
&lt;&#x2F;span&gt;&lt;span&gt;  },
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;取ってきたjsonの中のhtmlセグメント中の &lt;code&gt;iframe&lt;&#x2F;code&gt; の大きさの取り扱いにも一苦労。
jupyter notebookを貼り付けたgistだけは&lt;code&gt;height: auto&lt;&#x2F;code&gt;が効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、&lt;code&gt;height: 2000px;&lt;&#x2F;code&gt;にしてしまうクラスを使うようにしました。（青い枠線が表示される場合があるのはデバッグ中の設定の名残りです。）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; pages&#x2F;_year&#x2F;_slug&#x2F;ghc&#x2F;index.vue &amp;gt; template
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;div :id&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$route.params.slug&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;githubgist-content&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{ &amp;#39;githubgist-frame&amp;#39;: article.frame }&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;span v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;article.content&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;span&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;後は&lt;code&gt;axios.get&lt;&#x2F;code&gt; ではデータそのものではなくレスポンスが返ってくるので&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;json &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;axios.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt;((res) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;res.data })
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;でなければいけない問題。これもちょっとはまりました。&lt;&#x2F;p&gt;
&lt;p&gt;一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。&lt;&#x2F;p&gt;
&lt;p&gt;さて、なんでgithubの返す埋め込み用javascriptをそのまま使うのをやめたんだっけ？ 最初に何も考えずにObservableのコードを流用したら動かなかったのは確かなんだけど。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NixOS on Big Sur</title>
        <published>2020-08-07T00:00:00+00:00</published>
        <updated>2020-08-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur/</id>
        
        <content type="html">&lt;h3 id=&quot;Big_Sur以前&quot;&gt;Big Sur以前&lt;&#x2F;h3&gt;
&lt;p&gt;&#x2F;etc&#x2F;synthetic.conf　に&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;を追加してmountしていた。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Big_Sur&quot;&gt;Big Sur&lt;&#x2F;h3&gt;
&lt;p&gt;なんだかmountしてくれないので &lt;code&gt;&#x2F;nix&lt;&#x2F;code&gt; をシンボリックリンクに変更して対応することにした。
そのため、&#x2F;etc&#x2F;synthetic.conf を&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix	&#x2F;Volumes&#x2F;Nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;に編集。さらにどこかで&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;export NIX_IGNORE_SYMLINK_STORE=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;を実行して、リンクを辿ってくれるようにすればいいようだ。&lt;&#x2F;p&gt;
&lt;p&gt;それにしても結構Gnomeな見かけだなぁ。。。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-08-09&quot;&gt;2020-08-09&lt;&#x2F;h3&gt;
&lt;p&gt;&#x2F;usr&#x2F;lib&#x2F;system&#x2F;libcache.dylib がないのでrustプログラムがコンパイルできなくなっている。&lt;&#x2F;p&gt;
&lt;p&gt;Cコンパイラも動かないのでemacs27も作れない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-08-11&quot;&gt;2020-08-11&lt;&#x2F;h3&gt;
&lt;p&gt;結果としてリンクにするのがNixOSをインストールするためのベストプラクティスみたいだ。
以前は&#x2F;Volumes&#x2F;Nix をリブートするたびに手で&#x2F;nixにマウントしなおしていたのが、その必要がなくなった。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-08-17&quot;&gt;2020-08-17&lt;&#x2F;h3&gt;
&lt;p&gt;コンパイルできない問題はお手上げ状態みたいです。
https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;91748&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Jul.</title>
        <published>2020-07-31T00:00:00+00:00</published>
        <updated>2020-07-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-31-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-31-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;UNSATlog&quot;&gt;UNSATlog&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;今月のキーワード&quot;&gt;今月のキーワード&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Debugging Vivification&lt;&#x2F;li&gt;
&lt;li&gt;Restricted Stabilization&lt;&#x2F;li&gt;
&lt;li&gt;Maximum LBD of Dependency Graph&lt;&#x2F;li&gt;
&lt;li&gt;Duplicated Bin-clause Checking&lt;&#x2F;li&gt;
&lt;li&gt;Change of Restart Point&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;Vivification_update&quot;&gt;Vivification update&lt;&#x2F;h2&gt;
&lt;p&gt;先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;節の重複検査&quot;&gt;節の重複検査&lt;&#x2F;h2&gt;
&lt;p&gt;その修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Fixed_or_Solved_-&amp;gt;_Asserted&quot;&gt;Fixed or Solved -&amp;gt; Asserted&lt;&#x2F;h2&gt;
&lt;p&gt;vivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Restart_revised&quot;&gt;Restart revised&lt;&#x2F;h2&gt;
&lt;p&gt;vivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;節サイズ4バイト減&quot;&gt;節サイズ4バイト減&lt;&#x2F;h2&gt;
&lt;p&gt;その話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;リスタートIF作り替え&quot;&gt;リスタートIF作り替え&lt;&#x2F;h2&gt;
&lt;p&gt;SplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Rephase_to_the_best&quot;&gt;Rephase to the best&lt;&#x2F;h2&gt;
&lt;p&gt;stabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Stabilizationのバリエーション&quot;&gt;Stabilizationのバリエーション&lt;&#x2F;h2&gt;
&lt;p&gt;何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）&lt;&#x2F;li&gt;
&lt;li&gt;そうでなければリスタートを抑制&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;に変えてもよさそうに思える。さらに言えば&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;stabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）&lt;&#x2F;li&gt;
&lt;li&gt;そうでなければ浅い矛盾を見つけるため従来法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;としてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;&#x2F;h2&gt;
&lt;p&gt;おまけにもう一つ。&lt;a href=&quot;https:&#x2F;&#x2F;satcompetition.github.io&#x2F;2020&#x2F;&quot;&gt;今年のSATの国際会議&lt;&#x2F;a&gt;の&lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;book&#x2F;10.1007&#x2F;978-3-319-24318-4&quot;&gt;予稿集&lt;&#x2F;a&gt;がいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Links&quot;&gt;Links&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;pull&#x2F;56&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;sat2020.idea-researchlab.org&#x2F;competitions&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;satcompetition.github.io&#x2F;2020&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;link.springer.com&#x2F;book&#x2F;10.1007&#x2F;978-3-319-24318-4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Swiftのfallthroughについて</title>
        <published>2020-07-28T00:00:00+00:00</published>
        <updated>2020-07-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;The Swift Programming Language -- Swift 5.3 Edition (beta)&lt;&#x2F;em&gt; を読んでいて、&lt;code&gt;fallthrough&lt;&#x2F;code&gt; に関するちょっと信じられない記述を目にした。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;playgroundで実行してみた。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span&gt; x {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;: print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fallthrough
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;: print(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実行すると&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;だと。記述は間違ってなかった@_@。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-08-30&quot;&gt;2020-08-30&lt;&#x2F;h1&gt;
&lt;p&gt;なんてことを書いてから一ヶ月経ちますが、その間にあったLinux 5.9での大量のコード修正の話題を読んで、やっと「C言語がそもそもそうだった」ということを思い出しました。
原典に忠実なだけだったのか。うーん。しまった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s new in CryptoMiniSat 5.8.0</title>
        <published>2020-07-28T00:00:00+00:00</published>
        <updated>2020-07-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580/</id>
        
        <content type="html">&lt;p&gt;もう今年のcompetition終わっていた。&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;www.msoos.org&#x2F;2020&#x2F;07&#x2F;cryptominisat-5-8-0-released&#x2F;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Guass-Jordan Elimination とは? 変数ペアを作るのだろうか？ XOR制約がわかってないが他のソルバではどうなんだろう&lt;&#x2F;li&gt;
&lt;li&gt;CaDiCaL風のtarget phase。やはりやる価値があるのか。読み間違えているかなあ。&lt;&#x2F;li&gt;
&lt;li&gt;Local search solver -- ふーむ、ここはまだ全然手を付けてない&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;どうも、次に手をつけるべきは、うーむlocal search solverかなあ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>まとめて借用</title>
        <published>2020-07-25T00:00:00+00:00</published>
        <updated>2020-08-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type/</id>
        
        <content type="html">&lt;p&gt;オブジェクトからフィールドを借用したい。
借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。
よくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Box&quot;&gt;Box&lt;&#x2F;h3&gt;
&lt;p&gt;困った時は一旦スタックに持っていく、そのために &lt;code&gt;Box&lt;&#x2F;code&gt; を使う、という定石を使ってみるとこうなる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Export&amp;lt;&amp;#39;a, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Export&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Restarter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Box&lt;&#x2F;span&gt;&lt;span&gt;::from((&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.asg.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.lbd.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.mld.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.mva.ema))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;問題なくコンパイルできる。使うときは一回derefする。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(rst_asg, rst_lbd, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *&lt;&#x2F;span&gt;&lt;span&gt;rst.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;タプル&quot;&gt;タプル&lt;&#x2F;h3&gt;
&lt;p&gt;タプルに置き換えても問題ない。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Export&amp;lt;&amp;#39;a, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Export&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Restarter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;exports&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2) {
&lt;&#x2F;span&gt;&lt;span&gt;	    (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.asg.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.lbd.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.mld.ema, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.mva.ema)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;CoWs_in_tuple&quot;&gt;CoWs in tuple&lt;&#x2F;h3&gt;
&lt;p&gt;さらに一般化して定数データもコピーなしで返すために&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot;&gt;CoW&lt;&#x2F;a&gt;でくるんでも全然問題ない。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::borrow::Cow;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Export&amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; (Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;, Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Export&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Restarter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; (Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;, Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        (Cow::Owned(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.asg.ema), Cow::Owned(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.lbd.ema))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただし、これは2要素タプルに特定してしまっている。&lt;&#x2F;p&gt;
&lt;p&gt;一般化した問題に戻して、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Export&amp;lt;&amp;#39;a, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; T;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とするなら、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Export&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, (Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2&amp;gt;, Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2&amp;gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Restarter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;export&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a &lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; (Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2&amp;gt;, Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; Ema2&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        (Cow::Owned(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.asg.ema), Cow::Owned(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.lbd.ema))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とすればいい。どれも全く同じことだった。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;エンバグ&quot;&gt;エンバグ&lt;&#x2F;h1&gt;
&lt;p&gt;なお、これを&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Export&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, (Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;, Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Ema2&amp;gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Restarter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;などとして、ライフタイム制約が不十分なものに（うっかり）してしまうと、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0308]: method not compatible with trait
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;solver&#x2F;restart.rs:833:5
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;833 |     fn export(&amp;amp;&amp;#39;a self) -&amp;gt; (Cow&amp;lt;&amp;#39;a, &amp;amp;&amp;#39;a Ema2&amp;gt;, Cow&amp;lt;&amp;#39;a, &amp;amp;&amp;#39;a Ema2&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    = note: expected fn pointer `fn(&amp;amp;&amp;#39;a solver::restart::Restarter) -&amp;gt; (std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;types::Ema2&amp;gt;, std::borrow::Cow&amp;lt;&amp;#39;_, _&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;               found fn pointer `fn(&amp;amp;&amp;#39;a solver::restart::Restarter) -&amp;gt; (std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;&amp;#39;a types::Ema2&amp;gt;, std::borrow::Cow&amp;lt;&amp;#39;_, _&amp;gt;)`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;だとか、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0308]: method not compatible with trait
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;solver&#x2F;restart.rs:833:5
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;833 |     fn export(&amp;amp;&amp;#39;a self) -&amp;gt; (Cow&amp;lt;&amp;#39;a, &amp;amp;Ema2&amp;gt;, Cow&amp;lt;&amp;#39;a, &amp;amp;Ema2&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    = note: expected fn pointer `fn(&amp;amp;&amp;#39;a solver::restart::Restarter) -&amp;gt; (std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;types::Ema2&amp;gt;, std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;types::Ema2&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;               found fn pointer `fn(&amp;amp;&amp;#39;a solver::restart::Restarter) -&amp;gt; (std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;&amp;#39;a types::Ema2&amp;gt;, std::borrow::Cow&amp;lt;&amp;#39;_, &amp;amp;&amp;#39;a types::Ema2&amp;gt;)`
&lt;&#x2F;span&gt;&lt;span&gt;note: the lifetime `&amp;#39;_` as defined on the impl at 832:33...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;と言われてしまうが、まあそりゃ当たり前のことである。&lt;&#x2F;p&gt;
&lt;p&gt;以下は単なる文法間違いがもたらしたエラー。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error: lifetime in trait object type must be followed by `+`
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;types.rs:32:38
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;32 |     fn exports(&amp;amp;&amp;#39;a self) -&amp;gt; (CoW(&amp;#39;a, Ema), CoW(&amp;#39;a, Ema));
&lt;&#x2F;span&gt;&lt;span&gt;   |                                  ^^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ちゃんとライフタイム制約まで目を配りましょうというだけのことでした。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s KISSAT</title>
        <published>2020-07-21T00:00:00+00:00</published>
        <updated>2020-07-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-21-what-is-kissat/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-21-what-is-kissat/</id>
        
        <content type="html">&lt;p&gt;SAT Competition 2020の予稿集より。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;変数のiteratorを使用するようになった&lt;&#x2F;li&gt;
&lt;li&gt;なんかWatcherのメモリ使用量が減った&lt;&#x2F;li&gt;
&lt;li&gt;ただしtagつけるので変数のインデックスはCPUアーキテクチャギリギリのビット幅ではなく、28ビットで表現できるところまで減少する。これは約2億7000万変数を意味する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;など。
TBC&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Similarity of Clauses</title>
        <published>2020-07-18T00:00:00+00:00</published>
        <updated>2021-01-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-18-summer-homework/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-18-summer-homework/</id>
        
        <content type="html">&lt;p&gt;動的なリスタートは本当に有効なのだろうか？
自分がやってきた種々の実験結果からはLubyリスタートとの差は（有意）にあるように思うが、
一方でせいぜい定数倍の差のようにも思える。
パラメータを増やせば増やすほど手が届かない部分が増えてしまうので、もうそろそろ色々カウンターを突っ込んだりするくらいならLubyでいいのではいう方向にかなり傾いている。
そもそもGlucose流のLBDのEMAを元にしたforce restartが有効であるためには学習節のよさは独立分布ではないことが前提なんだけど、これは本当なんだだろうか？
どこかで評価してあっただろうか？
手っ取り早くブランチ切って自分でやってみた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;実験対象: UUF250 100問&lt;&#x2F;li&gt;
&lt;li&gt;EMA補正を掛けた Slpr-0.6.2 で rst-lbd-len を色々変えて、学習節が追加されるたびに(LBDのEMA, 新学習節のLBD)を出力。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# 2021 branchを使用
&lt;&#x2F;span&gt;&lt;span&gt;$ parallel &amp;#39;splrl-lbd {}&amp;#39; ::: uuf250*.cnf
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo run --bin ??? &amp;lt; uuf*.csv &amp;gt; LBDn.csv　#　新学習節LBDの分布を平均値に置き換え
&lt;&#x2F;span&gt;&lt;span&gt;$ 適当にプロット
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;まずUU250に対するデフォルト設定において、矛盾発生の決定レベルに対するLBDをプロットすると以下のようになる。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-cDL-ave.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;矛盾発生決定レベルとLBDの間には相関はほぼない。
どのような発展においてもそれなりによい学習節が生成されることを考慮しなければならない。
下図はそのヒートマップである。実際には大きな決定レベルは出現頻度が少ない。
極端に高いレベルを避けるよりも持続する高レベルを避けることが重要となるのだろう。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-cDL-heatmap.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;次にEMAの長さを24（デフォルト）,5, 3と変えて、LBDのEMAに対する新規学習節のLBDをプロットしてみたのが以下の図。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-LBD-ave.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;決定レベルと違い、極めて強い相関が得られたことからLBDのEMAはよい未来予測になっていると言える。
さらに長さを長くする方がより良い結果が得られる頃から同じような長さの節がしばらく生成されるという傾向があると言えよう。&lt;&#x2F;p&gt;
&lt;p&gt;同じデータを平均値ではなくヒートマップで可視化してみた。
上図が矛盾発生ごとにリスタートを掛けて全く連続性を排除したもので、下図はリスタートをしなかったものである。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-rlt0-heatmap.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2021&#x2F;01-26&#x2F;UUF250-norestart-heatmap.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;後者の方がより小さいLBDが生成されている。実際に実際実行時間も後者の方が圧倒的に短い。
無作為な探索空間の選択よりもLBD値を使った戦略の方が、LBDの小さな領域に長く滞在できていると思われる。&lt;&#x2F;p&gt;
&lt;p&gt;両者はリスタートに関して両極端な戦略になっている。
なぜ、no-restartの方がもう一つの極端なanytine-restart戦略より圧倒的によいのだろうか。
activityのメカニズムから矛盾解消の対象になった変数は再び選択されやすく、したがってassertされるまで集中的に選択されることが期待される。
一方、anytime restartは（バックトラックと比べて網羅的再構築なので）対象が逸脱しやすく、activityの恩恵を十分に得ることができないからだろう。
初期状態はともかく、矛盾はそれなりに十分に深く調べて（assertを見つける努力をして）からリスタートすべきである。&lt;&#x2F;p&gt;
&lt;p&gt;ということで、ヒートマップにおいてno-restart の方が良い結果を示しているのは、assertがより速く求解が進むことで、より簡単な問題を長い間、対象にできていたからではないだろうか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;結論&quot;&gt;結論&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;探索空間はLBDで分類できるクラスタから構成されている。&lt;&#x2F;li&gt;
&lt;li&gt;より良いクラスタを選ぶことは実行速度の改善につながる。&lt;&#x2F;li&gt;
&lt;li&gt;LBDのEMAはクラスタを選ぶためのよい尺度となっている。少なくともランダム選択よりはよい。&lt;&#x2F;li&gt;
&lt;li&gt;突発的な大きなLBDを持つ節を避けるのではなく、平均EMAが大きなグループ（クラスタ）に突入している時に（できれば早期に）脱出できるというのがGlucose流の動的リスタートの持つ効果である。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;本文を書いたことで後ろに回されてしまったイントロとベルリンの壁&quot;&gt;本文を書いたことで後ろに回されてしまったイントロとベルリンの壁&lt;&#x2F;h1&gt;
&lt;p&gt;論文書くのは仕事じゃない。しかし一年に一度くらいは開発ではなくて、文章をまとめる一ヶ月があってもいいかもね。そもそも今年もCompetitionに出しそびれたし。それに夏といえば、宿題やるのが日本の文化。
9月1日提出に間に合うようになんかしよう。爆音で音楽聴きながらlatex的なことをしよう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-07-24&quot;&gt;2020-07-24&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;旧題: Restart as A Multi-Armed Bandid Problem&lt;&#x2F;li&gt;
&lt;li&gt;新題: Lives of Clauses&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;2020-07-27&quot;&gt;2020-07-27&lt;&#x2F;h1&gt;
&lt;p&gt;0.4.2がいい結果を出しそうなので、それをリリースしてから、なぜ0.4.2がいいのかを説明できるようなものにしよう。
&amp;quot;Lives of Clauses&amp;quot;はいいタイトル。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-08-12&quot;&gt;2020-08-12&lt;&#x2F;h1&gt;
&lt;p&gt;Splr-0.4.2のリリースがずるずると延びてしまっていまだにとりかかれてない。。。。
うーん、自分で言い出したくせに8月31日の1日でやっつけることになるのか。
コロナのせいにできるような言い訳を考えておこう。。。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-08-24&quot;&gt;2020-08-24&lt;&#x2F;h1&gt;
&lt;p&gt;あと数日でSplr-0.4.2 改め Splr-0.5.0 がリリースできる。
そして、もう数日しか夏休みは残ってないんですけどどうしましょう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-09-01&quot;&gt;2020-09-01&lt;&#x2F;h1&gt;
&lt;p&gt;今年の夏休みは9月下旬にはじまるという話を聞いたので、まだ手をつけない。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-01-13&quot;&gt;2021-01-13&lt;&#x2F;h1&gt;
&lt;p&gt;そろそろ手が付けられそうになってきたので、テーマ案を考える。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;案1: 学習節の一生&lt;&#x2F;li&gt;
&lt;li&gt;案2: 意外に影響が大きいvivicationの効果測定&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ずっと案1のつもりだったけど、今日急に案2もいいかもと思い出した。
どちらにしろ今週中には始めよう。
夏休みの宿題を1月に始めるという意味で非常事態を宣言するのだ。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-01-14&quot;&gt;2021-01-14&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;commit&#x2F;55c6161a17b18752d8c33f9a5de9ae8e25cc88fc&quot;&gt;Splr-0.6.0&lt;&#x2F;a&gt; リリースした。夏休み開始。 &lt;&#x2F;p&gt;
&lt;h1 id=&quot;2021-01-18&quot;&gt;2021-01-18&lt;&#x2F;h1&gt;
&lt;p&gt;0.6.0はリリースしたけどどうせなら0.6.2をリリースしてから開始しよう。明日の予定。テーマはマルコフ性。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vivification of a CNF formula</title>
        <published>2020-07-05T00:00:00+00:00</published>
        <updated>2020-07-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-06-20-vivification/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-06-20-vivification/</id>
        
        <content type="html">&lt;p&gt;Vivification がなんなのか、日本語で探しても出てこないので以下の論文をまとめてみた。
（最新の話かと思っていたけど2008年とは。。。）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C. Piette, Y. Hamadi, and L. Saïs, &amp;quot;Vivifying propositional clausal formulae,” &lt;em&gt;Front. Artif. Intell&lt;&#x2F;em&gt;. Appl., vol. 178, pp. 525–529, 2008.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Splr でいうところの &lt;code&gt;processor&lt;&#x2F;code&gt; が節数に対する制約内での網羅的な変数除去と節包摂(clause subsumption)とを実行するのに対し、vivification は（その節に「対応」する割り当てを仮定して）propagateを行った結果を用いて節の包摂方針を決めるというもの。
節長を減らす方向でのみ置換するので、（節数の増加と引き換えに）不要な複雑さの導入を抑えることができるらしい。
効果は1割程度のようである。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに &#x27;vivify&#x27; は論文では&#x27;shorten existing clauses&#x27;の意味で使われているが、辞書で引くと：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;verb: enliven or animate: outings vivify learning for children.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;とのこと。ぼやけていた制約の強化ということで、日本語になっているビビッドからも想像できる感じなんだろう。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;cover image: https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1506884403171-cdb32baec15f&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;アルゴリズム（上記論文より引用）&quot;&gt;アルゴリズム（上記論文より引用）&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-06-20_algorithm1.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;6行目で $c$ を $\Sigma$ から削除して、30行目で戻している。しかし $\Sigma$ に対する伝播は行わないので、30行目まで残しておいても構わない。&lt;&#x2F;li&gt;
&lt;li&gt;20行目の解釈： 節 $c$ が存在しない $\Sigma_b$ において、リテラル $l$ に対して決定による割当てを行うと矛盾した（11行目）。しかし、学習節 $c_l$ は節 $c$ に含まれないなら（16行目）。これは矛盾は別の節集合によって生じたことを意味する。従ってこの節は冗長かもしれない。もし学習節 $c_l$ が節 $c$ より小さいなら（17行目）、これは節 $c$ より強い制約であるので $\Sigma_b$ に追加する。そして節 $c$ 自身も $\Sigma_b$ に戻した上で、節 $c$ に対する検査を終了させる（矛盾節を含む式と学習節を含む式とは充足可能性において等価である（矛盾の回避は割当て列に関する枝刈であって論理式の等価変換であることには違いない））。そうでないなら（19行目）、つまり節 $c$ （に含まれるリテラル集合）は今回の矛盾とは関係ないが今回の矛盾によって吸収できるとは言い切れない場合には、節 $c$ に含まれていたリテラル集合 $c_b$ を $\Sigma_b$ に追加し（代わりに $c$ を削除し）て節 $c$ に対する処理を終了する（より強い制約に置き換えている？？）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;$\exists i \in {1, \cdots, n-1}; s.t.; \Sigma\backslash{c} \cup {\neg l_1, \cdots, \neg l_i} \models_{UP} \bot$&lt;br&gt; In this case, we have $\Sigma\backslash{c} \models_{UP} c&#x27;$ with $c&#x27; = (l_1 \vee \cdots \vee l_i)$. This new clause $c&#x27;$ strictly subsumes $c$. Hence, the original clause can be substituted by the new deduced one. Obviously, $c&#x27;$ is not necessarily minimally redundant modulo UP. Indeed, another ordering on the literals ${l_1, l_2, \cdots, l_i}$ might lead to an even shorter sub-clause. Thanks to a conflict analysis, the deduced sub-clause $c&#x27;$ could be shortened again leading to an even smaller sub-clause. Indeed, a new clause η can be generated by a complete traversal of the implication graph associated to $\Sigma$ and to the assignments of the literals ${\neg l_1, \cdots, \neg l_i}$. The complete traversal of the implication graph ensure that the clause η contains only literals from $c&#x27;$. Thereby, η is a sub-clause of $(l_1 \vee \cdots \vee l_i)$.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;23, 27行目の型が合わないんだけどなあ。念のためもう一本読んでおいた方がよさそうだ。&lt;&#x2F;li&gt;
&lt;li&gt;$A \leftarrow A \cup B$ は &lt;code&gt;A.push(B);&lt;&#x2F;code&gt; ではなく &lt;code&gt;if !A.contains(&amp;amp;B) { A.push(B); }&lt;&#x2F;code&gt; であることに注意。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;もう少し説明を加えるとこういう感じ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; 不動点になるまで
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; sigma中の全ての節cに対して
&lt;&#x2F;span&gt;&lt;span&gt;        現在のsigmaのコピーをenvとする
&lt;&#x2F;span&gt;&lt;span&gt;        cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while !&lt;&#x2F;span&gt;&lt;span&gt;shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb                             &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; == until shorten || c == cb { .. }
&lt;&#x2F;span&gt;&lt;span&gt;            c\cbから適当にリテラルlを選ぶ
&lt;&#x2F;span&gt;&lt;span&gt;            cbにlを追加する
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;lを割当て伝播させる
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; 矛盾しているなら
&lt;&#x2F;span&gt;&lt;span&gt;                その学習節をclとする
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; 学習節clが元々の節cを包摂するなら
&lt;&#x2F;span&gt;&lt;span&gt;                    clをsigmaに追加; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cよりclの方が節長が短いなら
&lt;&#x2F;span&gt;&lt;span&gt;                        clをsigmaに追加; cb &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; これは終了条件, cは後でsigmaに追加される
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb   　　　                         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ここがわからない
&lt;&#x2F;span&gt;&lt;span&gt;                        cbをsigmaに追加; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cの残りに含まれるリテラルlsの中で、env中に含まれるものがあるなら
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cの残りがls以外のリテラルを含んでいたら
&lt;&#x2F;span&gt;&lt;span&gt;                        cbにlsだけを追加した節を sigma に追加; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cの残りに含まれるリテラルlsの中で、env中にその反リテラルが含まれるものがあるなら
&lt;&#x2F;span&gt;&lt;span&gt;　　　　　　　     cからリテラルlsを除いてsigma に追加; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; shorted
&lt;&#x2F;span&gt;&lt;span&gt;                sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;                change &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;Splr実装案&quot;&gt;Splr実装案&lt;&#x2F;h1&gt;
&lt;p&gt;これを何も考えずにRustで書いてみるとこんな感じだろうか。
Splr だと単位節は &lt;code&gt;cdb&lt;&#x2F;code&gt; に入れられないので CNF というよりも&lt;code&gt;(asg, cdb)&lt;&#x2F;code&gt; を持ち回るとした方が現実的かも。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; Vivification of a given CNF formula, returning a vivified CNF formula
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; Note: `remove` used here is a non-destructive function (`Fn&amp;lt;T&amp;gt;([T]) -&amp;gt; Vec&amp;lt;T&amp;gt;`).
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;sigma: (AssginStack, ClauseDB)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; env: (AssignStack, ClauseDB);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; shortened: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; cb: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; ci: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; change {
&lt;&#x2F;span&gt;&lt;span&gt;        change &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; sigma[ci];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let c_len =&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            env &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(ci);
&lt;&#x2F;span&gt;&lt;span&gt;            cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while !&lt;&#x2F;span&gt;&lt;span&gt;shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cx &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_items&lt;&#x2F;span&gt;&lt;span&gt;(cb);
&lt;&#x2F;span&gt;&lt;span&gt;                l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;select_literal&lt;&#x2F;span&gt;&lt;span&gt;(cx);
&lt;&#x2F;span&gt;&lt;span&gt;                cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(l);                                     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; cb = cb ∪ {l};
&lt;&#x2F;span&gt;&lt;span&gt;                env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_assignment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;l);                         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σb ← (Σb ∪ {¬l})
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;() {             &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ⊥ ∈ UP(Σb)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; learnt &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;conflict_analyze&lt;&#x2F;span&gt;&lt;span&gt;();            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; returns a learnt clause
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(|l| c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;includes&lt;&#x2F;span&gt;&lt;span&gt;(l)) {   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; cl ⊂ c
&lt;&#x2F;span&gt;&lt;span&gt;                        sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(learnt);               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σ ← Σ ∪ {cl}
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== c_len &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(learnt);           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σ ← Σ ∪ {cl}
&lt;&#x2F;span&gt;&lt;span&gt;                            cb &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb {
&lt;&#x2F;span&gt;&lt;span&gt;                            sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(cb);               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σ ← Σ ∪ {cb}
&lt;&#x2F;span&gt;&lt;span&gt;                            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(l)) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ∃(ls ∈ (c\cb))
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; (c\cb) &#x2F;= {ls}
&lt;&#x2F;span&gt;&lt;span&gt;                            sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ls));      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σ ← Σ ∪ {cb ∪ {ls}} ;
&lt;&#x2F;span&gt;&lt;span&gt;                            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;l)) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ∃(¬ls ∈ (c\cb))
&lt;&#x2F;span&gt;&lt;span&gt;                        sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(ls));         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σ ← Σ ∪ {c\{ls}}
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; shortened {
&lt;&#x2F;span&gt;&lt;span&gt;                    sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;                    change &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; return sigma;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2020-06-23&quot;&gt;2020-06-23&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;AssignStack&lt;&#x2F;code&gt; や &lt;code&gt;ClauseDB&lt;&#x2F;code&gt; のコピーはコストが大きいので $\Sigma$ だけで対応したい。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$\Sigma$ と &lt;code&gt;env&lt;&#x2F;code&gt; の違いは$l$の割り当てをもつかどうか。これは割り当てをキャンセルできればいいはず。&lt;&#x2F;li&gt;
&lt;li&gt;内側のwhile文中で $\Sigma$ に対して節や割り当てを追加しているので、これを遅延させる。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;&#x2F;code&gt;, &lt;code&gt;conflict_analysis&lt;&#x2F;code&gt;, &lt;code&gt;cancel_until&lt;&#x2F;code&gt;を呼び出すので変数および節の活性度が影響を受ける。どうしたものか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;sigma: (AssginStack, ClauseDB)) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; change {
&lt;&#x2F;span&gt;&lt;span&gt;        change &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; ci: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; clauses: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; sigma[ci];
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let c_lits =&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let c_len =&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dl &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;decision_level&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(ci);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; cb: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while !&lt;&#x2F;span&gt;&lt;span&gt;shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cx &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_items&lt;&#x2F;span&gt;&lt;span&gt;(cb);
&lt;&#x2F;span&gt;&lt;span&gt;                l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;select_literal&lt;&#x2F;span&gt;&lt;span&gt;(cx);
&lt;&#x2F;span&gt;&lt;span&gt;                cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(l);                                     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; cb = cb ∪ {l};
&lt;&#x2F;span&gt;&lt;span&gt;                sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;l);                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Σb ← (Σb ∪ {¬l})
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;() {           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ⊥ ∈ UP(Σb)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; learnt &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;conflict_analyze&lt;&#x2F;span&gt;&lt;span&gt;();            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; returns a learnt clause
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(|l| c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;includes&lt;&#x2F;span&gt;&lt;span&gt;(l)) {   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; cl ⊂ c
&lt;&#x2F;span&gt;&lt;span&gt;                        clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(learnt);                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; MODIFIED: Σ ← Σ ∪ {cl}
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== c_len &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(learnt);               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; MODIFIED: Σ ← Σ ∪ {cl}
&lt;&#x2F;span&gt;&lt;span&gt;                            cb &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; cb {
&lt;&#x2F;span&gt;&lt;span&gt;                            clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(cb);                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; MODIFIED: Σ ← Σ ∪ {cb}
&lt;&#x2F;span&gt;&lt;span&gt;                            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(l)) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ∃(ls ∈ (c\cb))
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; (c\cb) &#x2F;= {ls}
&lt;&#x2F;span&gt;&lt;span&gt;                            clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(cb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ls));          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; MODIFIED: Σ ← Σ ∪ {cb ∪ {ls}} ;
&lt;&#x2F;span&gt;&lt;span&gt;                            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;l)) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ∃(¬ls ∈ (c\cb))
&lt;&#x2F;span&gt;&lt;span&gt;                        clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(ls));             &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; MODIFIED: Σ ← Σ ∪ {c\{ls}}
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;shortened {
&lt;&#x2F;span&gt;&lt;span&gt;                    sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;c_lits&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    change &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(dl);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;clauses {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_assignment&lt;&#x2F;span&gt;&lt;span&gt;(c[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    sigma.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでどうだろうか。実装してみなくては。&lt;&#x2F;p&gt;
&lt;p&gt;こうしてみると、統計的ソルバの手法みたい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-06-24&quot;&gt;2020-06-24&lt;&#x2F;h2&gt;
&lt;p&gt;めちゃくちゃ重い！ vivifyに10000秒くらい掛かりそうだ。
節に含まれるリテラル全てに対して伝播検査をしているのだから当然ではある。
とりあえず先頭のリテラルだけの伝播にしてみたのだが、それでも論外。
&lt;code&gt;propagate&lt;&#x2F;code&gt;で矛盾が検出されたときの依存グラフをキャッシュに残すようにするとどうだろうか。。。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conflict_analyze&lt;&#x2F;code&gt;のカスタムバージョンが必要 -- TODO&lt;&#x2F;li&gt;
&lt;li&gt;cidが GCで変わってしまう -- しかしこれは &lt;code&gt;shortened&lt;&#x2F;code&gt; の時にpurgeすればいい。&lt;&#x2F;li&gt;
&lt;li&gt;purgeされるリテラルが多すぎてヒット率が低いのではないか -- no idea&lt;&#x2F;li&gt;
&lt;li&gt;矛盾が発生する場合は結果をキャッシュできるが、そうでない場合は有用ではないのでは -- うーむ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ConflictDep &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashMap&amp;lt;Lit, (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, HashSet&amp;lt;ClauseId&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt;)&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ConflictDep {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, l: Lit) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, l: Lit, ...) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;purge&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, l: Lit) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2020-06-26&quot;&gt;2020-06-26&lt;&#x2F;h2&gt;
&lt;p&gt;もう少し軽いキャッシュを実装してみた。
無矛盾時の処理をサボっても論理的には間違いではないので、一度調べたリテラルの伝播結果をキャッシュすると(assign $\to$ propagate $\to$ cancel_until)の一連の処理が減らせる。
とにかく網羅速度を上げなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-06-27&quot;&gt;2020-06-27&lt;&#x2F;h2&gt;
&lt;p&gt;vivificationは&lt;code&gt;propagate&lt;&#x2F;code&gt;や&lt;code&gt;cancel_until&lt;&#x2F;code&gt;など多くの機能を流用しているが、sandbox化しなくていいだろうか。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;各種計数カウンタは切り離すべき&lt;&#x2F;li&gt;
&lt;li&gt;変数活性度は取り込むべき。理由はどうであれ伝播の結果わかった統計情報なのだから。&lt;&#x2F;li&gt;
&lt;li&gt;ただし変数活性度の計算にはいくつかのカウンタは正しく動いている（更新される）ことが必要なので、計数カウンタを止めたサンドボックスを作るよりもvivify後に増分をキャンセルすることが必要かも。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2020-06-29&quot;&gt;2020-06-29&lt;&#x2F;h2&gt;
&lt;p&gt;アルゴリズムの理解進展。いろいろ突っ込みどころを見つけて、反映したバージョンがこちら。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;23行目と27行目が同時に成立することはない&lt;&#x2F;li&gt;
&lt;li&gt;30行目はwhileの中に入れる必要はない&lt;&#x2F;li&gt;
&lt;li&gt;キャッシュは意味がない。多くの場合すぐに&lt;code&gt;break&lt;&#x2F;code&gt;しているから。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(asg: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AssignStack, cdb: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; ClauseDB) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; changed: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; changed {
&lt;&#x2F;span&gt;&lt;span&gt;        changed &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;clauses {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; clits &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; new_clause: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;            cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;delete_clause&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, l) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; ⊥ {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; learnt &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;conflict_analyze_and_learnt&lt;&#x2F;span&gt;&lt;span&gt;(asg, cdb);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;(|l| clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(l)) {
&lt;&#x2F;span&gt;&lt;span&gt;                        new_clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; learnt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                            asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(asg.root_level);
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            new_clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clits[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span&gt;i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                            shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clits[i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;l) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        new_clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clits[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span&gt;i].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                        new_clause.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ls);
&lt;&#x2F;span&gt;&lt;span&gt;                        shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(ls) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clits[i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|l| asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!**&lt;&#x2F;span&gt;&lt;span&gt;l) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                    new_clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|l| l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span&gt; ls).collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    shortened &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(asg.root_level);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; shortened {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; shortened {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; new_clause.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_at_rootlevel&lt;&#x2F;span&gt;&lt;span&gt;(new_clause[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;                } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, new_clause);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                changed &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, clits);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2020-07-01&quot;&gt;2020-07-01&lt;&#x2F;h2&gt;
&lt;p&gt;やはり、vivification中の活性度修正はしない方がよさそうだ。確かに外乱ではある。
そして、短くなった節にはrewardを受け継がせなければ。。。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-07-04&quot;&gt;2020-07-04&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;cancel_until&lt;&#x2F;code&gt;を呼び出す場所を間違っていた。今のままだと、新しい節は空節から始まってだんだん長くなっていくのではなく、常に単位節ということになる。正しいように修正したら遅くなった。
まあ確かにヒューリスティックスとして全てのリテラルを確かめるというのはあるかもしれないが、論文通りにすべきではなかろうか。。。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-07-05&quot;&gt;2020-07-05&lt;&#x2F;h2&gt;
&lt;p&gt;ベンチマークを実行してみると少しは効果がありました。
しかし、そろそろ新しい論文の方を読んで検討すべき頃合いだろう（もっと早く読めって）。
長さ的にもいい頃合いなので、&lt;a href=&quot;&#x2F;2020&#x2F;2020-07-05-vivification2&#x2F;&quot;&gt;項を改めて&lt;&#x2F;a&gt;検討を続けることにします。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Jun.</title>
        <published>2020-07-05T00:00:00+00:00</published>
        <updated>2020-07-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-05-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-05-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;6月の総括&quot;&gt;6月の総括&lt;&#x2F;h1&gt;
&lt;p&gt;先月、性能良くなってきたのでなんとかかんとかと書いたのですが、実はGlucose 4.1よりも全然改善されてないことがわかったので、前言撤回。どうしたものか半分途方にくれた6月でした。
後半は気を取り直して、&lt;a href=&quot;&#x2F;2020&#x2F;vivification&#x2F;&quot;&gt;vivificationの実装&lt;&#x2F;a&gt;に取り組みました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Vivification&quot;&gt;Vivification&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-07-05_vivi-algo3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;読んだのは2008年の論文。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C. Piette, Y. Hamadi, and L. Saïs, &amp;quot;Vivifying propositional clausal formulae,&amp;quot; &lt;em&gt;Front. Artif. Intell. Appl.&lt;&#x2F;em&gt;, vol. 178, pp. 525–529, 2008.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;短い論文だったし、アルゴリズムもそれほど難しいものではなかったので一週間程度でできたけど、まあ遅い。
計算量的に確かにそうならざるを得ない。ちょっと色々と改良した後で2018年の論文を読み出した。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C.-M. Li &lt;em&gt;et al.&lt;&#x2F;em&gt;, “Clause Vivification by Unit Propagation in CDCL SAT Solvers,” 2018.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;まだ途中を読んでいる所だけど、もう一捻りしないといけないのは確かなようだ。
ということで今年の夏も黙々と実装を続けることになりました。
ああイベント参加したかった。&lt;&#x2F;p&gt;
&lt;p&gt;なお、この実装中にeliminatorのタイマー設定が大きすぎていたことが判明。
実はこの修正のおかげで求解数が少し増えました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;おわりに&quot;&gt;おわりに&lt;&#x2F;h1&gt;
&lt;p&gt;と、これでおしまい。この夏はコーディングよりも頭を使う期間かもね。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Clause Vivification updated 2020</title>
        <published>2020-07-05T00:00:00+00:00</published>
        <updated>2020-08-23T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-07-05-vivification2/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-07-05-vivification2/</id>
        
        <content type="html">&lt;p&gt;&lt;strong&gt;cover image: https:&#x2F;&#x2F;unsplash.com&#x2F;photos&#x2F;tYs9rjaT8Vc&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Vivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chu-Min Li &lt;em&gt;et al.&lt;&#x2F;em&gt;, &amp;quot;Clause vivification by unit propagation in CDCL SAT solvers,”&lt;em&gt;Artif. Intell.&lt;&#x2F;em&gt;, vol. 279, 2019.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;2020&#x2F;2020-08-19-splr-with-vivification&#x2F;&quot;&gt;part 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Errata&quot;&gt;Errata&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Algorithm 3&lt;&#x2F;strong&gt;のL17はforeachの内側&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Algorithm 4&lt;&#x2F;strong&gt;のLL.9-10はthen節の中&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;Outline&quot;&gt;Outline&lt;&#x2F;h3&gt;
&lt;p&gt;Vivificationは魅力的な節削減手法のでSAT competitionに提出されるようなソルバに導入されたもの、その後改善が計算量に見合わないため、取り下げられることが続いてきた。
この論文はどのタイミングで、どの節を、どのリテラルからvivifyすればよいかについて論じている。
特に&lt;a href=&quot;&#x2F;2020&#x2F;2020-06-20-vivification&#x2F;&quot;&gt;原論文&lt;&#x2F;a&gt;では&#x27;future work&#x27;としてのみ触れられていたin-processorとして使う場合の改善に重きを置いている。
なお、Cadicalはこの論文で提案された手法とは無関係。所与の節にもvivificationをするべきだという主張の傍証実験に使われただけ。ただし、Cadicalが使っているのは著者らの別の論文に基づくものなので、無関係とは言い過ぎかも。&lt;&#x2F;p&gt;
&lt;p&gt;結論は以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;タイミング -- 節削減の後のリスタート&lt;&#x2F;li&gt;
&lt;li&gt;対象節 -- LBD順で対象集合の半分
&lt;ul&gt;
&lt;li&gt;与えられた節 -- LBDが20以下の学習節の導出に使われており、LBDが1になる、またはLBDが3回減少すれば再び対象に加える。それとは別に pre-processing phase で$10^8$リテラルまで処理する。&lt;&#x2F;li&gt;
&lt;li&gt;学習節 -- LBDが1になる、またはLBDが2回減少すれば再び対象に加える&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;リテラル順 -- as is&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;なお、以下のようにin-processor向けに &lt;code&gt;vivify&lt;&#x2F;code&gt; のアルゴリズムが変更されている。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;2020&#x2F;2020-07-05_vivi-algo3.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;節へのリテラルの追加は$\vee$で、節集合および部分割り当てへの節または割り当ての追加は$\cup$で表されている。つまり節が拡大するのはL17のみ。(&lt;strong&gt;2020-08-21追記&lt;&#x2F;strong&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;del&gt;なんか怪しい。なぜ $\phi \cup \neg C&#x27;$ なのだ？ どうして$C$に含まれていたリテラルの否定を集めた節が$\text{vivified} C = C&#x27;$ なのだ&lt;&#x2F;del&gt; ここがミソ。&lt;&#x2F;li&gt;
&lt;li&gt;何にせよ最初に存在した節は17行目で必ず削除される。&lt;&#x2F;li&gt;
&lt;li&gt;17行目は一つ内側のループに含まれるはずですけど。&lt;&#x2F;li&gt;
&lt;li&gt;この関数は決定レベル0を想定していない。だから&lt;code&gt;conflictAnalysis&lt;&#x2F;code&gt;を呼び出している。もし決定レベル0を想定するなら、これは決定変数の否定からなる単位節を返す処理に帰着する。従ってL10は $C&#x27; \leftarrow {l_i}$と等価だか、そもそも$l_i$は割り当て済みだから何もしないのと同等。一方L13に関しては、その前のステップで決定による割り当てを行っている可能性があるのでレベル0が仮定できない。従って通常の矛盾解析を行い、&lt;strong&gt;学習節を追加する&lt;&#x2F;strong&gt;ことが必要である。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;節$C$が冗長であることを言う。&quot;&gt;節$C$が冗長であることを言う。&lt;&#x2F;h3&gt;
&lt;p&gt;数学的準備：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$(\phi, \omega) \models \omega&#x27;$は節集合$\phi$と部分割当集合$\omega$から無矛盾な割り当て集合$\omega&#x27;$が導出されることを意味する。割当が空でも$\omega$を導出できるなら$\phi \models \omega$とも書く。&lt;&#x2F;li&gt;
&lt;li&gt;$(\phi, \omega)$が矛盾を起こしているなら$\bot$で矛盾を表し、$(\phi, \omega) \models \bot$と書くことにする。&lt;&#x2F;li&gt;
&lt;li&gt;節$C$が冗長とは式$\phi$と$\phi\setminus{C}$が論理的に等値であることを意味する。&lt;&#x2F;li&gt;
&lt;li&gt;一般に節$C$に含まれる全てのリテラルを否定した節を$\neg C$と書くと$\forall C: (C \cup \neg C) \models \bot$が成立する。&lt;&#x2F;li&gt;
&lt;li&gt;（⭐️）一般に節$C$に対して自身の部分節$C&#x27;$の否定節$\neg C&#x27;$を加えることで矛盾が生じる（$C \cup \neg C&#x27; \models \bot$）なら、節$C$は$C&#x27;$に包含される。節$C$はリテラル$l&#x27; \in C\setminus{C&#x27;}$に対して何の制約にもなっていない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;前提として$\phi \nvDash \bot$であるとする。&lt;&#x2F;li&gt;
&lt;li&gt;ある節Cの部分節$C&#x27;$の否定節を加えても矛盾を導出しないなら、それは節Cは$C\setminus{C&#x27;}$に包摂できることを意味している。&lt;&#x2F;li&gt;
&lt;li&gt;そのような部分節にリテラル$l&#x27; \in C$の否定を加えた節を追加すると矛盾が起きたとする。それは部分節または$l&#x27;$のどちらかが充足することが必要であることを意味している。これは$\phi$から導出された学習節である（$\phi$の論理的帰結）。&lt;&#x2F;li&gt;
&lt;li&gt;学習節$\neg \neg C&#x27; \cup {\neg \neg l&#x27;} = C&#x27; \cup l&#x27;$は節$C$の部分節である。なので（⭐️）より置き換えてよい。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;余談&quot;&gt;余談&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB は学習節の3層管理をしている。節削減対象はLOCALのみ。
&lt;ul&gt;
&lt;li&gt;CORE -- LBDが小さいもの&lt;&#x2F;li&gt;
&lt;li&gt;TIER2 --　LBDが中間のもの。長期間依存グラフに現れないと格下げ。&lt;&#x2F;li&gt;
&lt;li&gt;LOCAL -- それ以外&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB はGulcose的なリスタートフェーズとLuby列に基づくリスタートフェーズを交互に使っている。これはStabilizationの先駆け？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2020-07-05_Splr_approach&quot;&gt;2020-07-05 Splr approach&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(asg: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AssignStack, cdb: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; ClauseDB) {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;next_clause: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cdb[ci];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(Flag::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;DEAD&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; copied: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; vivified: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;l) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l),            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; continue &amp;#39;next_clause&lt;&#x2F;span&gt;&lt;span&gt;,        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 2&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cid: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ClauseId&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(copied[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied)), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; L.12
&lt;&#x2F;span&gt;&lt;span&gt;                    };
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span&gt;ClauseId::default() {
&lt;&#x2F;span&gt;&lt;span&gt;                        vivified &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;minimize&lt;&#x2F;span&gt;&lt;span&gt;(cdb, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;v, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;cdb[cc].lits); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 3
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cj) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cid { cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(cj); }
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(asg.root_level);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span&gt;ClauseId::default() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;                    copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);                       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 4
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; vivified.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= !*&lt;&#x2F;span&gt;&lt;span&gt;l; }
&lt;&#x2F;span&gt;&lt;span&gt;            std::mem::swap(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; vivified, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; vivified.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; break &amp;#39;next_clause&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_at_rootlevel&lt;&#x2F;span&gt;&lt;span&gt;(vivified[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;impossible&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                assert!(asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;ClauseId::default(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;UNSAT&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; vivified),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ci);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;空節の取り扱い（Rule 1&#x27;）、充足節の除去（Rule 2）はsolverに任せるのがいいだろうから、こう変更することにした。ただ、空節があるのに先に行っていいものだろうかという疑問はある。また、空節の場合のみ31行が成立するから8行めは無意味かも。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-                 Some(false) =&amp;gt; copied.push(!*l),            &#x2F;&#x2F; Rule 1
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;                 Some(false) =&amp;gt; continue,                    &#x2F;&#x2F; Rule 1&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2020-07-07&quot;&gt;2020-07-07&lt;&#x2F;h3&gt;
&lt;p&gt;読了。そして理解した。プログラムを論文に忠実なものにした。
読む前はその分量に抵抗を感じていたのだけど、意外に素直な読みやすい論文だった。
「permanent clauseは &lt;code&gt;rank&lt;&#x2F;code&gt; を変更しない」というマイクロチューニングを放棄する日が来るとは。。。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rule 1が正しいものに戻された&lt;&#x2F;li&gt;
&lt;li&gt;Rule 2が正しいものに戻された&lt;&#x2F;li&gt;
&lt;li&gt;部分節なのかその否定なのかを変数&lt;code&gt;flipped&lt;&#x2F;code&gt;で保持&lt;&#x2F;li&gt;
&lt;li&gt;flippedの役割も担っていた変数&lt;code&gt;vivified&lt;&#x2F;code&gt;は削除&lt;&#x2F;li&gt;
&lt;li&gt;部分節が空節の場合でも処理を続ける&lt;&#x2F;li&gt;
&lt;li&gt;部分節が単位節の場合の検査は省略して、そのまま例外を上流に投げる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;vivify&lt;&#x2F;span&gt;&lt;span&gt;(asg: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; AssignStack, cdb: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; ClauseDB) -&amp;gt; MaybeInconsistent {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; clauses: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ClauseId&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(i, c) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_vivify&lt;&#x2F;span&gt;&lt;span&gt;() { clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(ClauseId::from(i)); }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;sort_by_key&lt;&#x2F;span&gt;&lt;span&gt;(|ci| cdb[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ci].rank);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ci &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; clauses.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Clause &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; cdb[ci];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; copied: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Lit&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;#39;this_clause: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; c.lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assigned&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;l) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; continue &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;,         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 1
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;reason_literals&lt;&#x2F;span&gt;&lt;span&gt;(cdb, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                    copied &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;minimize&lt;&#x2F;span&gt;&lt;span&gt;(cdb, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;copied, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;r);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 2
&lt;&#x2F;span&gt;&lt;span&gt;                    flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cid: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;ClauseId&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= match&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{ asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(copied[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied)),
&lt;&#x2F;span&gt;&lt;span&gt;                    };
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_by_decision&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;(cdb);
&lt;&#x2F;span&gt;&lt;span&gt;                    copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!*&lt;&#x2F;span&gt;&lt;span&gt;l);                         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 4
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span&gt;ClauseId::default() {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cdb[cc].lits.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Rule 3
&lt;&#x2F;span&gt;&lt;span&gt;                        copied &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;minimize&lt;&#x2F;span&gt;&lt;span&gt;(cdb, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;copied, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;r);
&lt;&#x2F;span&gt;&lt;span&gt;                        flipped &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cancel_until&lt;&#x2F;span&gt;&lt;span&gt;(asg.root_level);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(cj) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cid { cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(cj); }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; cc &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span&gt;ClauseId::default() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break &amp;#39;this_clause&lt;&#x2F;span&gt;&lt;span&gt;; }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; flipped { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;flip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied); }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; copied.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; asg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;assign_at_rootlevel&lt;&#x2F;span&gt;&lt;span&gt;(copied[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ =&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;new_clause&lt;&#x2F;span&gt;&lt;span&gt;(asg, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; copied),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        cdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;remove_clause&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ci);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2020-07-08&quot;&gt;2020-07-08&lt;&#x2F;h3&gt;
&lt;p&gt;ほぼ完成。
色々とチューニング中。
途中で答えの充足性が無茶苦茶になってしまってまた大変なデバッグが始まるのかと思いきや、原因を追っていくと決定レベルが0でないところでvivificationをしていただけだった。&lt;&#x2F;p&gt;
&lt;p&gt;修正しながら、このコードは特に決定レベル0に依存するところはないなあ（lockされた節さえ避ければよい）と気づいたのだが、さて、そうすると、解の近くにきた場合にrandom walkというかbelief propagationというか、そういうのの代わりに使えないものだろうか。。。。&lt;&#x2F;p&gt;
&lt;p&gt;それは無理。12行目で割当てを調べているが、この値は現在の部分割当て列に依存している。これは単なる仮説。
従ってこの結果に基づいてリテラルを削除したり簡略化したりはできない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-07-09&quot;&gt;2020-07-09&lt;&#x2F;h3&gt;
&lt;p&gt;L45で追加してL47削除するのは無駄なので対消滅させた。なぜかinconsistent errorが出た。
&lt;code&gt;propagate&lt;&#x2F;code&gt;が矛盾を返す。なぜだろう。&lt;&#x2F;p&gt;
&lt;p&gt;そのうちなくなった。。。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-07-22&quot;&gt;2020-07-22&lt;&#x2F;h3&gt;
&lt;p&gt;250変数の問題でpanicを起こした！
トレースしてみると、27行目の&lt;code&gt;assign_by_decision&lt;&#x2F;code&gt;が実際には矛盾を発生していたにも関わらず、この関数は例外を投げないので、後の伝播で問題が発生したようだ。
propagate側の関数にはあまり手を入れたくなかったので、27行目の前にチェックを入れることにして対応した（24行目の方は論理的に大丈夫なはず）。
まさか、こんな小さな問題でバグが検出されるとは。&lt;&#x2F;p&gt;
&lt;p&gt;ついでに45行目の前にbiclauseだったら重複検査もすることにしました。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-08-14&quot;&gt;2020-08-14&lt;&#x2F;h3&gt;
&lt;p&gt;まだバグが出る。
やはりL44の&lt;code&gt;asg.assign_at_rootlevel(copied[0])?&lt;&#x2F;code&gt;で変数がassertされたら直後に&lt;code&gt;propagate&lt;&#x2F;code&gt;しないと、伝播の取りこぼしが起きてしまうようだ。
vivificationの対象リテラル数を増やすと現れてきたのでおそらくこの解釈でいいんだと思う。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2020-08-15&quot;&gt;2020-08-15&lt;&#x2F;h3&gt;
&lt;p&gt;うーむ、ここではひっかかるまいとちょっとだけ期待していたのだが、天網恢恢疎にして漏らさず、やっぱり上で追加した&lt;code&gt;propagate&lt;&#x2F;code&gt;が矛盾を発生させることもあるわいなぁ。
ちゃんと返値をチェックして&lt;code&gt;SolverError::Inconsistent&lt;&#x2F;code&gt;を返すことにしました。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;Running on the 204-206th problem ezfact64_8.shuffled-as.sat03-1524-sc2002...SAT&#x2F;SR19&#x2F;f10nidw-sc2012.cnf: thread &amp;#39;main&amp;#39; panicked at &amp;#39;Vivification found an uncatchable inconsistency.&amp;#39;, src&#x2F;solver&#x2F;vivify.rs:147:21
&lt;&#x2F;span&gt;&lt;span&gt;note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Duplicate Learnt Clauses</title>
        <published>2020-06-22T00:00:00+00:00</published>
        <updated>2020-06-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-06-22-duplicate-learnt-clause/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-06-22-duplicate-learnt-clause/</id>
        
        <content type="html">&lt;p&gt;Google Scholar alert 発令。今日のお題は「重複した学習節による速度向上」！？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;S. Kochemazov, O. Zaikin, A. Semenov, and V. Kondratiev, &amp;quot;Speeding Up CDCL Inference With Duplicate Learnt Clauses,&amp;quot; &lt;em&gt;24th European Conference on Artificial Intelligence - ECAI2020&lt;&#x2F;em&gt;, 2020.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;duplicateは複数持つのではなく何度でも現れるという意味だ。
そのような節を削除せずに保持することで求解数が向上する（そういう問題セットが存在する）とのこと。
論文ではHash表を使って再出現を検知しようとしているようだ。
LBDによる層化は必ずしも正しいとは限らないと。&lt;&#x2F;p&gt;
&lt;p&gt;変数に比べ節の尺度はそれほど注意が払われてなかったかもしれない。
LBDに依らない尺度を検討するなら、変数活性度の流用だろうか。
ちょっと試してみるとそれほど悪くないような。&lt;&#x2F;p&gt;
&lt;p&gt;あう、&lt;a href=&quot;&#x2F;2020&#x2F;2020-06-20-vivification&#x2F;&quot;&gt;vivification&lt;&#x2F;a&gt;前提か。うーん、実装を急がねば。。。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>井上ひさし、四千万歩の男</title>
        <published>2020-06-19T00:00:00+00:00</published>
        <updated>2020-06-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-06-19-40M-steps/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-06-19-40M-steps/</id>
        
        <content type="html">&lt;p&gt;題材が今ひとつ興味が持てなくて、しかしベストセラーになっていたので、時間ができたら読もうと思っていた
井上ひさしの長編小説「四千万歩の男」。
ようやく読了。&lt;&#x2F;p&gt;
&lt;p&gt;なんと、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;未完！四百万歩くらいで終わった。単行本が出てから作者が亡くなるまで随分と時間があったはずなのでもう当然完結したストーリーだと思っていたのだが。。。&lt;&#x2F;li&gt;
&lt;li&gt;「小説」であった。同時代の有名人が毎回登場して絡んでいく。なんか早坂暁の「天下御免」を思い出した。&lt;&#x2F;li&gt;
&lt;li&gt;なので伊能忠敬に関するドラマ化というよりも、アイヌ問題とか、農民の困窮生活とか、学閥間の争いとか、御家騒動とか、大名間の闘争とか、ドロドロした話が一話完結的に展開していく。&lt;&#x2F;li&gt;
&lt;li&gt;主人公が百姓上がりということから、特にその時代の百姓の生活が色々と描かれている。そういう時代を舞台にしたものは米村圭伍、岡本綺堂、半村良、NHK土曜時代劇くらいしか読んだ（り見たりした）ことがないので新鮮だった。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということで、想像していたのはかなり違う内容だった。
なので一気読みとはいかず、&lt;em&gt;Fire and Blood&lt;&#x2F;em&gt; (the latest prequel of &lt;em&gt;Game of Thrones&lt;&#x2F;em&gt;) は英語で、こちらは日本語だけども、掛かった時間は同じような感じになってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;とはいえ面白くなかったわけではないので初めて小説タグなんてものを作ってここに記すものナ里。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに6月19日は小説に描かれた最後の日、北陸沿岸測量の出立の日。
そして2020年6月20日には日本で観測できる日食がある。
測量と天体観測とによって緯度1度の距離を求めようとした伊能忠敬に関連した日なのでした。&lt;&#x2F;p&gt;
&lt;p&gt;最後に（「糞」と書いて）「ばば」に関する蘊蓄を引用しておこう。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;糞というのは質の悪い下肥のことだ、と源兵衛はいった。たとえば、甲という百姓に長屋の惣後架（共同便所）の下肥を汲み取らせて、次に空になった後架に商人店の下肥を入れ、乙という百姓に汲み取らせる。この場合、乙が糞を摑んだことになる。よく知られているように、長屋の住人はその場しのぎのその日暮しだが、口がおごっており、良質の下肥を落す。一方、商家は構えば大きいようだが、使用人に碌なものも食わせていない。そこで彼等の下肥には作物の滋養になるものが乏しく、下々の質である。この下々の下肥を上々吉の下肥に見せかけて売る家主が多いので閉口するという。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;井上ひさし、完結させないまま亡くなった&lt;&#x2F;li&gt;
&lt;li&gt;吉川英治、アンタはえらい！&lt;&#x2F;li&gt;
&lt;li&gt;栗本薫、完結させないまま亡くなった&lt;&#x2F;li&gt;
&lt;li&gt;酒見賢一、アンタはえらい！&lt;&#x2F;li&gt;
&lt;li&gt;George RR Martin, 完結させ、、、、、、、しかし、ダメだろ&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Clap-3.0.0-beta.1</title>
        <published>2020-06-13T00:00:00+00:00</published>
        <updated>2020-06-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-06-13-clap3/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-06-13-clap3/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;Clap&lt;&#x2F;a&gt;-3.0だと&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt;が要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1._PathBufの取扱いの違い&quot;&gt;1. PathBufの取扱いの違い&lt;&#x2F;h3&gt;
&lt;p&gt;StructOptでは問題なくオプションになる以下のフィールドは、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;   #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, parse(from_os_str))]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; result: PathBuf,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Clapでは引数が指定されてないエラーを起こしてしまう。
default_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    #[clap(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;result&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt; result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;PathBuf&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで解決するのだが、なんかスマートではない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2._StructOpt::from_iterがない&quot;&gt;2. StructOpt::from_iterがない&lt;&#x2F;h3&gt;
&lt;p&gt;これはClap::prase_fromに置き換えることが必要（そもそも、これを内部で呼び出しているだけ）。
もう一つ書き替えがあったのでまとめると、以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StructOpt::from_args&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Clap::parse&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;StructOpt::from_iter&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Clap::parse_from&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;依存関係&quot;&gt;依存関係&lt;&#x2F;h2&gt;
&lt;p&gt;clapがstructoptを取り込んだようなものなので、基本は変化がないはず。
しかし、開発時期の違いだろうか、依存クレートにバージョンの違いが見られる。
またclapのメジャーバージョンアップということでcurses的なものに変化があった（共通部は省略）：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;structopt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ cargo tree 
&lt;&#x2F;span&gt;&lt;span&gt;splr v0.4.2-dev.1
&lt;&#x2F;span&gt;&lt;span&gt;└── structopt v0.3.14
&lt;&#x2F;span&gt;&lt;span&gt;    ├── clap v2.33.1
&lt;&#x2F;span&gt;&lt;span&gt;    │   ├── ansi_term v0.11.0
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── strsim v0.8.0
&lt;&#x2F;span&gt;&lt;span&gt;    └── structopt-derive v0.4.7
&lt;&#x2F;span&gt;&lt;span&gt;        └── proc-macro-error v1.0.2
&lt;&#x2F;span&gt;&lt;span&gt;            └── proc-macro-error-attr v1.0.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;clap-3.0.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ cargo tree 
&lt;&#x2F;span&gt;&lt;span&gt;splr v0.4.2-dev.0
&lt;&#x2F;span&gt;&lt;span&gt;└── clap v3.0.0-beta.1
&lt;&#x2F;span&gt;&lt;span&gt;    ├── clap_derive v3.0.0-beta.1
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── proc-macro-error v0.4.12
&lt;&#x2F;span&gt;&lt;span&gt;    │       └── proc-macro-error-attr v0.4.12
&lt;&#x2F;span&gt;&lt;span&gt;    ├── indexmap v1.4.0
&lt;&#x2F;span&gt;&lt;span&gt;    │   [build-dependencies]
&lt;&#x2F;span&gt;&lt;span&gt;    │   └── autocfg v1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;    ├── os_str_bytes v2.3.1
&lt;&#x2F;span&gt;&lt;span&gt;    ├── strsim v0.10.0
&lt;&#x2F;span&gt;&lt;span&gt;    └── termcolor v1.1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;でコンパイルしてみるとclapを使った方が（strip後のサイズで）70KBほど大きくなってしまう。
うーん、それはどうなのか。。。&lt;&#x2F;p&gt;
&lt;p&gt;コンパイル時間や実行時間に関しては見ていない。多分大きな差はないだろう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to compile cargo-instruments</title>
        <published>2020-06-07T00:00:00+00:00</published>
        <updated>2020-06-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-06-07-cargo-instruments/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-06-07-cargo-instruments/</id>
        
        <content type="html">&lt;h2 id=&quot;Rustでプロファイリングしたいんじゃあ&quot;&gt;Rustでプロファイリングしたいんじゃあ&lt;&#x2F;h2&gt;
&lt;p&gt;valgrindは動くけど、perfはない、massive-visualizerもない。
Linuxに比べてmacOSはRustのプロファイリングが不自由だなあ。
それでも、まともなLinuxマシンが手元にないのでなんとかmac上でプロファイリングしなければならない。
何かインストールしなければ。
いくつか調べてみて（そもそも検索でヒットするページが意外なほど少ないのだけど）&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-instruments&quot;&gt;cargo-instruments&lt;&#x2F;a&gt;というのがよさそうだということがわかりました。
残念だけど、opensshのバージョン問題で単に&lt;code&gt;cargo install&lt;&#x2F;code&gt;とするだけではコンパイルできないようです。
brewを使っているのが前提になっているのだろうか。
うーん、これはいつものパターンだな。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nix-shellでコンパイルしよう&quot;&gt;nix-shellでコンパイルしよう&lt;&#x2F;h2&gt;
&lt;p&gt;sat-benchでの経験を基に、nix-shellで環境作ってcargoを呼び出す方法で、一つ一つ問題を潰していくと、こうなった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ nix-shell -p openssl pkg-config libiconv darwin.apple_sdk.frameworks.Security libcurl
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo install cargo-instruments
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これはコンパイルは最後まで走るのだけど、最後の最後のリンクフェーズで&lt;code&gt;_CFURLSetResourcePropertyForKey&lt;&#x2F;code&gt;が見つからないエラーで失敗する。
どうもこれはnixOS上のrustのコンパイルでよく知られた問題のようで、とあるrust関連のnix expressionにはコメントで出てきて、dirty hackで対応だ、みたいなことが書いてある。
-- &lt;code&gt;&#x2F;pkgs&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-geiger&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# FIXME: Use impure version of CoreFoundation because of missing symbols.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# CFURLSetResourcePropertyForKey is defined in the headers but there&amp;#39;s no
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# corresponding implementation in the sources from opensource.apple.com.
&lt;&#x2F;span&gt;&lt;span&gt;  preConfigure &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;optionalString stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isDarwin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    export NIX_CFLAGS_COMPILE=&amp;quot;-F${&lt;&#x2F;span&gt;&lt;span&gt;CoreFoundation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;Library&#x2F;Frameworks $NIX_CFLAGS_COMPILE&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;  &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;だったら、derivation を作るしかないか。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;That_works!&quot;&gt;That works!&lt;&#x2F;h1&gt;
&lt;p&gt;ということで色々nix expressionを見ながら作ったのがこちら。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1._&#x2F;pkgs&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-instruments&#x2F;default.nix&quot;&gt;1. &#x2F;pkgs&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-instruments&#x2F;default.nix&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;runCommand&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;fetchFromGitHub&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;rustPlatform&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Security&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;CoreFoundation&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;openssl&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;pkg-config&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;libiconv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;curl }:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;rustPlatform&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buildRustPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;pname &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;cargo-instruments&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;0.3.1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;fetchFromGitHub {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;owner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;cmyr&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;repo &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;cargo-instruments&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;rev &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;7201328c3556b9d2872308869ac917b4b9d9b352&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sha256:1dgp38bgdk4pnrph21zygi4xjcmj449h0m4shapy0nabqwd5l3yz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;nativeBuildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ pkg-config ];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ openssl libiconv curl Security ];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;cargoSha256 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sha256:18m9gk2i798vbj48gv60f19fpd6qvk3jrpljp5ai4mzjirhbscxs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;doCheck &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;preConfigure &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;optionalString stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;isDarwin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    export NIX_CFLAGS_COMPILE=&amp;quot;-F${&lt;&#x2F;span&gt;&lt;span&gt;CoreFoundation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;Library&#x2F;Frameworks $NIX_CFLAGS_COMPILE&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;  &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= with &lt;&#x2F;span&gt;&lt;span&gt;stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;descriptin &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A cargo plugin to generate Xcode Instruments trace files&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;homepage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;cmyr&#x2F;cargo-instruments&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;license &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;licenses&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;mit;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;maintainers &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= with &lt;&#x2F;span&gt;&lt;span&gt;maintainers; [ shnarazk ];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;platforms &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;platforms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;darwin;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2._&#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix&quot;&gt;2. &#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;modified   pkgs&#x2F;top-level&#x2F;all-packages.nix
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -9205,6 +9205,10 @@ in
&lt;&#x2F;span&gt;&lt;span&gt;   cargo-inspect = callPackage ..&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-inspect {
&lt;&#x2F;span&gt;&lt;span&gt;     inherit (darwin.apple_sdk.frameworks) Security;
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  cargo-instruments = callPackage ..&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-instruments {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    inherit (darwin) libiconv;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    inherit (darwin.apple_sdk.frameworks) Security CoreFoundation;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;   cargo-make = callPackage ..&#x2F;development&#x2F;tools&#x2F;rust&#x2F;cargo-make {
&lt;&#x2F;span&gt;&lt;span&gt;     inherit (darwin.apple_sdk.frameworks) Security;
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ちゃんと動いているので、nixpkgs に入れてもらおうかな。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, May.</title>
        <published>2020-05-29T00:00:00+00:00</published>
        <updated>2020-05-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-05-29-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-05-29-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;Splr-0.4.1リリースの5月&quot;&gt;Splr-0.4.1リリースの5月&lt;&#x2F;h2&gt;
&lt;p&gt;今月たてたissue及びブランチは以下の通り：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No restart for LR and Stabilization&lt;&#x2F;li&gt;
&lt;li&gt;20200514-incremental&lt;&#x2F;li&gt;
&lt;li&gt;20200524-handle&lt;&#x2F;li&gt;
&lt;li&gt;20200502-new-select&lt;&#x2F;li&gt;
&lt;li&gt;20200503-litpointer-on-0.3.1&lt;&#x2F;li&gt;
&lt;li&gt;20200509-new-rephrase&lt;&#x2F;li&gt;
&lt;li&gt;20200510-restart-for-lr&lt;&#x2F;li&gt;
&lt;li&gt;20200514-incremental&lt;&#x2F;li&gt;
&lt;li&gt;20200516-no-restart&lt;&#x2F;li&gt;
&lt;li&gt;20200518-tuning&lt;&#x2F;li&gt;
&lt;li&gt;20200524-dead&lt;&#x2F;li&gt;
&lt;li&gt;20200524-handle&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Splr-0.4.0以降の分をまとめると&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;incremental SATソルバの実装&lt;&#x2F;li&gt;
&lt;li&gt;stabilizationの解釈と変数選択機構の実装&lt;&#x2F;li&gt;
&lt;li&gt;リスタートの必要性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;といったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Incremental_SATソルバ&quot;&gt;Incremental SATソルバ&lt;&#x2F;h2&gt;
&lt;p&gt;初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。
インクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。
まあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。
だから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。
ところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。
論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。
かなり網羅的なテストでうまく行っているので多分これでいいのでしょう。&lt;&#x2F;p&gt;
&lt;p&gt;結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを &lt;code&gt;SatSolverIF&lt;&#x2F;code&gt; に追加して完成です。
高レベルなIFとしてイテレータも追加したので、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ans &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;Certificate::try_from(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;と書くだけで全解探索処理ができるのはなかなかいいな。&lt;&#x2F;p&gt;
&lt;p&gt;またWASM環境に対応しました。
要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。
のつもりだったけど、実はコンパイルできるのだけれども &lt;code&gt;std::time&lt;&#x2F;code&gt; が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;997855&#x2F;83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。
ちなみにWASMだとSplrのコードは140KBくらい。
Darwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。&lt;&#x2F;p&gt;
&lt;p&gt;この修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo install —force —path . —features cli
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。
ここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。
continuationかyieldあたりでsearchの中断できないかな。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Stabilizationの解釈と変数選択機能の実装&quot;&gt;Stabilizationの解釈と変数選択機能の実装&lt;&#x2F;h1&gt;
&lt;p&gt;Splr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。
世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！
と言うことでもう一度設定を変えながらベンチマークをやり直し。
これが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。
0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;リスタートの必要性&quot;&gt;リスタートの必要性&lt;&#x2F;h2&gt;
&lt;p&gt;一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2020&#x2F;2020-05-20-LR-needs-something&#x2F;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;StabilizationはSAT問題に対してうまくいくという話でこれはわかる。&lt;&#x2F;li&gt;
&lt;li&gt;逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。&lt;&#x2F;li&gt;
&lt;li&gt;どちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。&lt;&#x2F;li&gt;
&lt;li&gt;一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？&lt;&#x2F;li&gt;
&lt;li&gt;VSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https:&#x2F;&#x2F;shnarazk.github.io&#x2F;2020&#x2F;2020-05-19-two-heuristics&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;このあたりの整理は必要ではないかと。&lt;&#x2F;p&gt;
&lt;p&gt;出てきた（極端な）アイデアの一つがexploit&amp;amp;exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。
ただ極端な設定の割にはそれほど悪くないのよねえ。&lt;&#x2F;p&gt;
&lt;p&gt;ここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。
今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;&#x2F;h2&gt;
&lt;p&gt;現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-05-29_Splr-0.4.1-benchmark.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。
うーん、何ができるのか戦略的に考えなければ。
勝負の6月だ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s Miracle Sudoku?</title>
        <published>2020-05-26T00:00:00+00:00</published>
        <updated>2020-08-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-05-26-MiracleSudoku/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-05-26-MiracleSudoku/</id>
        
        <content type="html">&lt;p&gt;25日のHacker Newsで初めて知ったMiracle Sudoku。&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=cvEq_XkQg8U&quot;&gt;ビデオ&lt;&#x2F;a&gt;の横に書いてあることから判断するに&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Normal Sudoku rules apply.&lt;&#x2F;li&gt;
&lt;li&gt;ナイトまたはキングが1hopで行ける場所には同じ数は置けない: Any two cells separated by a knight&#x27;s move or a king&#x27;s move (in chess) cannot contain the same digit.&lt;&#x2F;li&gt;
&lt;li&gt;近接した4近傍には連続する数列は置けない: Any two orthogonally adjacent cells cannot contain consecutive digits.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;さあSATソルバの出番。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2020-05-30_mokumoku&quot;&gt;2020-05-30 mokumoku&lt;&#x2F;h1&gt;
&lt;p&gt;場所とセルの状態をそれぞれ構造体&lt;code&gt;Pos&lt;&#x2F;code&gt;, &lt;code&gt;Cell&lt;&#x2F;code&gt;で表現すると&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn state(Pos, digit: usize, bool) -&amp;gt; Cell&lt;&#x2F;code&gt;　で状態を生成&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fn requires(Cell, Cell) -&amp;gt; [i32; 2]&lt;&#x2F;code&gt; で制約節を生成&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fn valid(Pos) -&amp;gt; Option&amp;lt;Pos&amp;gt;&lt;&#x2F;code&gt; で妥当なセル座標に限定&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;といった補助関数を用意すれば後は簡単。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ナイトまたはキングが1hopで行ける場所には同じ数は置けない&quot;&gt;ナイトまたはキングが1hopで行ける場所には同じ数は置けない&lt;&#x2F;h2&gt;
&lt;p&gt;まず、移動可能なベクターを用意。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; knights_moves &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;全ての位置で移動して、妥当な場所なら全ての数字に対して禁止ルールを追加。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rules &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pos::at(i, j);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; moves.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(t) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(p &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ *&lt;&#x2F;span&gt;&lt;span&gt;m).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;valid&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        rules.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;requires&lt;&#x2F;span&gt;&lt;span&gt;(t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;キングについても同様。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;近接した4近傍には連続する数列は置けない&quot;&gt;近接した4近傍には連続する数列は置けない&lt;&#x2F;h2&gt;
&lt;p&gt;ほぼ同じ考えでいける。連続した数列なのでそこだけ変更。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dirs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; North
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; East
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;),  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; South
&lt;&#x2F;span&gt;&lt;span&gt;        Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; West
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rules &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Pos::at(i, j);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; dirs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(t) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(p &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ *&lt;&#x2F;span&gt;&lt;span&gt;m).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;valid&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;RANGE &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        rules.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;requires&lt;&#x2F;span&gt;&lt;span&gt;(t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;SATソルバを呼び出す&quot;&gt;SATソルバを呼び出す&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;rules&lt;&#x2F;code&gt;が&lt;code&gt;Vec&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;&lt;&#x2F;code&gt;の形なので、後はSplrを呼び出すだけ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rules: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = make_rules()&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; solver &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Solver::try_from((Config::default(), rules.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;())).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;panic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 初期状態
&lt;&#x2F;span&gt;&lt;span&gt;    solver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_assignment&lt;&#x2F;span&gt;&lt;span&gt;(Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_lit&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;panic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    solver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add_assignment&lt;&#x2F;span&gt;&lt;span&gt;(Pos::at(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_lit&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;panic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ans &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; solver.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; 正リテラルだけ抽出
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; picked &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|l| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; **&lt;&#x2F;span&gt;&lt;span&gt;l).collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;できたプログラムは&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&quot;&gt;こちら&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;座標やリテラルは1で始まる一方で、&lt;code&gt;Vec&lt;&#x2F;code&gt; は0で始まるといったあたりでいつものようにバグを発生させてしまった
けど、200行程度でできました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;実行結果&quot;&gt;実行結果&lt;&#x2F;h2&gt;
&lt;p&gt;得られる出力は以下の通り。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;4 8 3 7 2 6 1 5 9 
&lt;&#x2F;span&gt;&lt;span&gt;7 2 6 1 5 9 4 8 3 
&lt;&#x2F;span&gt;&lt;span&gt;1 5 9 4 8 3 7 2 6 
&lt;&#x2F;span&gt;&lt;span&gt;8 3 7 2 6 1 5 9 4 
&lt;&#x2F;span&gt;&lt;span&gt;2 6 1 5 9 4 8 3 7 
&lt;&#x2F;span&gt;&lt;span&gt;5 9 4 8 3 7 2 6 1 
&lt;&#x2F;span&gt;&lt;span&gt;3 7 2 6 1 5 9 4 8 
&lt;&#x2F;span&gt;&lt;span&gt;6 1 5 9 4 8 3 7 2 
&lt;&#x2F;span&gt;&lt;span&gt;9 4 8 3 7 2 6 1 5 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;となって、ビデオの解が唯一解であることも判明しました。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-08-24&quot;&gt;2020-08-24&lt;&#x2F;h2&gt;
&lt;p&gt;Rust-jp slackでの&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;sudoku_sat&#x2F;commit&#x2F;565e09a45074fd13ac414737836cfcc5e92d40ca&quot;&gt;近隣を辿るイテレータ&lt;&#x2F;a&gt;というアイデアがよさそうだったので乗り換えました。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;    let mut rules = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    for i in 1..=RANGE {
&lt;&#x2F;span&gt;&lt;span&gt;        for j in 1..=RANGE {
&lt;&#x2F;span&gt;&lt;span&gt;            let p = Pos::at(i, j);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-            for m in moves.iter() {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-                if let Some(t) = (p + *m).valid() {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-                    for d in 1..=RANGE as usize {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-                        rules.push(p.state(d, true).requires(t.state(d, false)));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;            for q in p.neighbors(&amp;amp;moves) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;                for d in 1..=RANGE as usize {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;                    rules.push(p.state(d, true).requires(q.state(d, false)));
&lt;&#x2F;span&gt;&lt;span&gt;                 }
&lt;&#x2F;span&gt;&lt;span&gt;             }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>LR needs something to explore the world</title>
        <published>2020-05-20T00:00:00+00:00</published>
        <updated>2020-05-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-05-20-LR-needs-something/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-05-20-LR-needs-something/</id>
        
        <content type="html">&lt;p&gt;引き続きよくわかってない人の意見の連投ですが。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;LRのリスタート問題&quot;&gt;LRのリスタート問題&lt;&#x2F;h2&gt;
&lt;p&gt;LR はよさそうなんだけども、そんなにいいならリスタートの立場はどうなる？
矛盾発生率の最適化を達成していて何故リスタートが必要になるのだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;しかし何かそのようなものが必要なことはすぐわかる。
以前も書いたような気がするがリスタートはリスタートであって、決してリセットではないのだ。
EVSIDS も含めた変数選択ヒューリスティックスは割当て後にその使われた変数に値を割り当てるもので、使われてない変数に脚光を当てるものではない。
従って、リスタートを掛けても優先度が高い変数間の順序が変わるだけと書いてもそれほど言い過ぎというわけではないだろう。
もちろん順序を入れ替えることによってリスタート後の伝播の方向がこれまでと違う方向へと向かうことはあるけども、いきなり極端に違う変数が選ばれるものではない（という去年の経験）。&lt;&#x2F;p&gt;
&lt;p&gt;さて、LRはあくまでみた事のある変数の中での順序づけであり、それが変数全体の中での最適解とはとても言えない。
そして、矛盾から生成される学習節の LBD 的なよさとも無関係である。
従って、もしLBD が悪い学習節が生成される傾向にあるならば、LRといえどもそれなりの対応が必要になるはずである。&lt;&#x2F;p&gt;
&lt;p&gt;それはどういうものかというと、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;試していない変数の評価を行う（そのためには割当てを実行しなければならない）。そのためにはリスタートが必要。&lt;&#x2F;li&gt;
&lt;li&gt;単にそのような変数への割当て評価を行っただけでは、decay rateが高い状況では結局無視されてしまうので、decay rateの一時的な修正か何かが必要。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということではなかろうか（decay rate を下げる云々は昨日の複数ヒューリスティックスの併用を念頭に置いている）。
いっそのことdecay rate の違う二つのLRを使おうか。あるいはdecay rateを初期値に戻そうか。。。&lt;&#x2F;p&gt;
&lt;p&gt;というわけでリスタートは実は不十分でさらにexploreのための補助となる仕組みが必要ではなかろうか、という作業仮説でした。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Eq, Ord, PartialEq, PartialOrd)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;VarTimestamp {
&lt;&#x2F;span&gt;&lt;span&gt;    timestamp: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    vi: VarId,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;VarSelectIF &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;AssignStack {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;force_select_iter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, ...) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; heap: BinaryHeap&amp;lt;VarTimestamp&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;BinaryHeap::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; size: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize = &lt;&#x2F;span&gt;&lt;span&gt;todo!();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.var.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;self.assign[v.index].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(Flag::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;ELIMINATED&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(top) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; heap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;peek&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; v.timestamp &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; top.timestamp {
&lt;&#x2F;span&gt;&lt;span&gt;                    heap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(VarTimestamp::from(v));
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; size &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; heap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                        heap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; heap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lit &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Lit::from_assign(v.vi, self.var[v.vi].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt;(Flag::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;PHASE&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            self.temp_order.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(lit);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2020-05-21&quot;&gt;2020-05-21&lt;&#x2F;h2&gt;
&lt;p&gt;うまくいかぬ。exploreの契機はworse LBDではないのかもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;2.bp.blogspot.com&#x2F;-hMADLxB1puo&#x2F;VMIvawjKgWI&#x2F;AAAAAAAAq8E&#x2F;2bgLT3inaSk&#x2F;s400&#x2F;cooking15_rangiri.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s the difference between EVSIDS and LR?</title>
        <published>2020-05-19T00:00:00+00:00</published>
        <updated>2020-05-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-05-19-two-heuristics/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-05-19-two-heuristics/</id>
        
        <content type="html">&lt;p&gt;よくわかってない人の意見ですが。&lt;&#x2F;p&gt;
&lt;p&gt;最近のSATソルバの注目すべきアイデアの一つにLearning Rate (+ Reason-Side) Rewardingがある。
長らく続いてきたEVSIDS一強時代に対抗できる成果を残している。と言っても完全に上回るのではなく
「タイムアウトを長くした」場合という限定詞付きではあるが、それでも注目すべき技術だろう。
というわけで最近のSplrでもfeatureで切り替えられるようにした。&lt;&#x2F;p&gt;
&lt;p&gt;LRのよさはなんとなくわかる。LRのアイデアは学習率の最適化により矛盾発生頻度を最大化しようとするものである[1]。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In particular, we model the variable selection optimization problem as an online multi-armed bandit, a special-case of reinforcement learning, to learn branching variables such that the learning rate of the solver is maximized. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Since producing learnt clauses is a direct indication of progress, we define our metric to be the variable’s propensity to produce learnt clauses.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;これによってSAT問題であれば矛盾を全て解決していけば解に到達するし、UNSAT問題であればUNSATなコアに到達できるのだろう。&lt;&#x2F;p&gt;
&lt;p&gt;で自然な考えに思えるのだが、だとすると、これとは違うEVSIDSは一体何をしていて、
なぜ10年以上も君臨できるほどいい結果が出せているのかが、また疑問に思えてきた。&lt;&#x2F;p&gt;
&lt;p&gt;LRが出てくるまでは漠然と矛盾発生率の最大化だと思っていたのだけど、もはやこれとは違う説明を思いつかなければならない。
一体なんなんだろうかと考えていて一つの仮説を思いついた。
と言ってもそれほど大したものではないのだが。&lt;&#x2F;p&gt;
&lt;p&gt;それは、矛盾回避率の最大化ではないだろうか。そもそも矛盾が解決したはずなのにそれに関与するリテラルに対して（後付けで）報酬を与えて意味があるのかが疑問だったのだが、矛盾が解決したことによって、同じリテラル集合に対して割り当てをした場合、少なくとも先の矛盾を再び起こすことはないのだから、より割り当てを進ませることができる可能性は改善しているのではなかろうか。
つまり、わずかではあるがこの方向で探索を進めて矛盾しない可能性が改善している。
従ってこれは探索のよい枝刈り（あるいは方向付け）になっているのではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;こうするとこの二つを対比させることができる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;EVSIDSは矛盾回避率の最大化を目指す。&lt;&#x2F;li&gt;
&lt;li&gt;LRは矛盾発生率の最大化を目指す。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;従ってこの二つは最大化の対象は全く逆ではないだろうか。
全く逆だからこそどちらでもそこそこうまく行くと。。。&lt;&#x2F;p&gt;
&lt;p&gt;で、探索に関して少しは考えてきた人間としてはbi-directional searchなんてのを思い出すわけですよ。
この両者は併存、併用できるのではないだろうか。なぜなら（ここが一番根拠の薄い所だけども）&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;EVSIDSは矛盾を避けることでSAT解に到達しようとしている。UNSAT解はその副作用。&lt;&#x2F;li&gt;
&lt;li&gt;LRは矛盾のコアを見つけることでUNSAT解に到達しようとしている。SAT解はその副作用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということで一つの問題を全く逆の方向から解こうとしているのだからまさにbi-directional searchに見える。
デメリットはおそらく線形時間の速度低下。
bi-directional searchはうまくいかないということで決着したようだけども、今回は探索空間が本当に組合せ爆発してしているため、同じ結論にはならないように思える。&lt;&#x2F;p&gt;
&lt;p&gt;ということでSplr-0.4.0でブランチ切ってやってみた。
少なくとも1例しかやってないけども、そのT56ではえらい効果があった。
さて、本番のベンチマークではどうなるだろうか。。。ちょっと本腰を入れてコミットしてみよう。&lt;&#x2F;p&gt;
&lt;p&gt;さらにこう考えていくと、LRにとってリスタートは必要なのだろうか？
EVSIDSにとってリスタートは必要なのだろうか？
という疑問も出てくるのだがそれはまた別の話ということで。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;別の考え&quot;&gt;別の考え&lt;&#x2F;h2&gt;
&lt;p&gt;あるいは、もちろんどちらも共通の尺度であって単に計算式が違うだけということもあるかもしれない。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;EVSIDSは直近に矛盾を解消したリテラルに重きを置く&lt;&#x2F;li&gt;
&lt;li&gt;LRは平均的に矛盾を導出したリテラルに重きを置く&lt;&#x2F;li&gt;
&lt;li&gt;どちらも同じことだから、ウィンドウサイズを制御する変数によって両者を連続的に結合せよ。次に探索状況から制御変数を制御せよ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;実行時間の増加につれてEVSIDSからLRに移行する試みは既にやっているのだが。。。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;References&quot;&gt;References&lt;&#x2F;h2&gt;
&lt;p&gt;[1] J. H. Liang, V. Ganesh, P. Poupart, and K. Czarnecki, “Learning Rate Based Branching Heuristic for SAT Solvers,” Lect. Notes Comput. Sci. (including Subser. Lect. Notes Artif. Intell. Lect. Notes Bioinformatics), vol. 9710, pp. 123–140, 2016.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What&#x27;s &#x27;s-l&#x27;?</title>
        <published>2020-05-09T00:00:00+00:00</published>
        <updated>2020-05-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-05-09-Emacs-keybind-s-l/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-05-09-Emacs-keybind-s-l/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emacs-lsp&#x2F;lsp-mode&quot;&gt;lsp-mode&lt;&#x2F;a&gt;がプレフィックスとして採用している&#x27;&lt;code&gt;s-l&lt;&#x2F;code&gt;&#x27;とは一体なんなんだ？&lt;&#x2F;p&gt;
&lt;p&gt;&#x27;&lt;code&gt;s&lt;&#x2F;code&gt;&#x27;は&lt;code&gt;Super&lt;&#x2F;code&gt;かとも思うのだがだったら大文字ではないのか？　いや、それなら&lt;code&gt;Shift&lt;&#x2F;code&gt;になる。。。
&lt;code&gt;Super&lt;&#x2F;code&gt;のつもりで&lt;code&gt;Option&lt;&#x2F;code&gt;キーを押してみても反応ない。。。&lt;&#x2F;p&gt;
&lt;p&gt;ググってわかった。やはり&lt;code&gt;Super&lt;&#x2F;code&gt;だった。macのコンソールに入力できてないだけだった。
と思ったらちゃんと入力方法が用意してあった(https:&#x2F;&#x2F;emacs.stackexchange.com&#x2F;questions&#x2F;55199&#x2F;what-are-these-prefix-commands-that-start-with-s-l)。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can simulate these additional keys with some built-it sequences:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;C-x @ h adds the Hyper flag to the next character, C-x @ s adds the Super flag&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;ストローク数はしょうがないが、入力できるのが素晴らしい。&lt;code&gt;ALT&lt;&#x2F;code&gt;(&lt;code&gt;ESC&lt;&#x2F;code&gt;)も当然&#x27;&lt;code&gt;C-x @ m&lt;&#x2F;code&gt;&#x27;だった(&lt;code&gt;META&lt;&#x2F;code&gt;)。&lt;&#x2F;p&gt;
&lt;p&gt;ともかく疑問解決してよかった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Apr.</title>
        <published>2020-04-22T00:00:00+00:00</published>
        <updated>2020-04-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-04-22-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-04-22-UNSATlog/</id>
        
        <content type="html">&lt;h1 id=&quot;0.3.3まだまだ&quot;&gt;0.3.3まだまだ&lt;&#x2F;h1&gt;
&lt;p&gt;非常事態宣言が発出されて外を出歩かなくなってしまったのでカバーに使えるような写真のストックがなくなっ
てきました。プログラミングの時間は増えてそれなりに進展あり。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;CaDiCaLにおける重要技術の絞り込み&quot;&gt;CaDiCaLにおける重要技術の絞り込み&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arminbiere&#x2F;cadical&quot;&gt;CaDiCaL&lt;&#x2F;a&gt;の何がいいのかを調べるため&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;sat-bench&lt;&#x2F;a&gt;でオプションを切り替えながら3SATを実行してみました。詳細な結果は&lt;a href=&quot;&#x2F;2020&#x2F;2020-04-08-modern-techniques-of-SAT-solver&#x2F;&quot;&gt;Importance of modern techniques in SAT solvers&lt;&#x2F;a&gt; に書きました。&lt;&#x2F;p&gt;
&lt;p&gt;結論として、今のSplrにないものをまとめると、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;walk&lt;&#x2F;em&gt; — ランダムウォークしてるんだ。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;stabilize&lt;&#x2F;em&gt; — モードを切り替えて&#x27;deep searc&#x27;hのようなことをやっているようだ。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;rephase&lt;&#x2F;em&gt; — なんだこれは？&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;といったところ。なのでこれらの理解・検討を始めることにしました。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Issue_1:_propagation_pointerの導入&quot;&gt;Issue 1: propagation pointerの導入&lt;&#x2F;h1&gt;
&lt;p&gt;その前にもっと低レベルな実装上の改善を発見。propagate関数内の最適化として、節ごとに監視リテラルを見つけるのにどこまでリテラルを辿ったかを覚えておいて次回の新監視リテラル探索時の無駄な検査を減らすというものがある。CaDiCaLのコメントでは、節ごとに4バイト増えるとあるので導入するのはリテラルへのポインタ（インデックス）だけのはず。簡単な変更なので導入してみた。確かに速くなりそうなのだが全然計算量の差が現れない。なんだかよく分からなくて一旦お手上げ。その後、CaDiCaLのソース中の別のコメントを読んで理解した。当初はバックトラック時にどこから探せばよいかを計算する（クリアする）ようにしていたが、もっと簡単に前回の検出インデックスからサイクリックに一周辿ればいいだけだった。この方針で実装し直してみると、この1年くらいで最大の高速化が実現できたようだ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-04-22_Cactus-2020-04-22-7.46.20.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;言われてみればなぜこんな簡単なことを思いつかなかったのだろうと反省しきり。監視リテラル対のような実装レベルでの改良はまだまだあったのだなあ。この時点で0.3.3をリリースする価値がでた。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Issue_2:_Stabilizationの導入&quot;&gt;Issue 2: Stabilizationの導入&lt;&#x2F;h1&gt;
&lt;p&gt;ヒューリスティックレベルの高速化技法に話を戻します。ランダムウォークの導入は僕にとって全くの新技術なので後回しにして分かりやすそうなstabilizationに手をつけることにしました。どうも最良の割り当てを（部分的に？）再利用する枠組みのよう。コメントを読むと等比数列的にリスタートを止めているようなのでdeep search系の技術のようだ。とても簡単なのでProgressEvaluatorとして実装してみた。&lt;&#x2F;p&gt;
&lt;p&gt;しかし、うーん、これまた微妙な結果。ついでにstabilizephaseにも手を出してみたけど同じく微妙。3SAT UF250では全然改善の兆しは見られないし、ベンチマーク問題で解ける問題のカテゴリが広がりそうなんだけどもそうも家なさそう。ずっとパラメータチューニングをやっているけども、なぜこんなに微妙なのだろうか。現在苦戦中です。&lt;&#x2F;p&gt;
&lt;p&gt;さて、stabilizing modeを持ち込むとvar decayなんかのパラメータも再調整した方がいいかも。exploreとexploitの両方を一つのパラメータでカバーしなくてよくなるはずだよなあ。うーん、マルチエージェント化すべきだろうか。。。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;NixOSでのCaDiCaLのパッケージング🎉&quot;&gt;NixOSでのCaDiCaLのパッケージング🎉&lt;&#x2F;h1&gt;
&lt;p&gt;余談だけど、すごくいい結果を出しているのでCaDiCaLをnixOSに取り込んでもらえるようにpull requestを投げてみました。大量に修正が必要だったけど取り込んでもらえました。リリースが遅れている20.03には入っています。ちなみにArch LinuxではAURに入っている。ということでNixOSコントリビューターデビューです。そのうちgratgenとgratchk-smlのpull requestも作ってみよう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;今後の展望&quot;&gt;今後の展望&lt;&#x2F;h1&gt;
&lt;p&gt;現在開発ブランチで3000行近いdiffになっているのでせめてdev-0.3.3にマージしたいのだけど性能が上がらぬことにはどうしようもない。せめて劣化しないところまで早急に持っていきたいと思う。最終的にはpropagation pointerのおかげで次バージョンのリリースは実験の結果待ちまで来たので時間の問題。ただし大改造が（また）入ったので0.4シリーズにしようと思う。
ひと段落ついたら、stabilizeは二つのソルバーを切り替える実装にすべきだと今強く思っているので、bidirectional searchのようなコンテキスト切り替えを可能にするフレームワーク、モジュラリティの導入がやりたい。その上でいろいろ実験したいと思っている。しかしそうすると今年のSAT Cometition 2020にも間に合わなさそうな。うーん頭痛い。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building Emacs27.nix on MacOS</title>
        <published>2020-04-11T00:00:00+00:00</published>
        <updated>2020-04-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-04-11-emacs27-on-nix/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-04-11-emacs27-on-nix/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;code&gt;?&lt;&#x2F;code&gt;を使ったカスタマイズはemacsをオーバーレイする前に解決されてしまっているので&lt;code&gt;call-process&lt;&#x2F;code&gt;を呼び
出すのでなければ、（&lt;code&gt;nativeBuildInputs&lt;&#x2F;code&gt;に対してやっているように）自前で各アトリビュートを上書きするしかない。&lt;&#x2F;li&gt;
&lt;li&gt;なんか&lt;code&gt;rev&lt;&#x2F;code&gt;が無視されているような気がする -&amp;gt; ちゃんとダミー値を与えて一回失敗させないといけない。
これでちゃんと更新されるようになった。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# ~&#x2F;.config&#x2F;nixpkgs&#x2F;overlays&#x2F;emacs27.nix
&lt;&#x2F;span&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  emacs27 = super.emacs.overrideAttrs (attrs: rec {
&lt;&#x2F;span&gt;&lt;span&gt;    pname = &amp;quot;emacs27&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    # srcRepo = true;
&lt;&#x2F;span&gt;&lt;span&gt;    name = &amp;quot;emacs27-${version}&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    version = &amp;quot;27.0.90&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    src = super.fetchFromGitHub {
&lt;&#x2F;span&gt;&lt;span&gt;      owner = &amp;quot;emacs-mirror&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      repo = &amp;quot;emacs&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      rev = &amp;quot;6057d79a4eb4b95037068a1e9335a2418b2da5ec&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      hash = &amp;quot;sha256:11111111111111111111111111111111111111111111111111111&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;      #hash = &amp;quot;sha256:0dyb08afrkfic765zkwy27nnj0h8ays5likgfbdhwhbpdnmrgv8x&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    patches = [];
&lt;&#x2F;span&gt;&lt;span&gt;    preConfigure = &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      .&#x2F;autogen.sh
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&amp;#39; + &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      substituteInPlace lisp&#x2F;international&#x2F;mule-cmds.el \
&lt;&#x2F;span&gt;&lt;span&gt;        --replace &#x2F;usr&#x2F;share&#x2F;locale ${super.gettext}&#x2F;share&#x2F;locale
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;      for makefile_in in $(find . -name Makefile.in -print); do
&lt;&#x2F;span&gt;&lt;span&gt;          substituteInPlace $makefile_in --replace &#x2F;bin&#x2F;pwd pwd
&lt;&#x2F;span&gt;&lt;span&gt;      done
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    nativeBuildInputs = [ super.pkgconfig ]
&lt;&#x2F;span&gt;&lt;span&gt;      ++ [ super.autoconf super.automake super.texinfo ];
&lt;&#x2F;span&gt;&lt;span&gt;    buildInputs = super.emacs.buildInputs
&lt;&#x2F;span&gt;&lt;span&gt;        ++ [ super.autoconf super.automake super.texinfo ]
&lt;&#x2F;span&gt;&lt;span&gt;	++ [ AppKit Carbon Cocoa IOKit OSAKit Quartz QuartzCore WebKit ImageCaptureCore GSS ImageIO ];
&lt;&#x2F;span&gt;&lt;span&gt;    inherit (super.darwin.apple_sdk.frameworks)
&lt;&#x2F;span&gt;&lt;span&gt;        AppKit Carbon Cocoa IOKit OSAKit Quartz QuartzCore WebKit
&lt;&#x2F;span&gt;&lt;span&gt;        ImageCaptureCore GSS ImageIO;
&lt;&#x2F;span&gt;&lt;span&gt;  });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Importance of modern techniques in SAT solvers</title>
        <published>2020-04-08T00:00:00+00:00</published>
        <updated>2020-04-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-04-08-modern-techniques-of-SAT-solver/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-04-08-modern-techniques-of-SAT-solver/</id>
        
        <content type="html">&lt;p&gt;さあ&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arminbiere&#x2F;cadical&quot;&gt;CaDiCaL&lt;&#x2F;a&gt;がなぜ速いのか検討しよう。
CaDiCalのbool型のオプションを一つづつ外して、&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;SAT-bench&lt;&#x2F;a&gt;を使ってUF250とUUF250の実行速度を計測してみた。以下が結果の生データ。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Technique&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;SAT&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;UNSAT&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;arena&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;67.276&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;411.603&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arenacompact&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;72.570&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;385.086&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;arenasort&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;64.913&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;403.137&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;binary&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.285&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;400.457&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bump&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bumpreason&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;73.502&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;checkassumptions&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.905&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;395.175&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;checkfailed&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.343&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;394.922&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;checkproof&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.450&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.980&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;checkwitness&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.381&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.769&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;chronoreusetrail&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;64.292&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.042&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;compact&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.512&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.734&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;decompose&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;68.543&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;396.974&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;deduplicate&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.446&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;396.366&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;eagersubsume&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;78.028&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;394.733&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elim&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;75.681&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;384.247&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimands&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;67.227&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;402.034&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimbackward&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.500&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;399.709&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimequivs&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.709&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;398.184&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimites&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.295&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;400.141&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimlimited&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.861&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.830&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimsubst&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.375&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.759&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;elimxors&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.207&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.136&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;inprocessing&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;55.999&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;374.042&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;instantiateonce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.360&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.572&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;lucky&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;70.052&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;388.465&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;minimize&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;84.862&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;phase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;81.518&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;386.279&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;probe&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;63.664&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;390.642&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;probehbr&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;67.185&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393.756&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;reduce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;127.971&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rephase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;128.430&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;376.436&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;restart&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;38.578&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;restartreusetrail&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;68.626&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;400.377&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;score&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.269&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;shufflequeue&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.147&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;399.462&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;shufflescores&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;65.964&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;396.335&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;simplify&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;56.229&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;374.795&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stabilize&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;128.038&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stabilizephase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;86.403&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;367.847&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;subsume&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.877&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;375.520&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;subsumelimited&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;64.952&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;391.814&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;subsumestr&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;59.750&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;392.570&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ternary&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;64.958&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;403.329&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;transred&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.878&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;394.866&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;vivify&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;58.933&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;372.927&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;walk&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;130.862&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;386.060&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;walknonstable&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;87.557&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;394.616&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;SAT, UNSATに分けてそれぞれ重要度でソートしたものが以下。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Technique&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;&lt;em&gt;SAT&lt;&#x2F;em&gt;&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;-----&lt;&#x2F;th&gt;&lt;th&gt;done&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;bump&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;walk&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;130.862&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;386.060&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rephase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;128.430&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;376.436&lt;&#x2F;td&gt;&lt;td&gt;track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stabilize&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;128.038&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;reduce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;127.971&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;score&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.269&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;walknonstable&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;87.557&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;394.616&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stabilizephase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;86.403&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;367.847&lt;&#x2F;td&gt;&lt;td&gt;track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;phase&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;81.518&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;386.279&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Technique&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;---&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;&lt;em&gt;UNSAT&lt;&#x2F;em&gt;&lt;&#x2F;th&gt;&lt;th&gt;done&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;bump&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;stabilize&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;128.038&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;track&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;reduce&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;127.971&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;score&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.269&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;minimize&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;84.862&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bumpreason&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;73.502&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.3.1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;restart&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;38.578&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;em&gt;TIMEOUT&lt;&#x2F;em&gt;&lt;&#x2F;td&gt;&lt;td&gt;0.1.0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;ということで今後何やるべきかが見えてきた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;bumpreason -- bump reason literals too&lt;&#x2F;li&gt;
&lt;li&gt;walk -- enable random walks&lt;&#x2F;li&gt;
&lt;li&gt;walknonstable -- walk in non-stabilizing phase&lt;&#x2F;li&gt;
&lt;li&gt;stabilizeとstabilizephaseは何が違うんだろう。わかってない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;さあ1日1実装だ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-04-20&quot;&gt;2020-04-20&lt;&#x2F;h2&gt;
&lt;p&gt;見返していてなんか結論が間違っていることにやっと気づいた。
大事なのは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;stabilize&lt;&#x2F;li&gt;
&lt;li&gt;walk&lt;&#x2F;li&gt;
&lt;li&gt;rephase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;のあたり。
&lt;strong&gt;done&lt;&#x2F;strong&gt;が付いているbump, reduce, score, phase, bumpreason, restartは既に実装済み。
stabilize中はphaseを切り替えるstabilizephaseは特に重要というわけではなかった。
さて、rephaseとはなんなんだろう。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Appendix&quot;&gt;Appendix&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;zsh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-zsh &quot;&gt;&lt;code class=&quot;language-zsh&quot; data-lang=&quot;zsh&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#!&#x2F;bin&#x2F;zsh
&lt;&#x2F;span&gt;&lt;span&gt;parallel -k -j1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;sat-bench -Q -M \\{} --options \\{}=false -3 -U 250 cadical&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; ::: \
&lt;&#x2F;span&gt;&lt;span&gt; --arena \
&lt;&#x2F;span&gt;&lt;span&gt; --arenacompact \
&lt;&#x2F;span&gt;&lt;span&gt; --arenasort \
&lt;&#x2F;span&gt;&lt;span&gt; --binary \
&lt;&#x2F;span&gt;&lt;span&gt; --bump \
&lt;&#x2F;span&gt;&lt;span&gt; --bumpreason \
&lt;&#x2F;span&gt;&lt;span&gt; --checkassumptions \
&lt;&#x2F;span&gt;&lt;span&gt; --checkfailed \
&lt;&#x2F;span&gt;&lt;span&gt; --checkproof \
&lt;&#x2F;span&gt;&lt;span&gt; --checkwitness \
&lt;&#x2F;span&gt;&lt;span&gt; --chronoreusetrail \
&lt;&#x2F;span&gt;&lt;span&gt; --compact \
&lt;&#x2F;span&gt;&lt;span&gt; --decompose \
&lt;&#x2F;span&gt;&lt;span&gt; --deduplicate \
&lt;&#x2F;span&gt;&lt;span&gt; --eagersubsume \
&lt;&#x2F;span&gt;&lt;span&gt; --elim \
&lt;&#x2F;span&gt;&lt;span&gt; --elimands \
&lt;&#x2F;span&gt;&lt;span&gt; --elimbackward \
&lt;&#x2F;span&gt;&lt;span&gt; --elimequivs \
&lt;&#x2F;span&gt;&lt;span&gt; --elimites \
&lt;&#x2F;span&gt;&lt;span&gt; --elimlimited \
&lt;&#x2F;span&gt;&lt;span&gt; --elimsubst \
&lt;&#x2F;span&gt;&lt;span&gt; --elimxors \
&lt;&#x2F;span&gt;&lt;span&gt; --inprocessing \
&lt;&#x2F;span&gt;&lt;span&gt; --instantiateonce \
&lt;&#x2F;span&gt;&lt;span&gt; --lucky \
&lt;&#x2F;span&gt;&lt;span&gt; --minimize \
&lt;&#x2F;span&gt;&lt;span&gt; --phase \
&lt;&#x2F;span&gt;&lt;span&gt; --probe \
&lt;&#x2F;span&gt;&lt;span&gt; --probehbr \
&lt;&#x2F;span&gt;&lt;span&gt; --reduce \
&lt;&#x2F;span&gt;&lt;span&gt; --rephase \
&lt;&#x2F;span&gt;&lt;span&gt; --restart \
&lt;&#x2F;span&gt;&lt;span&gt; --restartreusetrail \
&lt;&#x2F;span&gt;&lt;span&gt; --score \
&lt;&#x2F;span&gt;&lt;span&gt; --shufflequeue \
&lt;&#x2F;span&gt;&lt;span&gt; --shufflescores \
&lt;&#x2F;span&gt;&lt;span&gt; --simplify \
&lt;&#x2F;span&gt;&lt;span&gt; --stabilize \
&lt;&#x2F;span&gt;&lt;span&gt; --stabilizephase \
&lt;&#x2F;span&gt;&lt;span&gt; --subsume \
&lt;&#x2F;span&gt;&lt;span&gt; --subsumelimited \
&lt;&#x2F;span&gt;&lt;span&gt; --subsumestr \
&lt;&#x2F;span&gt;&lt;span&gt; --ternary \
&lt;&#x2F;span&gt;&lt;span&gt; --transred \
&lt;&#x2F;span&gt;&lt;span&gt; --vivify \
&lt;&#x2F;span&gt;&lt;span&gt; --walk \
&lt;&#x2F;span&gt;&lt;span&gt; --walknonstable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;arena,             67.276,  411.603
&lt;&#x2F;span&gt;&lt;span&gt;arenacompact,      72.570,  385.086
&lt;&#x2F;span&gt;&lt;span&gt;arenasort,         64.913,  403.137
&lt;&#x2F;span&gt;&lt;span&gt;binary,            65.285,  400.457
&lt;&#x2F;span&gt;&lt;span&gt;bump,              TIMEOUT, TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;bumpreason,        73.502,  TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;checkassumptions,  65.905,  395.175
&lt;&#x2F;span&gt;&lt;span&gt;checkfailed,       65.343,  394.922
&lt;&#x2F;span&gt;&lt;span&gt;checkproof,        65.450,  393.980
&lt;&#x2F;span&gt;&lt;span&gt;checkwitness,      65.381,  393.769
&lt;&#x2F;span&gt;&lt;span&gt;chronoreusetrail,  64.292,  393.042
&lt;&#x2F;span&gt;&lt;span&gt;compact,           65.512,  393.734
&lt;&#x2F;span&gt;&lt;span&gt;decompose,         68.543,  396.974
&lt;&#x2F;span&gt;&lt;span&gt;deduplicate,       65.446,  396.366
&lt;&#x2F;span&gt;&lt;span&gt;eagersubsume,      78.028,  394.733
&lt;&#x2F;span&gt;&lt;span&gt;elim,              75.681,  384.247
&lt;&#x2F;span&gt;&lt;span&gt;elimands,          67.227,  402.034
&lt;&#x2F;span&gt;&lt;span&gt;elimbackward,      66.500,  399.709
&lt;&#x2F;span&gt;&lt;span&gt;elimequivs,        65.709,  398.184
&lt;&#x2F;span&gt;&lt;span&gt;elimites,          66.295,  400.141
&lt;&#x2F;span&gt;&lt;span&gt;elimlimited,       65.861,  393.830
&lt;&#x2F;span&gt;&lt;span&gt;elimsubst,         65.375,  393.759
&lt;&#x2F;span&gt;&lt;span&gt;elimxors,          65.207,  393.136
&lt;&#x2F;span&gt;&lt;span&gt;inprocessing,      55.999,  374.042
&lt;&#x2F;span&gt;&lt;span&gt;instantiateonce,   65.360,  393.572
&lt;&#x2F;span&gt;&lt;span&gt;lucky,             70.052,  388.465
&lt;&#x2F;span&gt;&lt;span&gt;minimize,          84.862,  TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;phase,             81.518,  386.279
&lt;&#x2F;span&gt;&lt;span&gt;probe,             63.664,  390.642
&lt;&#x2F;span&gt;&lt;span&gt;probehbr,          67.185,  393.756
&lt;&#x2F;span&gt;&lt;span&gt;reduce,            127.971, TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;rephase,           128.430, 376.436
&lt;&#x2F;span&gt;&lt;span&gt;restart,           38.578,  TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;restartreusetrail, 68.626,  400.377
&lt;&#x2F;span&gt;&lt;span&gt;score,             88.269,  TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;shufflequeue,      66.147,  399.462
&lt;&#x2F;span&gt;&lt;span&gt;shufflescores,     65.964,  396.335
&lt;&#x2F;span&gt;&lt;span&gt;simplify,          56.229,  374.795
&lt;&#x2F;span&gt;&lt;span&gt;stabilize,         128.038, TIMEOUT
&lt;&#x2F;span&gt;&lt;span&gt;stabilizephase,    86.403,  367.847
&lt;&#x2F;span&gt;&lt;span&gt;subsume,           66.877,  375.520
&lt;&#x2F;span&gt;&lt;span&gt;subsumelimited,    64.952,  391.814
&lt;&#x2F;span&gt;&lt;span&gt;subsumestr,        59.750,  392.570
&lt;&#x2F;span&gt;&lt;span&gt;ternary,           64.958,  403.329
&lt;&#x2F;span&gt;&lt;span&gt;transred,          66.878,  394.866
&lt;&#x2F;span&gt;&lt;span&gt;vivify,            58.933,  372.927
&lt;&#x2F;span&gt;&lt;span&gt;walk,              130.862, 386.060
&lt;&#x2F;span&gt;&lt;span&gt;walknonstable,     87.557,  394.616
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Liveness of nix-store created by &#x27;nix-build&#x27;</title>
        <published>2020-04-05T00:00:00+00:00</published>
        <updated>2020-04-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-04-05-nix-liveness/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-04-05-nix-liveness/</id>
        
        <content type="html">&lt;p&gt;昨日、&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&quot;&gt;nixOS&lt;&#x2F;a&gt; に &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arminbiere&#x2F;cadical&quot;&gt;cadical&lt;&#x2F;a&gt; が追加されたけど、それに至るまでは&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&quot;&gt;nixpkgsリポジトリ&lt;&#x2F;a&gt;のクローンを作って、自分でnix-buildを繰り返していた。
一旦 &lt;code&gt;nix-build -A cadical&lt;&#x2F;code&gt; でパッケージを作成するとnix expressionを変更してもartifactのstoreが更新されないことが多い。
調べて nix-storeのdeleteオプションで消せることがわかったけど、実行すると死んでないから削除できないというエラーが出る。&lt;code&gt;nix-env -e cadical&lt;&#x2F;code&gt; で削除しても同じエラーになる。&lt;&#x2F;p&gt;
&lt;p&gt;deleteオプションには&lt;code&gt;--ignore-liveness&lt;&#x2F;code&gt;という強力なフラグがあるのだけどこれを使っていたらnixの環境がgcされてnixでインストールしたものが一瞬全てなくなる羽目になってしまった。
これは結局 `&#x2F;nix-profile&#x2F;bin から辿れるシンボリックリンクを貼り直すことで回復できたけど、もうこのオプションは使いたくない。一体なぜパッケージを自分の環境から削除したのゴミにならないのか？&lt;&#x2F;p&gt;
&lt;p&gt;調べてみたら（いや、適当に見当つけて見たら）、nixpkgsワーキングツリーのトップにnix-buildで生成されたstoreへのシンボリックリンク result というのが自動的にできるのだけど、これがGCのrootになっていた。&lt;&#x2F;p&gt;
&lt;p&gt;ということで result をrmで消すと（そして nix-env -e すると）、 nix-store --delete で素直に消えてくれるようになりました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>pre.commit hook for Rust project</title>
        <published>2020-03-27T00:00:00+00:00</published>
        <updated>2020-03-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-27-commit-hook/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-27-commit-hook/</id>
        
        <content type="html">&lt;p&gt;commitする前にフォーマットをチェックするための &lt;code&gt;.git&#x2F;hooks&#x2F;pre.commit&lt;&#x2F;code&gt;。
github gistで拾ったもの。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;diff&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt; fmt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt; --check)
&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;?
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;[[ &lt;&#x2F;span&gt;&lt;span&gt;${result} -ne 0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;]] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;; then
&lt;&#x2F;span&gt;&lt;span&gt;    cat &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;There are some code style issues, run `cargo fmt` first.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Mar.</title>
        <published>2020-03-21T00:00:00+00:00</published>
        <updated>2020-03-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-21-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-21-UNSATlog/</id>
        
        <content type="html">&lt;p&gt;新型コロナウィルスで世間は大変なことになっているけど、確定申告以外はコツコツとSplrの開発を続ける日々。第３号です。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;splr-0.3.1そして0.3.2のリリース&quot;&gt;splr-0.3.1そして0.3.2のリリース&lt;&#x2F;h1&gt;
&lt;p&gt;ようやくChoroBTのバグが取れてSplr-0.3.1がリリースできました。いつものベンチマーク設定においても、どうも一つは多く解けるような感じ。そしてこれによって事実上、deep searchモードの引退になりました。開発は一つ階段を登った感じ。ただベンチマークの結果はそれほどよくない。SAT Competitionに出しても参加賞がもらえる程度だなあ。ということで引き続き0.3.2の開発を開始しました。0.3.1ではなんとGlucose流のヒューリスティック選択が有効に働いていない（設定していない項目があった）ので、その修正を始めたら、またこれが時間を取る作業で、ほぼ毎日ベンチマークを取る羽目に。さらにその途中で、タイムアウトした問題からもデータを取らないと効率が上がらないという全く当たり前のことに気付いて、SAT-benchと連携して結果の検証、対象問題の限定などのテストベッドの強化も色々とやっている最中。やはり問題がカテゴリに分割できると、それに集中したベンチマークが実行できるので大変に捗ります。&lt;&#x2F;p&gt;
&lt;p&gt;ということで3月になってからSAT Competitionへの参加を考えた開発になってきた。今年こそは参加したい。なんと言っても5000秒のタイムアウトで実行したベンチマークが一体どういうことになるのか、こういう機会がなければ決して拝めないからなあ。参加することが開発につながるはず。ということでベンチマークを何度も実行しながら修正を繰り返して煮詰まってきたので適当なところで0.3.2のリリースをしようと思ったのだけど、念のためにCadicalの性能を測ってみることにしたら、愕然、数倍（ちょっと開発者の立場で大袈裟な言い方をすると桁違い）の求解数だった。これはとっとといろいろな方面に散らばったdev-0.3.2ブランチのコードをmasterにマージして、全く新しいコードの開発というか移植を始めた方がよさそうだったので、0.3.2も特に目玉はないけどもリリースすることにしました。コアサイズで変数活性度のdecay rateを変えるという趣向以外はせいぜい内部構造のリファクタリング（リスタートが第6のモジュールになったのが大きな変更）がメインのリリース。&lt;&#x2F;p&gt;
&lt;p&gt;これからの開発ですが、短期的にはむしろベンチマーク環境のSAT-benchの機能改善が重要になってきたので、cadical対応を進めて何が差を生み出しているのかを真剣に検討することにしました。もしかすると当分はcadicalのコードリーディングになるかも。ということで次号に続く。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Passing args to StructOpt</title>
        <published>2020-03-19T00:00:00+00:00</published>
        <updated>2020-03-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-19-structopt/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-19-structopt/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;SAT-bench&lt;&#x2F;a&gt;はRust製SATソルバ
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&quot;&gt;Splr&lt;&#x2F;a&gt;のベンチマーク支援Rust製ツールです。
設定を変えてベンチマークを実行するためにSplrへのオプションを受け渡せるように以下のような&lt;code&gt;Config&lt;&#x2F;code&gt;になっ
ています。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Clone, Debug, StructOpt)]
&lt;&#x2F;span&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sat-bench&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, about &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A SAT Competition benchmark runner&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Config {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; the problem
&lt;&#x2F;span&gt;&lt;span&gt;    #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;benchmark&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, short &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;SR19Core&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;benchmark_name: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; solver names
&lt;&#x2F;span&gt;&lt;span&gt;    #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;solver&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, short &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;s&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;solver: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; arguments passed to solvers
&lt;&#x2F;span&gt;&lt;span&gt;    #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;options&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;solver_options: String,
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;実行するときには&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ benchm --benchmark &amp;quot;SR19&amp;quot; --solver splr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;のように実行するのですが、いざオプションを設定しようとすると&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ benchm --benchmark &amp;quot;SR19&amp;quot; --solver splr --options &amp;quot;--without-elim&amp;quot; -j 3
&lt;&#x2F;span&gt;&lt;span&gt;error: Found argument &amp;#39;--without&amp;#39; which wasn&amp;#39;t expected, or isn&amp;#39;t valid in this context
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;となってしまう。ダブルクォートで括っているから明らかに文字列なんだけどそれが意味をなしていない。
これはバグだと思うのだけど1年以上経っても直る気配はないので対処療法があるはず。探してみたら&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ benchm --benchmark &amp;quot;SR19&amp;quot; --solver splr --options \\--without-elim -j 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということだった。shell と structopt の二つのレベルのエスケープが必要。
対象文字列が空白文字を含むなら&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt; benchm --benchmark &amp;quot;SR19&amp;quot; --solver splr --options \\--rt\\ 0.8 -j 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とすることで &lt;code&gt;--rt 0.8&lt;&#x2F;code&gt; を渡せるようになるみたいだ。
つまり、 &lt;code&gt;nix-env -qa&lt;&#x2F;code&gt; で正規表現を使う場合と同じことでした。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Profile Guided Optimization on Rust</title>
        <published>2020-03-16T00:00:00+00:00</published>
        <updated>2020-03-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-16-Profile-Guided-Optimization-on-Rust/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-16-Profile-Guided-Optimization-on-Rust/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;index.html&quot;&gt;The rustc book&lt;&#x2F;a&gt;に
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;profile-guided-optimization.html&quot;&gt;profile guided optimization&lt;&#x2F;a&gt;
のわかりやすい説明があったのでSplrでやってみた。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;DATA=.&#x2F;pgo-data
&lt;&#x2F;span&gt;&lt;span&gt;MERGED=&#x2F;tmp&#x2F;merged.profdata
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# STEP 0: Make sure there is no left-over profiling data from previous runs
&lt;&#x2F;span&gt;&lt;span&gt;rm -rf ${DATA}
&lt;&#x2F;span&gt;&lt;span&gt;mkdir ${DATA}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# STEP 1: Build the instrumented binaries
&lt;&#x2F;span&gt;&lt;span&gt;RUSTFLAGS=&amp;quot;-Cprofile-generate=${DATA}&amp;quot; cargo build --release
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# STEP 2: Run the instrumented binaries with some typical data
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SC&#x2F;T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SR&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SR&#x2F;f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# STEP 3: Merge the `.profraw` files into a `.profdata` file
&lt;&#x2F;span&gt;&lt;span&gt;llvm-profdata merge -o ${MERGED} ${DATA}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# STEP 4: Use the `.profdata` file for guiding optimizations
&lt;&#x2F;span&gt;&lt;span&gt;#RUSTFLAGS=&amp;quot;-Cprofile-use=${MERGED}&amp;quot; cargo install -f --path .
&lt;&#x2F;span&gt;&lt;span&gt;RUSTFLAGS=&amp;quot;-Cprofile-use=${MERGED}&amp;quot; cargo build --release
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# TEST RUN
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SC&#x2F;T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SR&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;target&#x2F;release&#x2F;splr --to 1000 --quiet ..&#x2F;SR&#x2F;f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで&lt;code&gt;profile-use&lt;&#x2F;code&gt; で指定するファイルは&lt;code&gt;&#x2F;tmp&lt;&#x2F;code&gt;に置かないと存在しないエラーになってしまった。macOS の
sandbox 化のせいだろうか、よくわからない。
また実行ファイルが正常終了しないとデータは使われないようなので、確実に求解できる CNF ファイルを指定してプロファイルを作成しなければならないようだ。&lt;&#x2F;p&gt;
&lt;p&gt;実行結果はこちら（生データは最後に付けます）。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;CNF&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;normal obj.&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;profiling obj.&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;profile guided&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;　pg&#x2F;no&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;A&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;509.45&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;591.59&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;501.86&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.9851&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;B&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;163.12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;176.42&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;161.07&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.9874&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;C&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.30&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9.25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.9767&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SUM&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;679.87&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;777.26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;670.06&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.9831&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;A: SC2018&#x2F;T56.2.0.cnf&lt;&#x2F;li&gt;
&lt;li&gt;B: SR2019&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf&lt;&#x2F;li&gt;
&lt;li&gt;C: SR2019&#x2F;f6nidw-sc2012.cnf&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;裏で色々としながらの計測ではあるが、見ての通り1から2％程度の高速化だった。
うーーん、測定誤差程度かあ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;生データ&quot;&gt;生データ&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sh pgo
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling proc-macro2 v1.0.9
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling splr v0.3.2-dev.1 (&#x2F;Users&#x2F;nash&#x2F;Repositories&#x2F;splr)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished release [optimized] target(s) in 1m 03s
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   591.59
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     417842, #decision:      1198754, #propagate:        1616716
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   573165, #fix:     6304, #elm:  2565751, prg%:  81.7766
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:    84308, LBD2:    30005, Binc:  4813544, Perm:  3530977
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     2970, #RST:      898, tASG:   0.1729, tLBD:   0.8118
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.83, cnfl:    37.97, bjmp:    36.67, rpc%:   0.2149
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:       16, #sce:      145, core:      966, vdcy:   0.9131
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Generic (using a generic parameter set)
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SC&#x2F;T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;26_stack_cas_longest_true-unreach-call.i-c 7807714,35975032 |time:   176.42
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:       1636, #decision:       558092, #propagate:         559729
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:  7802492, #fix:     2464, #elm:     2758, prg%:   0.0669
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:     1144, LBD2:       98, Binc:  7781031, Perm: 35968175
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:       31, #RST:        0, tASG: 781.1437, tLBD:   0.9137
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     6.26, cnfl:   227.46, bjmp:   224.67, rpc%:   0.0000
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        1, #sce:        2, core:        0, vdcy:   0.9600
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;SATISFIABLE: ..&#x2F;SR&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;f6nidw-sc2012.cnf                             190399,564775 |time:     9.25
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:      96420, #decision:       238247, #propagate:         334674
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:    32849, #fix:     2853, #elm:   154697, prg%:  82.7473
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:     7518, LBD2:      942, Binc:   376881, Perm:   206409
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:      432, #RST:       68, tASG:   0.9892, tLBD:   0.8494
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.65, cnfl:    17.02, bjmp:    15.92, rpc%:   0.0705
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        8, #sce:       18, core:      179, vdcy:   0.9623
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SR&#x2F;f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling proc-macro2 v1.0.9
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling splr v0.3.2-dev.1 (&#x2F;Users&#x2F;nash&#x2F;Repositories&#x2F;splr)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished release [optimized] target(s) in 44.58s
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   501.86
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     417842, #decision:      1198754, #propagate:        1616716
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   573165, #fix:     6304, #elm:  2565751, prg%:  81.7766
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:    84308, LBD2:    30005, Binc:  4813544, Perm:  3530977
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     2970, #RST:      898, tASG:   0.1729, tLBD:   0.8118
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.83, cnfl:    37.97, bjmp:    36.67, rpc%:   0.2149
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:       16, #sce:      145, core:      966, vdcy:   0.9131
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Generic (using a generic parameter set)
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SC&#x2F;T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;26_stack_cas_longest_true-unreach-call.i-c 7807714,35975032 |time:   161.07
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:       1247, #decision:       559271, #propagate:         560519
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:  7797316, #fix:     2464, #elm:     7934, prg%:   0.1332
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:      757, LBD2:      103, Binc:  7781035, Perm: 35952651
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:       23, #RST:        0, tASG: 512.9724, tLBD:   0.9137
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     6.13, cnfl:   319.86, bjmp:   316.40, rpc%:   0.0000
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        1, #sce:        2, core:        0, vdcy:   0.9600
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;SATISFIABLE: ..&#x2F;SR&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;f6nidw-sc2012.cnf                             190399,564775 |time:     7.13
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:      96420, #decision:       238247, #propagate:         334674
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:    32849, #fix:     2853, #elm:   154697, prg%:  82.7473
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:     7518, LBD2:      942, Binc:   376881, Perm:   206409
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:      432, #RST:       68, tASG:   0.9892, tLBD:   0.8494
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.65, cnfl:    17.02, bjmp:    15.92, rpc%:   0.0705
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        8, #sce:       18, core:      179, vdcy:   0.9623
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SR&#x2F;f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sh no-pgo
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling proc-macro2 v1.0.9
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling splr v0.3.2-dev.1 (&#x2F;Users&#x2F;nash&#x2F;Repositories&#x2F;splr)
&lt;&#x2F;span&gt;&lt;span&gt;    Finished release [optimized] target(s) in 1m 02s
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   509.45
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     417842, #decision:      1198754, #propagate:        1616716
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   573165, #fix:     6304, #elm:  2565751, prg%:  81.7766
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:    84308, LBD2:    30005, Binc:  4813544, Perm:  3530977
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     2970, #RST:      898, tASG:   0.1729, tLBD:   0.8118
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.83, cnfl:    37.97, bjmp:    36.67, rpc%:   0.2149
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:       16, #sce:      145, core:      966, vdcy:   0.9131
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Generic (using a generic parameter set)
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SC&#x2F;T56.2.0.cnf
&lt;&#x2F;span&gt;&lt;span&gt;26_stack_cas_longest_true-unreach-call.i-c 7807714,35975032 |time:   163.12
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:       1877, #decision:       462203, #propagate:         464081
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:  7785361, #fix:     2464, #elm:    19889, prg%:   0.2863
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:     1383, LBD2:      125, Binc:  7781038, Perm: 35916790
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:       36, #RST:        0, tASG: 260.4156, tLBD:   0.8171
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     6.12, cnfl:   217.13, bjmp:   214.81, rpc%:   0.0000
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        1, #sce:        2, core:        0, vdcy:   0.9600
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;SATISFIABLE: ..&#x2F;SR&#x2F;26_stack_cas_longest_true-unreach-call.i-cbmc-u2-sc2016.cnf
&lt;&#x2F;span&gt;&lt;span&gt;f6nidw-sc2012.cnf                             190399,564775 |time:     7.30
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:      96420, #decision:       238247, #propagate:         334674
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:    32849, #fix:     2853, #elm:   154697, prg%:  82.7473
&lt;&#x2F;span&gt;&lt;span&gt;      Clause|Remv:     7518, LBD2:      942, Binc:   376881, Perm:   206409
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:      432, #RST:       68, tASG:   0.9892, tLBD:   0.8494
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|eLBD:     4.65, cnfl:    17.02, bjmp:    15.92, rpc%:   0.0705
&lt;&#x2F;span&gt;&lt;span&gt;        misc|#rdc:        8, #sce:       18, core:      179, vdcy:   0.9623
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Initial search phase before a main strategy
&lt;&#x2F;span&gt;&lt;span&gt;      Result|file: .&#x2F;.ans_f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;span&gt;UNSAT: ..&#x2F;SR&#x2F;f6nidw-sc2012.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>File renaming in dired mode on GNU Emacs</title>
        <published>2020-03-08T00:00:00+00:00</published>
        <updated>2020-03-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-08-rename-in-dired-mode/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-08-rename-in-dired-mode/</id>
        
        <content type="html">&lt;p&gt;dired modeでリネームする際にデフォルト値として元ファイル名を使いたい場面が非常に多かったので
いじってみた。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;load &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;dired-aux&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;progn
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;dired-mark-read-file-name &lt;&#x2F;span&gt;&lt;span&gt;(prompt dir op&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;symbol arg files
&lt;&#x2F;span&gt;&lt;span&gt;                                              &amp;amp;optional default)
&lt;&#x2F;span&gt;&lt;span&gt;       (dired&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;up
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;symbol files
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;#&amp;#39;read-file-name
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt; prompt (dired&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;prompt arg files)) dir default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; default (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;nondirectory default))))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;元々は以下の定義です。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;;; dired-aux.el
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;dired-mark-read-file-name &lt;&#x2F;span&gt;&lt;span&gt;(prompt dir op&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;symbol arg files
&lt;&#x2F;span&gt;&lt;span&gt;                                         &amp;amp;optional default)
&lt;&#x2F;span&gt;&lt;span&gt;  (dired&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;up
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt; op&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;symbol files
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;#&amp;#39;read-file-name
&lt;&#x2F;span&gt;&lt;span&gt;   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt; prompt (dired&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mark&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;prompt arg files)) dir default))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;個人的にはかなり快適になりました。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>rustc-1.41.1 on nixOS</title>
        <published>2020-03-07T00:00:00+00:00</published>
        <updated>2020-03-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-07-rustc-on-nixos/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-07-rustc-on-nixos/</id>
        
        <content type="html">&lt;p&gt;sat-benchのバージョン上げる際にRust 1.41での新しい構文を使ったせいでrustc-1.41が必須になってしまった。
そんなことは全然問題ないかと思ったらnixpkgsでの標準のRustPlatformの使用バージョンが1.37だったのでま
ずrustc-1.41を指定することが必要になった。ところがrustc-1.41がコンパイルできない。
llvmのリンカがAMDGPUなんたらが見つからないというエラーが出る。時間を作って調べてみた。&lt;&#x2F;p&gt;
&lt;p&gt;結論から言うと、&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&quot;&gt;nixpkgs&lt;&#x2F;a&gt;をcloneして適当な新しめのブランチ（例えばnixpkgs-unstable）をcheckout。&lt;&#x2F;li&gt;
&lt;li&gt;top directoryで &lt;code&gt;nix-build -A rustc-1.41&lt;&#x2F;code&gt; を実行すると問題なく生成できる&lt;&#x2F;li&gt;
&lt;li&gt;なので
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;tree&#x2F;master&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;&quot;&gt;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_41_0.nix&lt;&#x2F;a&gt;
で&lt;code&gt;rustcVersion&lt;&#x2F;code&gt;を&amp;quot;1.41.1&amp;quot;に変更（&lt;code&gt;rustcSha256&lt;&#x2F;code&gt;は変更してないのだが。。。）してbuildする&lt;&#x2F;li&gt;
&lt;li&gt;生成できたら同じディレクトリで&lt;code&gt;nix-build -A sat-bench&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;生成できたら &lt;code&gt;nix-env -i path-to-the-derivation&lt;&#x2F;code&gt;を実行してインストール&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;これでOK。これまで&lt;code&gt;NIXPKGS&lt;&#x2F;code&gt;環境変数とかで指定したつもりだったのだが&lt;code&gt;nix-build&lt;&#x2F;code&gt;の利用が正解だったようだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;参考&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Nixpkgs&quot;&gt;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Nixpkgs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2020-03-19:_スナップショット&quot;&gt;2020-03-19: スナップショット&lt;&#x2F;h2&gt;
&lt;p&gt;Rust-1.42にバージョンアップ。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;diff --git a&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_41_0.nix b&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_41_0.nix
&lt;&#x2F;span&gt;&lt;span&gt;deleted file mode 100644
&lt;&#x2F;span&gt;&lt;span&gt;index b73d9b8ef26..00000000000
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_41_0.nix
&lt;&#x2F;span&gt;&lt;span&gt;+++ &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;@@ -1,48 +0,0 @@
&lt;&#x2F;span&gt;&lt;span&gt;-# New rust versions should first go to staging.
&lt;&#x2F;span&gt;&lt;span&gt;-# Things to check after updating:
&lt;&#x2F;span&gt;&lt;span&gt;-# 1. Rustc should produce rust binaries on x86_64-linux, aarch64-linux and x86_64-darwin:
&lt;&#x2F;span&gt;&lt;span&gt;-#    i.e. nix-shell -p fd or @GrahamcOfBorg build fd on github
&lt;&#x2F;span&gt;&lt;span&gt;-#    This testing can be also done by other volunteers as part of the pull
&lt;&#x2F;span&gt;&lt;span&gt;-#    request review, in case platforms cannot be covered.
&lt;&#x2F;span&gt;&lt;span&gt;-# 2. The LLVM version used for building should match with rust upstream.
&lt;&#x2F;span&gt;&lt;span&gt;-# 3. Firefox and Thunderbird should still build on x86_64-linux.
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-{ stdenv, lib
&lt;&#x2F;span&gt;&lt;span&gt;-, buildPackages
&lt;&#x2F;span&gt;&lt;span&gt;-, newScope, callPackage
&lt;&#x2F;span&gt;&lt;span&gt;-, CoreFoundation, Security
&lt;&#x2F;span&gt;&lt;span&gt;-, llvmPackages_5
&lt;&#x2F;span&gt;&lt;span&gt;-, pkgsBuildTarget, pkgsBuildBuild
&lt;&#x2F;span&gt;&lt;span&gt;-, fetchpatch
&lt;&#x2F;span&gt;&lt;span&gt;-} @ args:
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-import .&#x2F;default.nix {
&lt;&#x2F;span&gt;&lt;span&gt;-  rustcVersion = &amp;quot;1.41.0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-  rustcSha256 = &amp;quot;0jypz2mrzac41sj0zh07yd1z36g2s2rvgsb8g624sk4l14n84ijm&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-  # Note: the version MUST be one version prior to the version we&amp;#39;re
&lt;&#x2F;span&gt;&lt;span&gt;-  # building
&lt;&#x2F;span&gt;&lt;span&gt;-  bootstrapVersion = &amp;quot;1.40.0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-  # fetch hashes by running `print-hashes.sh 1.40.0`
&lt;&#x2F;span&gt;&lt;span&gt;-  bootstrapHashes = {
&lt;&#x2F;span&gt;&lt;span&gt;-    i686-unknown-linux-gnu = &amp;quot;d050d3a1c7c45ba9c50817d45bf6d7dd06e1a4d934f633c8096b7db6ae27adc1&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    x86_64-unknown-linux-gnu = &amp;quot;fc91f8b4bd18314e83a617f2389189fc7959146b7177b773370d62592d4b07d0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    arm-unknown-linux-gnueabihf = &amp;quot;4be9949c4d3c572b69b1df61c3506a3a3ac044851f025d38599612e7caa933c5&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    armv7-unknown-linux-gnueabihf = &amp;quot;ebfe3978e12ffe34276272ee6d0703786249a9be80ca50617709cbfdab557306&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    aarch64-unknown-linux-gnu = &amp;quot;639271f59766d291ebdade6050e7d05d61cb5c822a3ef9a1e2ab185fed68d729&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    i686-apple-darwin = &amp;quot;ea189b1fb0bfda367cde6d43c18863ab4c64ffca04265e5746bf412a186fe1a2&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    x86_64-apple-darwin = &amp;quot;749ca5e0b94550369cc998416b8854c13157f5d11d35e9b3276064b6766bcb83&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-  };
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-  selectRustPackage = pkgs: pkgs.rust_1_41_0;
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-  rustcPatches = [
&lt;&#x2F;span&gt;&lt;span&gt;-    (fetchpatch {
&lt;&#x2F;span&gt;&lt;span&gt;-      url = &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;QuiltOS&#x2F;rust&#x2F;commit&#x2F;f1803452b9e95bfdbc3b8763138b9f92c7d12b46.diff&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-      sha256 = &amp;quot;1mzxaj46bq7ll617wg0mqnbnwr1da3hd4pbap8bjwhs3kfqnr7kk&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;-    })
&lt;&#x2F;span&gt;&lt;span&gt;-  ];
&lt;&#x2F;span&gt;&lt;span&gt;-}
&lt;&#x2F;span&gt;&lt;span&gt;-
&lt;&#x2F;span&gt;&lt;span&gt;-(builtins.removeAttrs args [ &amp;quot;fetchpatch&amp;quot; ])
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_42_0.nix b&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_42_0.nix
&lt;&#x2F;span&gt;&lt;span&gt;new file mode 100644
&lt;&#x2F;span&gt;&lt;span&gt;index 00000000000..fd2eaa79868
&lt;&#x2F;span&gt;&lt;span&gt;--- &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;pkgs&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_42_0.nix
&lt;&#x2F;span&gt;&lt;span&gt;@@ -0,0 +1,48 @@
&lt;&#x2F;span&gt;&lt;span&gt;+# New rust versions should first go to staging.
&lt;&#x2F;span&gt;&lt;span&gt;+# Things to check after updating:
&lt;&#x2F;span&gt;&lt;span&gt;+# 1. Rustc should produce rust binaries on x86_64-linux, aarch64-linux and x86_64-darwin:
&lt;&#x2F;span&gt;&lt;span&gt;+#    i.e. nix-shell -p fd or @GrahamcOfBorg build fd on github
&lt;&#x2F;span&gt;&lt;span&gt;+#    This testing can be also done by other volunteers as part of the pull
&lt;&#x2F;span&gt;&lt;span&gt;+#    request review, in case platforms cannot be covered.
&lt;&#x2F;span&gt;&lt;span&gt;+# 2. The LLVM version used for building should match with rust upstream.
&lt;&#x2F;span&gt;&lt;span&gt;+# 3. Firefox and Thunderbird should still build on x86_64-linux.
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+{ stdenv, lib
&lt;&#x2F;span&gt;&lt;span&gt;+, buildPackages
&lt;&#x2F;span&gt;&lt;span&gt;+, newScope, callPackage
&lt;&#x2F;span&gt;&lt;span&gt;+, CoreFoundation, Security
&lt;&#x2F;span&gt;&lt;span&gt;+, llvmPackages_5
&lt;&#x2F;span&gt;&lt;span&gt;+, pkgsBuildTarget, pkgsBuildBuild
&lt;&#x2F;span&gt;&lt;span&gt;+, fetchpatch
&lt;&#x2F;span&gt;&lt;span&gt;+} @ args:
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+import .&#x2F;default.nix {
&lt;&#x2F;span&gt;&lt;span&gt;+  rustcVersion = &amp;quot;1.42.0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+  rustcSha256 = &amp;quot;0x9lxs82may6c0iln0b908cxyn1cv7h03n5cmbx3j1bas4qzks6j&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+  # Note: the version MUST be one version prior to the version we&amp;#39;re
&lt;&#x2F;span&gt;&lt;span&gt;+  # building
&lt;&#x2F;span&gt;&lt;span&gt;+  bootstrapVersion = &amp;quot;1.41.1&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+  # fetch hashes by running `print-hashes.sh 1.41.1`
&lt;&#x2F;span&gt;&lt;span&gt;+  bootstrapHashes = {
&lt;&#x2F;span&gt;&lt;span&gt;+    i686-unknown-linux-gnu = &amp;quot;085c8880ee635c2182504a1f2aaa2865455f9ff43511b3976a2140a8bfcce6f3&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    x86_64-unknown-linux-gnu = &amp;quot;a6d5a3b3f574aafc8f787fea37aad9fb8a7946b383ae5348146927192ff0bef0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    arm-unknown-linux-gnueabihf = &amp;quot;210090e13970646707325fc0270ef368cde3e2a4a7671f2cf374f57fcc8e3770&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    armv7-unknown-linux-gnueabihf = &amp;quot;531e4006fee503ba1581c3feca2932f99d0df97bc2361e33fa028e3d7060ccc1&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    aarch64-unknown-linux-gnu = &amp;quot;d54c0f9165b86216b6f1b499f451141407939c5dc6b36c89a3772895a1370242&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    i686-apple-darwin = &amp;quot;727cbbfa58a2698d577c99f2a221512bff6ba07ca98ec47cf7ec5043eca60c81&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+    x86_64-apple-darwin = &amp;quot;16615288cf74239783de1b435d329f3d56ed13803c7c10cd4b207d7c8ffa8f67&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+  };
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+  selectRustPackage = pkgs: pkgs.rust_1_42_0;
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+#  rustcPatches = [
&lt;&#x2F;span&gt;&lt;span&gt;+#    (fetchpatch {
&lt;&#x2F;span&gt;&lt;span&gt;+#      url = &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;QuiltOS&#x2F;rust&#x2F;commit&#x2F;f1803452b9e95bfdbc3b8763138b9f92c7d12b46.diff&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+#      sha256 = &amp;quot;1mzxaj46bq7ll617wg0mqnbnwr1da3hd4pbap8bjwhs3kfqnr7kk&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;+#    })
&lt;&#x2F;span&gt;&lt;span&gt;+#  ];
&lt;&#x2F;span&gt;&lt;span&gt;+}
&lt;&#x2F;span&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;+(builtins.removeAttrs args [ &amp;quot;fetchpatch&amp;quot; ])
&lt;&#x2F;span&gt;&lt;span&gt;diff --git a&#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix b&#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix
&lt;&#x2F;span&gt;&lt;span&gt;index 60da1eeaf5b..2d435f022e4 100644
&lt;&#x2F;span&gt;&lt;span&gt;--- a&#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix
&lt;&#x2F;span&gt;&lt;span&gt;+++ b&#x2F;pkgs&#x2F;top-level&#x2F;all-packages.nix
&lt;&#x2F;span&gt;&lt;span&gt;@@ -8846,13 +8846,13 @@ in
&lt;&#x2F;span&gt;&lt;span&gt;     inherit (darwin) apple_sdk;
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;-  rust_1_41_0 = callPackage ..&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_41_0.nix {
&lt;&#x2F;span&gt;&lt;span&gt;+  rust_1_42_0 = callPackage ..&#x2F;development&#x2F;compilers&#x2F;rust&#x2F;1_42_0.nix {
&lt;&#x2F;span&gt;&lt;span&gt;     inherit (darwin.apple_sdk.frameworks) CoreFoundation Security;
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;span&gt;-  rust = rust_1_41_0;
&lt;&#x2F;span&gt;&lt;span&gt;+  rust = rust_1_42_0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;-  rustPackages_1_41_0 = rust_1_41_0.packages.stable;
&lt;&#x2F;span&gt;&lt;span&gt;-  rustPackages = rustPackages_1_41_0;
&lt;&#x2F;span&gt;&lt;span&gt;+  rustPackages_1_42_0 = rust_1_42_0.packages.stable;
&lt;&#x2F;span&gt;&lt;span&gt;+  rustPackages = rustPackages_1_42_0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   inherit (rustPackages) cargo clippy rustc rustPlatform;
&lt;&#x2F;span&gt;&lt;span&gt;   inherit (rust) makeRustPlatform;
&lt;&#x2F;span&gt;&lt;span&gt;@@ -21946,6 +21946,7 @@ in
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;   thunderbird = callPackage ..&#x2F;applications&#x2F;networking&#x2F;mailreaders&#x2F;thunderbird {
&lt;&#x2F;span&gt;&lt;span&gt;     inherit (gnome2) libIDL;
&lt;&#x2F;span&gt;&lt;span&gt;+    inherit (rustPackages_1_42_0) cargo rustc;
&lt;&#x2F;span&gt;&lt;span&gt;     libpng = libpng_apng;
&lt;&#x2F;span&gt;&lt;span&gt;     gtk3Support = true;
&lt;&#x2F;span&gt;&lt;span&gt;   };
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Weird Rust Compile Error</title>
        <published>2020-03-01T00:00:00+00:00</published>
        <updated>2020-03-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-03-01-rust-error/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-03-01-rust-error/</id>
        
        <content type="html">&lt;p&gt;突然、こんなコンパイルエラーが出るようになった。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt; cargo install --path . --force
&lt;&#x2F;span&gt;&lt;span&gt;  Installing splr v0.3.1
&lt;&#x2F;span&gt;&lt;span&gt;   Compiling structopt-derive v0.4.2
&lt;&#x2F;span&gt;&lt;span&gt;error[E0277]: the trait bound `syn::expr::Expr: std::clone::Clone` is not satisfied
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; ~&#x2F;.cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;structopt-derive-0.4.2&#x2F;src&#x2F;attrs
&lt;&#x2F;span&gt;&lt;span&gt;.rs:28:10
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;28 |     Skip(Option&amp;lt;Expr&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;   |          ^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |          |
&lt;&#x2F;span&gt;&lt;span&gt;   |          expected an implementor of trait `std::clone::Clone`
&lt;&#x2F;span&gt;&lt;span&gt;   |          help: consider borrowing here: `&amp;amp;Option&amp;lt;Expr&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::option::Option&amp;lt;syn::expr::Expr&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;   = note: required by `std::clone::Clone::clone`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;他のリポジトリではならない。いくつか古いコミットまで戻すとエラーがなくなる。
どうも、proc-macro2のバージョンが上がった後でcargo updateしたのが原因で、その結果
何か変なのをダウンロードしているような気がするのだが、
他のリポジトリでcargo updateしてもこうはならない。ぐぐっても特に引っかかるものはなし。
うーむ、何がいかんのだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;とりあえず、古いcargo.lockを持ってきてコンパイルするときには&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo install ... --frozen --offline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とすることで急場を凌ぐことにした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-03-02&quot;&gt;2020-03-02&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;structopt-derive&lt;&#x2F;code&gt;のバージョンが0.4.4に上がっている。エラーもなくなったようだ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Feb.</title>
        <published>2020-02-11T00:00:00+00:00</published>
        <updated>2020-02-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-02-11-UNSATlog/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-02-11-UNSATlog/</id>
        
        <content type="html">&lt;h2 id=&quot;はじめに&quot;&gt;はじめに&lt;&#x2F;h2&gt;
&lt;p&gt;今期のビッグイベントはなんと言ってもSplr-0.3.0のリリース。めでたい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Splr-0.3.0リリース&quot;&gt;Splr-0.3.0リリース&lt;&#x2F;h2&gt;
&lt;p&gt;三ヶ月の開発期間を経て2月10日にようやくSplr-0.3.0をリリースすることができました。その更新内容から大事な部分を拾ってみると、&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;変数選択機構を最新のLearnt Rate based Branching with Reson Side Rewardingに基づくものに変更したこと。なお更新の単位は矛盾ではなく割当てから未割り当てまでで考えることにした。これは単なるアイデア。&lt;&#x2F;li&gt;
&lt;li&gt;タイムアウト用のスレッドを導入してEliminatorを残り時間を考えて自発的に中断するようにしたこと。こうしないと&lt;strong&gt;大きな問題では何時間でも変数除去をやっていた&lt;&#x2F;strong&gt;ようだ。&lt;&#x2F;li&gt;
&lt;li&gt;変数活性度の減衰率が意外に重要だということがわかったのでやや小さめにしたこと。これは小さくする、すなわち学習による更新が稀にしか起きなくすることで、結局リスタート時に大きな変化を生じさせなくする効果があり、それはつまり&lt;strong&gt;deep searchモードでリスタート発生を抑えようとしたのと同じような効果がある&lt;&#x2F;strong&gt;らしいことがわかったから。このパラメータだけで求解数が大きく違う。またdeep searchの理解が少し進んだので、deep saerchの重みを減らした（期間の減少、定期的な通常モードへの復帰、クールダウン期間の減少など）。&lt;&#x2F;li&gt;
&lt;li&gt;あとは標準的なtraitを様々導入したこと。サブモジュール間のインターフェイスが変わったので0.2.2ではなく0.3.0にナンバリング。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;これで6000行のプログラムの2000行ほどが更新されることになったし、質的にも結構大きな修正だった。多分この文章以外にはどこにも書かないだろうけど、上記強調部分は眼から鱗の出来事だった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ChronoBTの試み&quot;&gt;ChronoBTの試み&lt;&#x2F;h2&gt;
&lt;p&gt;前回から0.2.2の目玉として考えてきたChronoBTの実装は論文をちゃんと読んでみると、バックトラック時の再割り当ての手間を省くのは主目的ではなく、バックトラックコストが少ない学習節の作成から得られるむしろ副作用のようなものであることがわかった。ということでこれまでの安直な実装を目指していたブランチは全て見当外れ。0.3.0のリリース後に論文見ながら一からやり直すことになった。これが0.3.1の主目標になるでしょう。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ベンチマーク変更&quot;&gt;ベンチマーク変更&lt;&#x2F;h2&gt;
&lt;p&gt;ベンチマークをSAT Competition 2018ものからSAT RACE 2019に変更しました。過去のデータが使えなくなるのは大きいので延び延びになっていたけどようやく重い腰をあげた。下図が去年の公式データの結果のカクタスプロット（2つほどなんか変なデータがあったので除去が必要だった）。やはり500秒くらいで既にある程度の傾向は見て取れる。現実的な到達目標にしようと思う。これなら並列実行すれば今の環境でも1日掛からないくらいで1回のベンチマークを終わらせることができるし。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2020&#x2F;2020-02-11_cactus.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;さて、ここに（並列実行の影響補正用の適当なスケーリングありで）Splr-0.3.0でやってみた結果を追加してみると、絶望するほどじゃないじゃん。少なくとも下位グループの中位には位置づけできそうな感じだ。&lt;&#x2F;p&gt;
&lt;p&gt;あとはChronoBTを導入することで、どこまで伸ばすことができるか。期待しよう。&lt;&#x2F;p&gt;
&lt;p&gt;さらにJupyter labを導入しました。まあ慣れてしまえばいいことでRもPythonも同じようなもんだな。Pythonでプログラミングするつもりはないけど、まあ21世紀のPostScriptのようなもんだろう、図形表示言語という意味で。Rustカーネルも入れてみたけど、使いところがないなあ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;結び&quot;&gt;結び&lt;&#x2F;h2&gt;
&lt;p&gt;さあChronoBTの実装だ！下位グループから脱却できるかなあ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Function name as a 1-argumented closure</title>
        <published>2020-02-04T00:00:00+00:00</published>
        <updated>2020-02-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-02-04-function-name-as-closure/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-02-04-function-name-as-closure/</id>
        
        <content type="html">&lt;p&gt;rustc 1.41でcargo clippyを走らせて以下が指摘された。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo clippy
&lt;&#x2F;span&gt;&lt;span&gt;    Checking splr v0.3.0 (&#x2F;Users&#x2F;nash&#x2F;Repositories&#x2F;splr)
&lt;&#x2F;span&gt;&lt;span&gt;warning: redundant closure found
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;types.rs:394:69
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;394 |         let fs = File::open(path).map_or(Err(SolverError::IOError), | f | Ok(f))?;
&lt;&#x2F;span&gt;&lt;span&gt;    |                                                                     ^^^^^^^^^^^ help: remove closure as shown: `Ok`
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    = note: `#[warn(clippy::redundant_closure)]` on by default
&lt;&#x2F;span&gt;&lt;span&gt;    = help: for further information visit https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#redundant_closure
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで以下のように変更した。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-        let fs = File::open(path).map_or(Err(SolverError::IOError), |f| Ok(f))?;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;        let fs = File::open(path).map_or(Err(SolverError::IOError), Ok)?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なんだ、こう書けたのか。随分と関数型プログラミングらしくなるな。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Don&#x27;t use add-to-list in Emacs</title>
        <published>2020-02-02T00:00:00+00:00</published>
        <updated>2020-02-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-02-02-add-to-list/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-02-02-add-to-list/</id>
        
        <content type="html">&lt;p&gt;Emacsのコミットログより：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;While add-to-list often works with lexical variables, this is a hack that isn&#x27;t always effective; better tell the user not to try.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;へー、.emacsでよく使っているけど、大域変数だから関係ないと言えば関係ない。
しかし、習慣として使わないようにしておこうかな。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A visualization tool to analyze logic fomula</title>
        <published>2020-01-26T00:00:00+00:00</published>
        <updated>2020-01-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-01-26-CNF-visualization/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-01-26-CNF-visualization/</id>
        
        <content type="html">&lt;p&gt;CNF形式の論理式の特徴ををもっと視覚化できないものだろうか。&lt;&#x2F;p&gt;
&lt;p&gt;ベンチマークで使われている問題の中には3SATみたいに変数数が少ないのだが、どうやっても解けないものもある。
単に3SATなんだけも相転移点に近くて難しいのか、ランダムではあるが3SATではないのか、3SATではあるけどランダムではないのか（いやだったらむしろやさしくなりそう）、いったいどういう問題を相手にしているのか、ソルバーが何も考えずに取り組む前に人間が分析をしないことには進展はないのではないか？&lt;&#x2F;p&gt;
&lt;p&gt;さらに、SATソルバの中で与えられた論理式がどう変化していくかも可視化したいものだ。&lt;&#x2F;p&gt;
&lt;p&gt;というわけで何か統計量だけでなく色々と視覚的に表示してくれるツールが必要かなあという気がしてきた。
ググって出てくるのはこれくらい。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;C. Dodaro and A. Previti, &amp;quot;Minipref: A tool for preferences in SAT,&amp;quot; &lt;em&gt;CEUR Workshop Proc.&lt;&#x2F;em&gt;, pp. 1–9, 2019.&lt;&#x2F;li&gt;
&lt;li&gt;C. Sinz and E. M. Dieringer, &amp;quot;DPVIS - A tool to visualize the structure of SAT instances,&amp;quot; &lt;em&gt;Lect. Notes Comput. Sci.&lt;&#x2F;em&gt;, vol. 3569, pp. 257–268, 2005.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;どうもイマイチ。
JavaScript(Vue.js or Observable)で作るか、それともいっそのこと&lt;a href=&quot;https:&#x2F;&#x2F;pharo.org&quot;&gt;Pharo&lt;&#x2F;a&gt;に手を出してみようか（これこそSmalltalk環境の出番のようだがGraphvisの上位互換程度のことはできているのだろうか？）。&lt;&#x2F;p&gt;
&lt;p&gt;ちょっと考え中。というか調査しなければ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-01-28&quot;&gt;2020-01-28&lt;&#x2F;h2&gt;
&lt;p&gt;数日Pharo 8.0で遊んでみたんだけど、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Icebergがファイル .project の状態を理解できてないのでいつまで経ってもdirtyになる&lt;&#x2F;em&gt;
&lt;strong&gt;これは~&#x2F;.config&#x2F;git&#x2F;ignore でおそらくJava用に.projectを追加していたせいだった！&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pharo-vcs&#x2F;iceberg&quot;&gt;Iceberg&lt;&#x2F;a&gt;はコメントも付かずにほったらかしのissuesが多い、エラーへの対応がわからない&lt;&#x2F;li&gt;
&lt;li&gt;Iceberg, Metacelloあたりのドキュメントが古い&lt;&#x2F;li&gt;
&lt;li&gt;リリース8.0で何がどうなったのか情報なさすぎ&lt;&#x2F;li&gt;
&lt;li&gt;wiki情報も古い&lt;&#x2F;li&gt;
&lt;li&gt;Baselineが面倒くさそう&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;del&gt;というあたりがどうにも我慢できなくて、やはり使うのはやめることにした。エラーの発生が多すぎて、やる気が削がれた。しょうがない、D3.jsで頑張るしかないか。&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上の文は取り消して、もうしばらく遊んでみる。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2020-01-29&quot;&gt;2020-01-29&lt;&#x2F;h2&gt;
&lt;p&gt;Pharo 8.0でSystem Browserでプロジェクトを選んでコンテキストメニューからcommitしようとするとエラーになる。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;pharo-project&#x2F;pharo&#x2F;pull&#x2F;4423&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;なんか解決していることになっているようだが、以下のメソッドがないエラーなので、でっち上げた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IceLibgitRepository&lt;&#x2F;code&gt;にvalidatingプロトコルを追加&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IceLibgitRepository &amp;gt;&amp;gt; #isDetached&lt;&#x2F;code&gt;を定義&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;IceLibgitRepository &amp;gt;&amp;gt; #hasUnbornProject&lt;&#x2F;code&gt;を定義&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;    IceLibgitRepository &amp;gt;&amp;gt; isDetached
&lt;&#x2F;span&gt;&lt;span&gt;	^workingCopy isDetached
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;    IceLibgitRepository &amp;gt;&amp;gt; hasUnbornProject
&lt;&#x2F;span&gt;&lt;span&gt;	^false
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>New technologies for SAT solvers</title>
        <published>2020-01-21T00:00:00+00:00</published>
        <updated>2020-01-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-01-21-new-solver-technologies/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-01-21-new-solver-technologies/</id>
        
        <content type="html">&lt;p&gt;遅ればせながらSR2019のベンチマークを見てみた。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;CaDiCaL&quot;&gt;CaDiCaL&lt;&#x2F;h2&gt;
&lt;p&gt;デフォルト設定のみのエントリーで3位に位置するソルバ。作者を見たらBiere先生だった。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;chronological backtrack&lt;&#x2F;li&gt;
&lt;li&gt;dual restart mode&lt;&#x2F;li&gt;
&lt;li&gt;improving phase Saving&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;といったところが主に使っている新技術。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Chronological_Backtrack&quot;&gt;Chronological Backtrack&lt;&#x2F;h2&gt;
&lt;p&gt;まだチェックしてないがSC2018以降のトレンドみたい。こんな発想はなかった。
リスタートの抑制よりもさらに網羅的に探索するということか。原著は以下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A. Nadel and V. Ryvchin. Chronological backtracking. In &lt;em&gt;Theory and Applications of Satisfiability Testing - SAT 2018. Proceedings&lt;&#x2F;em&gt;, 2018.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;大事なところだけ読んでみた。えー、それってコスト削減になるのか？
リスタートを掛けずに先まで行けるのなら、色々と特徴量に対する影響は少しはあると思うが。&lt;&#x2F;p&gt;
&lt;p&gt;ちょっと変更したものだったら簡単に実装できたが、散々crashに悩まされる。
数日かかりそう。で、実装してみたけどちゃんと論文読まねば。単なるレベル0へのバックトラックの
ショートカットでしかないので差が出ない（ひどい。。。）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Dual_Restart_Mode&quot;&gt;Dual Restart Mode&lt;&#x2F;h2&gt;
&lt;p&gt;リスタートしないモードがUNSAT問題に効くので、リスタート戦略を切り替える技術。
ということはdeep searchが正当化されるかもしれない。
インターリーブはうまくいかない印象なんだけど、実はその実験はやってなかったかも。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Improving_Phase_Saving&quot;&gt;Improving Phase Saving&lt;&#x2F;h2&gt;
&lt;p&gt;一番よかったphaseセットを覚えておくという、VoPに似た感じの技術。
ただしこれまでのphaseと併用するとのこと。
またprefixという語が頻出している。なんだそりゃ？&lt;&#x2F;p&gt;
&lt;p&gt;これも重要らしいので、もう少しVoPを検討してみるか。
手っ取り早い導入としては、全ての割当てではなく、
割当量更新時のみFoCだかVoCのEMAを更新すると近い感じになるかもしれない。
リスタートの時にその値を利用するという方針なら試していないはず。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Reason-Side_Rate(Rewarding)&quot;&gt;Reason-Side Rate(Rewarding)&lt;&#x2F;h2&gt;
&lt;p&gt;これはCaDiCaLとは関係ないけど、Conflict History Based Branching (CHB)の論文で出てきた考え。
依存グラフの学習節のその先にも報酬を与えようとするもの。
実際実装してみるとよくなることもある。なんでだろう？　簡単に書いてあるのでどうしてなのか考えないとい
けない。逆向きの伝播を促すのか？だったら逆向きにでパンパした場合にfirstUIPになる可能性が高い
束の上限節に当たるリテラルだけ報酬を与えてもよさそうだが、やってみたらむしろ何もしない時よりも悪くなった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>UNSAT LOG, 2020, Jan.</title>
        <published>2020-01-15T00:00:00+00:00</published>
        <updated>2020-01-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2020/2020-01-15-SplrDL/" type="text/html"/>
        <id>https://shnarazk.github.io/2020/2020-01-15-SplrDL/</id>
        
        <content type="html">&lt;h1 id=&quot;正月も再検討&quot;&gt;正月も再検討&lt;&#x2F;h1&gt;
&lt;p&gt;年末から1月中旬までのSATソルバー開発記録unsatlogです。ひたすら再検討。同じところをグルグル回っているようなもので、今回も特に進展なしでした。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;極性に関する論文読んだ&quot;&gt;極性に関する論文読んだ&lt;&#x2F;h2&gt;
&lt;p&gt;インパクトのあるタイトルなので読んでみたが、残念なことに系統的ソルバーではなく統計的ソルバーの話。ランダムウォーク的な精錬過程において極性の分散がすごくいい尺度になるという話。論文には全く系統的ソルバーへの言及がないのはうまくいかなかったからだろうか。すごくわかる気がする。以前phaseを数ビットに拡張する話があったのでEMA→偏差に替えるのはいいかもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;と思ってSplrで実装実験したが、意外に結果が出ないもんだ。偏差が大きいものを優先するのはいいと思うのだが結果が出ない。偏差総和でearly restartをかけるのもありそうだが手をつけてない。&lt;&#x2F;p&gt;
&lt;p&gt;さらにこの考えから派生して変数ごとの矛盾の頻度(frequency of conflict; FOC)から現在の「問題」の難しさを判定してリスタートをかける方法に変化していった。が、こちらも結果が出なかった。やはり過去の履歴から将来の予測をするのは大変に難しい（マルコフ的な未来予測が可能ならNP完全ではないか）。さて、ではなぜLBDによるリスタートはうまくいくのだろう。問題の難しさではなく得られた知識そのものの評価だからだろうか。知識の有効性のマルコフ性？疑問だ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;リスタート間隔再検討&quot;&gt;リスタート間隔再検討&lt;&#x2F;h2&gt;
&lt;p&gt;どうしてdeep searchが必要なのかずっと疑問だったが、これはリスタートパラメータの動的チューニングをしているせいかもしれない。固定パラメータだとリスタートもブロックも起きない長いスパンが観測される。Splrは皮相的にパラメータの値を変えて無理矢理リスタートを起こしているのでそのような「リスタート停滞期間」を潰していた。そもそも探索のよさの評価を動的に変えていいものだろうか？筋が悪かったかも。評価を変えるのではなく感受性のスケールを変えるだけがいいのかもしれない。また、時間軸方向の利得最大化がLuby列ならこれはdeep searchの代わりになるかもと思ったがよく検討していない。&lt;&#x2F;p&gt;
&lt;p&gt;でかなりよさそうなものでベンチマークしてみたがやっぱり圧倒的な差が付いてしまう。なんでこのdeep search はこんなにいいのだ？また半年ほど悩む事になりそうだ。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;CHB再検討&quot;&gt;CHB再検討&lt;&#x2F;h2&gt;
&lt;p&gt;今回の目玉。リリースノートではSplr-0.2.1は修正CHBを使っていることになっているけど、改めて論文と見比べてみると随分違う。これをCHBと言っていいものだろうか。リリースノートを修正しなければいけないかも。という事で論文を見ながら再実装してみた。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Liang, J. H., Ganesh, V., Poupart, P. &amp;amp; Czarnecki, K.: Learning Rate Based Branching Heuristic for SAT Solvers, 2016.&lt;&#x2F;li&gt;
&lt;li&gt;Liang, J. H., Ganesh, V., Poupart, P., &amp;amp; Czarnecki, K.: Exponential Recency Weighted Average Branching Heuristic for SAT Solvers, 2016&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;何度も実装ミスを繰り返しながら論文に忠実にCHB、その延長のLRBを実装して、deep searchなしでマイクロベンチマークでは若干の性能劣化で済むようになったが、UNSAT問題が全然解けない。そしてベンチマークではどうやっても論文のようないい結果が出なかった。deep searchを抜いたのが悪かったのかCHB の実装が悪いのか？&lt;&#x2F;p&gt;
&lt;p&gt;また、LRBはCHBにReason Side Rate(RSR)とlocality extensionのアイデアを追加したもの。全部組み合わせた場合が一番いいことになっているのだけど、それらに関する実験結果が（またもや）それを支持しない。locality extensionの計算コストはバカにならないんじゃないか？これは遅延評価でいいんじゃないか、splr-0.2.1がやっているような。。。&lt;&#x2F;p&gt;
&lt;p&gt;ということでほぼ一ヶ月検討した結果、0.2.1の実装はやはりCHBの一種であり（何といってもEMA的なdecayを掛けているし）、それなりに同じ効果を既に得られているという結論を出さざるを得ない。locality extensionは自然に実装されている。RSRの判断はまだついてない。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;単位伝播時の監視リテラルへの集約&quot;&gt;単位伝播時の監視リテラルへの集約&lt;&#x2F;h2&gt;
&lt;p&gt;この手のヒューリスティックの検討に疲れたので軽いアイデアとしてpropagate中の未矛盾変数探索において最初に見つかったリテラルではなく、活性度が一番高いリテラル変数を選ぶ手法を思いついたのだが（活性度が高い変数は早く試されるので矛盾距離は短くなるはず）、これもうまくいかない。なぜ？探索コストの増大では説明できないことが起きている。このアイデアギブアップすべきかもう少し検討すべきか？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;&#x2F;h2&gt;
&lt;p&gt;ということで引き続き結論を出すことが求められているのは：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RSRの妥当性&lt;&#x2F;li&gt;
&lt;li&gt;リスタートパラメータ固定によるdeep search削除の可能性&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;やりたいことは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;実装レベルの改善：var heapはもっと軽量なものにできないだろうか。&lt;&#x2F;li&gt;
&lt;li&gt;時間があれば監視リテラルへの集約の効果の検討&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;といったところだろうか。なんか全然進まない。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SAT Solver Development Log</title>
        <published>2019-12-17T00:00:00+00:00</published>
        <updated>2019-12-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-12-17-blog/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-12-17-blog/</id>
        
        <content type="html">&lt;h1 id=&quot;はじめに&quot;&gt;はじめに&lt;&#x2F;h1&gt;
&lt;p&gt;自由気ままに研究をする生活は思ったほど自堕落でも非生産的でもなくそれなりにコミットを繰り返す生活ではあるけども、一体何を今週していたのか後で振り返ってもよくわからないまま今年が終わろうとしている。。おそらく1年後には「今年も早かった。何をしていたのか全然覚えていないなあ」ということになってしまうのは必定。やはり何か文章時な足跡は残した方がいいのではと思う。&lt;&#x2F;p&gt;
&lt;p&gt;記録メディアになりそうな世間で広く使われるWebサービスを見回してみると、Twitterはあまりにも時間軸に縛られむしろ文脈が霧散してしまう。Github Issueは実行前の決意表明なり問題意識が結論なく浮かび上がっているだけで知識の蓄積には程遠い（ような使い方しか個人的にはできていない）。Mediumは首尾一貫したそして成功したストーリーでないといけない雰囲気がある。そして、ここはメモに特化しすぎて日記ではない。まあ一つカテゴリーを作ればいいかもしれないが、図表の貼り付けやらwebからデータを保存して貼り付けたりをしながら記事を打ち込んでいくのはのは面倒臭いものである。&lt;&#x2F;p&gt;
&lt;p&gt;だったらその前処理としてポチポチiPhoneやらipadでも打てるような、執筆が習慣づけるような（メインマシンでベンチマークを実行していても入力できることが肝心）そういう手軽な媒体（それは結局Pagesに決定した。）で作成して、そのplain text版をここに貼り付けることにしてみよう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Splr開発の行き詰まり&quot;&gt;Splr開発の行き詰まり&lt;&#x2F;h1&gt;
&lt;p&gt;さて、これまでのSplrの開発においてはリスタートは極力減らす方向を取ってきた。これは、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;3SATなどのインスタンスでは明らかに、リスタートを減らし深く組合せを調査するdeep searchが非常に有効である。&lt;&#x2F;li&gt;
&lt;li&gt;そもそも静的リスタートが提唱された時代に、early restartは求解可能性に支障をきたす可能性が指摘されている。&lt;&#x2F;li&gt;
&lt;li&gt;多少のリスタートを繰り返しても組合せ爆発に対応できるのか疑問。&lt;&#x2F;li&gt;
&lt;li&gt;リスタートによりランダムに部分解を見つけても、統合できなければ完全解には到達しない。むしろ相関のある割り当て集合を（探索空間を絞って）早く見つける方が得。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;という理由による。しかし、どう頑張っても解ける問題が限定されてきて、ある種の問題には全滅という状況を見ていてどうも求解能力そのものが行き詰まっている。パラメータチューニングではどうにもならないのではないかという気がしてきた。これが今月1番重要な問題である。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;爆発的リスタート導入の検討開始&quot;&gt;爆発的リスタート導入の検討開始&lt;&#x2F;h1&gt;
&lt;p&gt;ということで積極的にリスタートを行う方向に舵を取ってみることにした。根拠は以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;現在解けている問題に対してはせいぜい少し遅くなるだけではないだろうか。&lt;&#x2F;li&gt;
&lt;li&gt;問題の特性を動的に取得したいなら様々な観察は必要。100万次元ならそれに見合った「観察」はするべき。だとすると100万リスタートは目指してもよいかもしれない。&lt;&#x2F;li&gt;
&lt;li&gt;意図せずして特定の問題カテゴリーに強いソルバーよりもランダムに解ける方がベース実装として望ましいのでは。&lt;&#x2F;li&gt;
&lt;li&gt;うまくいけば、不思議なdeep searchのコードを消すことができるかも。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;いろいろやっているが今のところ、性能向上は見られず、解ける問題は変わらない。探索可能空間はそれほど変わらないようだ。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;Splr_Version_0.2.1リリース&quot;&gt;Splr Version 0.2.1リリース&lt;&#x2F;h1&gt;
&lt;p&gt;リスタートの研究は時間がかかりそうなのでClauseIdをstruct化したものを&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;releases&#x2F;tag&#x2F;splr-0.2.1&quot;&gt;0.2.1&lt;&#x2F;a&gt;としてリリースした。&lt;&#x2F;p&gt;
&lt;p&gt;今回はここまで。今回は準備号Vol.0, No.0として、こんな感じで来年から本格的に始めてみよう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>End of Rust on Now</title>
        <published>2019-12-17T00:00:00+00:00</published>
        <updated>2019-12-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-12-17-end-of-rust-on-now/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-12-17-end-of-rust-on-now/</id>
        
        <content type="html">&lt;p&gt;Zeit&#x2F;Nowにデプロイしようとするとコンパイルエラーになる状態がかなり続いていたのだけど、
今日いろいろ調べてNowでのRustのサポートが取り下げになっていたことを理解した。
コミュニティベースで頑張ろうとしているgithub リポジトリも見つけたが結局力及ばず、な状態のようだ。&lt;&#x2F;p&gt;
&lt;p&gt;うーん、これはもうダメっぽい。がっかりすぎる。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Using Nix on Catalina</title>
        <published>2019-10-08T00:00:00+00:00</published>
        <updated>2019-10-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-10-08-nix-on-catalina/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-10-08-nix-on-catalina/</id>
        
        <content type="html">&lt;p&gt;Catalinaでは&#x27;&#x2F;&#x27;にディレクトリが作れなくなってしまったので
&lt;code&gt;&#x2F;nix&lt;&#x2F;code&gt;がどうにもならんことになってしまった。
&lt;a href=&quot;https:&#x2F;&#x2F;discourse.nixos.org&#x2F;t&#x2F;current-status-of-nix-on-macos-catalina&#x2F;4286&#x2F;2&quot;&gt;Discourseのトピック&lt;&#x2F;a&gt;によれば、
パーティションを作ってマウントすることが必要らしい（&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;2925&quot;&gt;参考&lt;&#x2F;a&gt;）。
うーむ、どうもこれしかなさそうなんだけど、
もうちょっとやり方が確定するまでメインマシンのアップグレードはしばらく待ってみようか。&lt;&#x2F;p&gt;
&lt;p&gt;ちなみに現在、Nixで（メインマシンに）インストールしているものは以下の通り。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;coreutils-8.31&lt;&#x2F;strong&gt; -- あって当然のGNU系のオプションを使うために重要&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;emacs-26.3&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;git-2.23.0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;gnupg-2.2.17&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;nix-2.3&lt;&#x2F;li&gt;
&lt;li&gt;nodejs-12.5.0 -- 各種サイトの生成に使用中&lt;&#x2F;li&gt;
&lt;li&gt;nss-cacert-3.46&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;parallel-20190722&lt;&#x2F;strong&gt; -- &lt;code&gt;git catchup&lt;&#x2F;code&gt;が依存している&lt;&#x2F;li&gt;
&lt;li&gt;pinentry-1.1.0&lt;&#x2F;li&gt;
&lt;li&gt;R-3.6.1-wrapper -- Observableでcactus plotが描ければ捨ててもよくなった&lt;&#x2F;li&gt;
&lt;li&gt;sat-bench-0.6.3 -- メインマシンでは重要&lt;&#x2F;li&gt;
&lt;li&gt;source-highlight-3.1.8 -- なくてもいい&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;tmux-2.9a&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;xz-5.2.4&lt;&#x2F;strong&gt; -- benchmark結果の圧縮に使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;特に重要なものはcoreutils, emacs, git, parallel, tmux, xzあたり。
sat-bench, R, source-highlightは多分捨てられる。
gunpg, nodejsは公式バイナリでもいいか。&lt;&#x2F;p&gt;
&lt;p&gt;とすると、残念だけど、色々と設定が必要ならこの際Nixをやめられない訳ではないようだ。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-10-08T19:00:00_STEPS_THAT_WORK&quot;&gt;2019-10-08T19:00:00 STEPS THAT WORK&lt;&#x2F;h1&gt;
&lt;p&gt;などと言いつつ、敷居が低い人柱を志願してしまった。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;synthetic.confを作る&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo echo nix &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;System&#x2F;Volumes&#x2F;Data&#x2F;private&#x2F;etc&#x2F;synthetic.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;（いや&#x2F;usr&#x2F;bin&#x2F;vimを使うことになるのだけど。）&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;nix&lt;&#x2F;code&gt;を有効にするためまずreboot&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ボリューム&lt;code&gt;Nix&lt;&#x2F;code&gt;を作る&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;diskutil apfs addVolume disk1 APFSX Nix -mountpoint &#x2F;nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;色々attributeを設定&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;diskutil enableOwneship &#x2F;nix
&lt;&#x2F;span&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;diskutil apfs encrypt Nix -user disk
&lt;&#x2F;span&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;chown -R &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;nixをインストール&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;curl https:&#x2F;&#x2F;nixos.org&#x2F;nix&#x2F;install &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;移動されたディレクトリから復帰するのはownerなどが変わっていたのでやめたほうがいいだろう。
ということでnix由来のプログラムも復活。メインマシンも更新しよう。&lt;&#x2F;p&gt;
&lt;p&gt;しかしCatalinaはinteractive shellをzshに変えよとうるさい。色々設定を変えるはめんどいんじゃあ。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2019-10-17&quot;&gt;2019-10-17&lt;&#x2F;h3&gt;
&lt;p&gt;リブートしたらNixボリュームが&#x2F;Volume&#x2F;Nixにマウントされていた。&#x2F;nixはあるけど空。
ということで上記の方法で設定しても、毎回、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;diskutil umount &#x2F;Volume&#x2F;Nix
&lt;&#x2F;span&gt;&lt;span&gt;sudo &#x2F;usr&#x2F;sbin&#x2F;diskutil mount -mountPoint &#x2F;nix Nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しないといけないっぽい。マウントポイントは永続的ではないのか。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Directions for the next Splr</title>
        <published>2019-09-20T00:00:00+00:00</published>
        <updated>2019-09-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-09-20-splr015/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-09-20-splr015/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;gitlab.com&#x2F;shnarazk&#x2F;SAT&#x2F;splr&#x2F;issues&#x2F;90&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol&gt;
&lt;li&gt;global control of restart
&#x27;global&#x27;は大局観ってやつ。&lt;code&gt;restart_step&lt;&#x2F;code&gt; の存在はやはり気になる。今のソルバーはまだ何かに気づけていない。&lt;&#x2F;li&gt;
&lt;li&gt;[solved by 0.1.5] a better bounded var-rewarding mechanism
ASIDS, CHBどちらも確認済みではあるのだが。ただやる意味あるのかちょっと疑問に思ってきた。
時間変化するのだから、求解直後の値を見てもそこには最終ステップを解くのに必要だった情報しか残っていないと考えるべきだろう。
従って、最適な値分散なんてものは存在しない。そこに至るまでの履歴も重要。
もう一つ、zero-sum rewardingについても検討のこと。&lt;&#x2F;li&gt;
&lt;li&gt;new category of problems based on something like FUP, CNF&lt;&#x2F;li&gt;
&lt;li&gt;investigate the reason why satcoin groups require &#x27;deep search&#x27; to be solved.
これは1に関係するのだろう。FUPのデータも必要かも。
ただし0.1.5では0.1.4で見られたきれいなセパレーションがなくなっている。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;2019-10-27:_A_better_bounded_var-rewarding_mechanismに関する意外な展開&quot;&gt;2019-10-27: A better bounded var-rewarding mechanismに関する意外な展開&lt;&#x2F;h2&gt;
&lt;p&gt;夏から9月にかけてリスタートを掛けても意外に割り当て対象が限定されているという話を散々やってきていた
のだが、よくわからぬregressionの解消に取り組んでいてとんでもないことがわかった。結局、CHBという
strictly bounded var-rewardingはやはりいい結果につながっていたようだ。あまりによい成果が出たので一旦
計画を延期して0.1.5をリリースすることにしよう。0.1.5がなぜいいのかはリリース後に検討。ここの話に戻っ
てくるのはさらにその後で十分ということになった。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2019-11-29:_0.2.0のリリース&quot;&gt;2019-11-29: 0.2.0のリリース&lt;&#x2F;h2&gt;
&lt;p&gt;パラメータチューニングの消耗戦の合間にHaskellでいうところの実行速度に影響を及ぼさないnewtype的な型安全性を導入してみた。
実際にRustでも速度低下が見られなかったので内部構造の変更は大きな変更だろうということで0.2.0に格上げ。
パラメータチューニングの方は変数活性度の減衰係数でわずか1問の進展が見られたのでそれも入れて0.2.0をリリース。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1:大局観は進展見られず&lt;&#x2F;li&gt;
&lt;li&gt;3:問題のカテゴライズは全く手付かず&lt;&#x2F;li&gt;
&lt;li&gt;4:deep search問題は進展見られず&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Splr-0.1.4 released</title>
        <published>2019-09-14T00:00:00+00:00</published>
        <updated>2019-09-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-09-14-splr014/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-09-14-splr014/</id>
        
        <content type="html">&lt;p&gt;2019-09-14にsplr-0.1.4をリリースした。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;splr&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;splr&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;性能劣化を極力抑えて、いくつかのバグを取って今後の拡張のための足回りを固めたリリース。
0.1.3以降の半年は（とんでもなく）頑張ったのだけど、結局性能改善には繋がらなかった。ということで0.2.0に向けてのTODOは、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;var rewarding&#x2F;restart policy: どうしてもどんどん値が大きくなっていくVSIDSはやめたいよねえ&lt;&#x2F;li&gt;
&lt;li&gt;usage of global statistics: これは問題の分類に使うべきなんだろうけど、成果が出るまでに必要な計算リ
ソースがとてもまかなえないだろう。&lt;&#x2F;li&gt;
&lt;li&gt;SAT competition 2019の情報収拾：もうタダでproceedingsを手に入れられる時期は過ぎてしまっただろう
か。。。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;くらいか。来週には始動しよう。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A trait definition with lifetimes</title>
        <published>2019-08-08T00:00:00+00:00</published>
        <updated>2019-08-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-08-08-rust-lifetime/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-08-08-rust-lifetime/</id>
        
        <content type="html">&lt;p&gt;あるプログラムでアルゴリズムのバリエーションを併用するため、以下のトレイトが必要になったとしよう。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, item: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで、実装ごとにメソッド&lt;code&gt;add&lt;&#x2F;code&gt;に渡す引数を変えたいので、関連型&lt;code&gt;Item&lt;&#x2F;code&gt;を引数の型としてもたせた。
例えば、以下のような実装を実現したい。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;単なる数値(&lt;code&gt;f64&lt;&#x2F;code&gt;)を受け取って計算する&lt;code&gt;add&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;何か構造体へのmut pointer(&lt;code&gt;&amp;amp;mut Var&lt;&#x2F;code&gt;)をもらってそれに対して変更を加えながら計算する&lt;code&gt;add&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;それぞれ以下のような定義になった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;RestartByLBD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, item: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そして問題となる二つ目の定義：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Var;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, v: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで &lt;code&gt;r.add(4);&lt;&#x2F;code&gt; とか &lt;code&gt;r.add(&amp;amp;mut v);&lt;&#x2F;code&gt; とか自由に書けてスマート。
つまり、意味もなく&lt;code&gt;r.add(&amp;amp;mut 4)&lt;&#x2F;code&gt;なんてことを強制されずに済んだ。
ところが、これはコンパイルエラーになる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0106]: missing lifetime specifier
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;var.rs:114:17
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;114 |     type Item = &amp;amp;mut Var;
&lt;&#x2F;span&gt;&lt;span&gt;    |                 ^ help: consider using the named lifetime: `&amp;amp;&amp;#39;a`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ポインタを渡しているので生存時間が必要らしい。
うーむ、メソッド&lt;code&gt;add&lt;&#x2F;code&gt;の中ではCopy可能なフィールドを参照、変更するだけなので生存時間が問題になることはないと思うのだけど。。。
ともあれ、上記のヘルプに従ってこの引数に生存時間を追加した。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Memory &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Ema2;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span&gt; Var;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, v: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;すると以下のエラー。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0261]: use of undeclared lifetime name `&amp;#39;a`
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;var.rs:114:18
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;114 |     type Item = &amp;amp;&amp;#39;a mut Var;
&lt;&#x2F;span&gt;&lt;span&gt;    |                  ^^ undeclared lifetime
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なので、生存期間&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;を宣言できる唯一の場所&lt;code&gt;impl&lt;&#x2F;code&gt;に追加する（後述）。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;impl&amp;lt;&amp;#39;a&amp;gt; RestartHeuristics for VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    type Memory = Ema2;
&lt;&#x2F;span&gt;&lt;span&gt;    type Item = &amp;amp;&amp;#39;a mut Var;
&lt;&#x2F;span&gt;&lt;span&gt;    fn add(&amp;amp;mut self, v: Self::Item) {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;すると今度は以下のエラー。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0207]: the lifetime parameter `&amp;#39;a` is not constrained by the impl trait, self type, or predicates
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;var.rs:112:6
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;112 | impl&amp;lt;&amp;#39;a&amp;gt; RestartHeuristics for VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    |      ^^ unconstrained lifetime parameter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;定義したものはトレイト（指示詞）かself型か述語(predicates)中で使え、だそうなので、
トレイトに追加してみる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics&amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, item: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで、この生存期間パラメータの追加を各実装に反映させないと以下のエラーになる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0726]: implicit elided lifetime not allowed here
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;restart.rs:100:6
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;100 | impl RestartHeuristics for RestartByLBD {
&lt;&#x2F;span&gt;&lt;span&gt;    |      ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `&amp;lt;&amp;#39;_&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;error[E0726]: implicit elided lifetime not allowed here
&lt;&#x2F;span&gt;&lt;span&gt;   --&amp;gt; src&#x2F;var.rs:112:10
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;112 | impl&amp;lt;&amp;#39;a&amp;gt; RestartHeuristics for VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    |          ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `&amp;lt;&amp;#39;_&amp;gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下のように各実装に追加して、これで解決。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ポインタが出てくるのでトレイトには生存期間パラメータが必要&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;usize&lt;&#x2F;code&gt;に対してはワイルドカードでOK&lt;&#x2F;li&gt;
&lt;li&gt;構造体へのポインタに対しては、それをトレイトのパラメータに反映&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;RestartHeuristics&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;RestartByLBD {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, item: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;```	
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;```rust
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; RestartHeuristics&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;VarSet {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Item &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &amp;amp;&amp;#39;a mut&lt;&#x2F;span&gt;&lt;span&gt; Var;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, item: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Item) {&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで&lt;&#x2F;p&gt;
&lt;p&gt;implやtraitキーワードで導入した（型や生存期間）変数は、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;トレイト名（指示詞）&lt;&#x2F;li&gt;
&lt;li&gt;Self -- &lt;code&gt;fn (&amp;amp;&#x27;a mut self,...)&lt;&#x2F;code&gt; ということか &lt;&#x2F;li&gt;
&lt;li&gt;述語(predicates) -- whereの後の型（生存期間）制約&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;で使わないといけない。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;参考&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;52318662&#x2F;what-is-a-predicate-in-rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>About Observable</title>
        <published>2019-07-31T00:00:00+00:00</published>
        <updated>2019-07-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-07-31-observable/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-07-31-observable/</id>
        
        <content type="html">&lt;p&gt;Javascript版jupyterのようなものの一つの&lt;a href=&quot;https:&#x2F;&#x2F;observablehq.com&#x2F;&quot;&gt;Observable&lt;&#x2F;a&gt;。
可視化の結果を貼り付けられるように、Nuxtベースのこのブログに組み込めないか現在考え中。
とりあえず[こういうこと](dead link https:&#x2F;&#x2F;observablehq.com&#x2F;d&#x2F;1cbb7a450b192e69)ができるなら、
やる価値はありそうだ。&lt;&#x2F;p&gt;
&lt;p&gt;まず、以下のコードでObservableのノートは一つのJavascriptにexportできるらしい。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;script type&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{Runtime, Inspector} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@observablehq&#x2F;runtime@4&#x2F;dist&#x2F;runtime.js&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;notebook &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;api.observablehq.com&#x2F;d&#x2F;1cbb7a450b192e69.js?v=3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Runtime().&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;(notebook, Inspector.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(document.body));
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なので、それをfetchするような専用のテンプレートを用意すれば埋め込めるはず。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pages&#x2F;_year&#x2F;_slug&#x2F;index.vue&lt;&#x2F;li&gt;
&lt;li&gt;pages&#x2F;_year&#x2F;_slug&#x2F;observable&#x2F;index.vue&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;みたいにすればいいのでは。でその中身は、&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;はて？ templateの中に書けるのかしらん？
さっきのコードをちゃんと読んで、だんだんわかってきた。
jquery的なDOM mountが前提だ。vueの仮想DOMとは相性悪そう。。。&lt;&#x2F;p&gt;
&lt;script type=&quot;module&quot;&gt;
import {Runtime, Inspector} from &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@observablehq&#x2F;runtime@4&#x2F;dist&#x2F;runtime.js&quot;;
import notebook from &quot;https:&#x2F;&#x2F;api.observablehq.com&#x2F;d&#x2F;1cbb7a450b192e69.js?v=3&quot;;
new Runtime().module(notebook, Inspector.into(document.body));
&lt;&#x2F;script&gt;
&lt;p&gt;とりあえずでっち上げたもの： &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;shnarazk.now.sh&#x2F;obs&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;shnarazk.now.sh&#x2F;obs&#x2F;index.html&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;routerを設定しないといけない？？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2019-08-01T21:05_上手くいったversion_0.1&quot;&gt;2019-08-01T21:05 上手くいったversion 0.1&lt;&#x2F;h2&gt;
&lt;p&gt;まずインデックスページにJSONおよびエントリをでっち上げて
nuxt-linkで振ってみる。このようなObservable由来のページは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pages&#x2F;_year&#x2F;_slug&#x2F;obs&#x2F;index.vue&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;に処理させることにした。index.vueの中身は以下の通り。
template中のscriptはObservableのマニュアルにあったものをそのまま流用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Header title&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Embedded Observable&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;section class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;section&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;div id&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Observed&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;EntryFooter tags&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;[&amp;#39;Observable&amp;#39;]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;section&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;script type&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;        Inspector
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@observablehq&#x2F;runtime@4&#x2F;dist&#x2F;runtime.js&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;notebook &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;api.observablehq.com&#x2F;d&#x2F;1cbb7a450b192e69.js?v=3&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Runtime().&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;(notebook, Inspector.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;#Observed&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Header &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;~&#x2F;components&#x2F;TheHeader&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;EntryFooter &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;~&#x2F;components&#x2F;EntryFooter&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  components: {
&lt;&#x2F;span&gt;&lt;span&gt;    Header,
&lt;&#x2F;span&gt;&lt;span&gt;    EntryFooter
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;仮想DOMとの協調は不安定だが中身は&lt;code&gt;#Obesarbable&lt;&#x2F;code&gt;な要素に取り込まれ、
他のエントリと同じ体裁で表示できるようになった。
DOMの上書き問題は適切なidを作成してやればいいだろう。
あとはvuexにうまく取り込めばいい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2019-08-03T21:05_上手くいったversion_0.9&quot;&gt;2019-08-03T21:05 上手くいったversion 0.9&lt;&#x2F;h2&gt;
&lt;p&gt;先日の方法を延長するだけでうまくいきそうだ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;mdから作ったjsonファイルにObservable用の手書きJSONを混ぜてvuexに登録&lt;&#x2F;li&gt;
&lt;li&gt;Observableのnotebookに対するend pointは先に書いた通り
&lt;ul&gt;
&lt;li&gt;pages&#x2F;_year&#x2F;_slug&#x2F;obs&#x2F;index.vue
に対応させる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;canvasの埋め込み先はObservableでのnotebook idを&lt;code&gt;_sulg&lt;&#x2F;code&gt;としたユニークな&lt;code&gt;dvi&lt;&#x2F;code&gt;要素にすることで、
仮想DOMによる干渉を極力避ける。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;\deep\&lt;&#x2F;code&gt;対応したCSSを用意してあげる。
ただしcanvasのサイズがピクセルで固定なのはどう対応したものか見当つかない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;まあ、これくらいで最低限のことはできるようになった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&amp;lt;template&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Header title&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Embedded Observable Notebook&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;section class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;section&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;h1 class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;title has-text-primary has-text-weight-semibold&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;a :href&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;#39;https:&#x2F;&#x2F;observablehq.com&#x2F;d&#x2F;&amp;#39; + $route.params.slug&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          Id #_{{ $route.params.slug }}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;h1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;div :id&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;#39;_&amp;#39; + $route.params.slug&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;observable-content&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;EntryFooter :tags&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;[&amp;#39;Observable&amp;#39;]&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;section&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;script type&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;        Inspector
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;@observablehq&#x2F;runtime@4&#x2F;dist&#x2F;runtime.js&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;notebook &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;api.observablehq.com&#x2F;d&#x2F;{{$route.params.slug}}.js?v=3&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span&gt;Runtime().&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;module&lt;&#x2F;span&gt;&lt;span&gt;(notebook, Inspector.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;{{&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;#_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39; + $route.params.slug}}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Header &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;~&#x2F;components&#x2F;TheHeader&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;EntryFooter &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;~&#x2F;components&#x2F;EntryFooter&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export default &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  components: {
&lt;&#x2F;span&gt;&lt;span&gt;    Header,
&lt;&#x2F;span&gt;&lt;span&gt;    EntryFooter
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A Consideration about Restart (2019-07-31)</title>
        <published>2019-07-31T00:00:00+00:00</published>
        <updated>2019-09-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-07-31-restart/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-07-31-restart/</id>
        
        <content type="html">&lt;h3 id=&quot;これまでのまとめ&quot;&gt;これまでのまとめ&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2019&#x2F;2019-07-21-first-UIP-distribution&#x2F;&quot;&gt;First UIP distribution (2019-07-21)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2019&#x2F;2019-07-11-varact-distribution&#x2F;&quot;&gt;Development of Var activities (2019-07-11)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2019&#x2F;4f2a110a30ee837b&#x2F;obs&#x2F;&quot;&gt;Some Stats about Partial Restart (2019-08-04)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。
しかし、リスタートは本当に必要なのだろうか。
途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、
適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;クラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行&lt;&#x2F;li&gt;
&lt;li&gt;停滞したら大きくジャンプして次のクラスタを探す&lt;&#x2F;li&gt;
&lt;li&gt;クラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。
これは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。
それらを集めればこれは非常によい局所性を示すようになるのではなかろうか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;この仮定が正しいなら、&lt;strong&gt;変数の最終割当て&lt;&#x2F;strong&gt;と&lt;strong&gt;求解対象のクラスタの時刻分布&lt;&#x2F;strong&gt;
は相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。
与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。&lt;&#x2F;p&gt;
&lt;p&gt;ただ、ここの「変数割当て」というのは定義が難しい。
割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。
部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。&lt;&#x2F;p&gt;
&lt;p&gt;結局、その意味するものは&lt;a href=&quot;&#x2F;2019&#x2F;2019-07-11-varact-distribution&#x2F;&quot;&gt;Development of Var activities (2019-07-11)&lt;&#x2F;a&gt;で考えた
&lt;code&gt;変数活性度の分散&lt;&#x2F;code&gt;、あるいはその近似のFUP集合の大きさに帰着するようだ。&lt;&#x2F;p&gt;
&lt;p&gt;この結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。
ということで&lt;a href=&quot;&#x2F;2019&#x2F;4f2a110a30ee837b&#x2F;obs&#x2F;&quot;&gt;Some Stats about Partial Restart (2019-08-04)&lt;&#x2F;a&gt;で実装を試し
てみたのだが、いい成果にはならなかった。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-08-20&quot;&gt;2019-08-20&lt;&#x2F;h1&gt;
&lt;p&gt;およそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。&lt;&#x2F;p&gt;
&lt;p&gt;リテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。
&lt;strong&gt;だからリスタートには意味がある。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。
SATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。&lt;&#x2F;p&gt;
&lt;p&gt;現在のrewarding &amp;amp; phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。
これは矛盾している部分から割り当てようとするため。
その結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。
クラスタを維持するという目的に関しては部分的リスタートの効果は疑問。&lt;&#x2F;p&gt;
&lt;p&gt;クラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。
その不動点は問題を構成する閉集合そのものになってしまう。&lt;&#x2F;p&gt;
&lt;p&gt;にも関わらず、その増え方には特徴が見られる。
明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。
変数数が少ない3SAT問題などでは短期間で極大化してしまう。&lt;&#x2F;p&gt;
&lt;p&gt;停滞期は難しいクラスタに突っ込んだ状態と考えてよい。
停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。
実験結果はこの方向性を強く示唆しているようだ。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-08-24&quot;&gt;2019-08-24&lt;&#x2F;h1&gt;
&lt;p&gt;さらにscrap and build。&lt;&#x2F;p&gt;
&lt;p&gt;EMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。
しかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。
ハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。
手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。&lt;&#x2F;p&gt;
&lt;p&gt;求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-08-28&quot;&gt;2019-08-28&lt;&#x2F;h1&gt;
&lt;p&gt;名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。&lt;&#x2F;p&gt;
&lt;p&gt;リスタートは思ったほどリセットではない。よくよく気づいてなかったけど、
例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。
むしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、
求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。
ハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;2019-07-31_effect-of-restarts.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。&lt;&#x2F;p&gt;
&lt;p&gt;リスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。
一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。
履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。&lt;&#x2F;p&gt;
&lt;p&gt;また、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。&lt;&#x2F;p&gt;
&lt;p&gt;一方、FUP拡張期でのリスタートはどういう意味があるのだろう。
停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。
FULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-09-03_Restart-As-Swapping-FULs&quot;&gt;2019-09-03 Restart-As-Swapping-FULs&lt;&#x2F;h1&gt;
&lt;p&gt;give up中。&lt;&#x2F;p&gt;
&lt;p&gt;大域的な尺度が出たとしてそれをどう使えばよいかわからない。
動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。&lt;&#x2F;p&gt;
&lt;p&gt;そもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。
ただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。&lt;&#x2F;p&gt;
&lt;p&gt;ということからローカルな尺度 + &lt;strong&gt;リスタートの意義を反映した変数の重み付け&lt;&#x2F;strong&gt; が重要な気がしてきた。
この視点から見てCHBはどうなんだろうか。
複雑すぎやしないだろうか。
このところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2019-09-10&quot;&gt;2019-09-10&lt;&#x2F;h1&gt;
&lt;p&gt;一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは
非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、
アルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい
ようだ。で、今のところ&lt;strong&gt;リスタートの意義を反映した変数の重み付け&lt;&#x2F;strong&gt; はうまくいっていない。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。
まあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。
だとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。
うーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。&lt;&#x2F;li&gt;
&lt;li&gt;LBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。
これもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。
判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;というわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では
このロジックの無視（反転）は明らかな性能劣化を起こしていた。&lt;&#x2F;p&gt;
&lt;p&gt;さらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。
実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>First UIP distribution (2019-07-21)</title>
        <published>2019-07-21T00:00:00+00:00</published>
        <updated>2019-07-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-07-21-first-UIP-distribution/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-07-21-first-UIP-distribution/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;2019&#x2F;2019-07-11-varact-distribution&#x2F;&quot;&gt;Development of Var activities (2019-07-11)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ふと思ったのだが、first UIP になりうる変数はどれくらいだろう。
industrial problems でのコア（バックボーン？）はとても小さいはずだが、そもそもそれは矛盾変数はどれくらいであると言うことを意味するのだろう？　
少ないようでもあり、いや、複数回矛盾を起こすものが少ないだけのような気もする。
1 回の矛盾に対して 1 つの first UIP が決まるのだからそして別に 1 対 1 ではないのだから、
first UIP になる変数の個数は意外に小さいのではなかろうか。&lt;&#x2F;p&gt;
&lt;p&gt;CHB4 でやってみた。&lt;&#x2F;p&gt;
&lt;p&gt;まず解ける問題での時間進化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;T56.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;CNP-5-100.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;タイムアウトする問題&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;Timetable-1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;この問題では初期状態が終わると、矛盾もその原因も小集団に停滞していると言うことか。
それはリスタートですら抜け出せないと。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;10-3-13.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ということで、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;矛盾を起こす変数はせいぜい 1 割程度。その約半数は複数回矛盾を起こす。&lt;&#x2F;li&gt;
&lt;li&gt;first UIP 変数の個数は矛盾変数の個数のさらに半分程度。その半分は複数回選択される。&lt;&#x2F;li&gt;
&lt;li&gt;ただし例外もある。Timetable-1 では複数回矛盾する変数の方が first UIP 変数よりも少ない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;では、矛盾回数や選択回数を元に活性度を決めればより速く求解が進むのでは？
解けなかった Timetable-1 に適用してみる。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;Timetable-1-solved.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;個数の増加に停滞が見られず、安定して増加し、あっという間に解くことができた。
残念ながら、この変更した変数活性度には一般性はなく、他の問題では役に立たない。
機械的な切り替え戦略もうまくいかないようだ。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;num&lt;&#x2F;th&gt;&lt;th&gt;target&lt;&#x2F;th&gt;&lt;th&gt;splr-014&lt;&#x2F;th&gt;&lt;th&gt;pure core&lt;&#x2F;th&gt;&lt;th&gt;stagnator&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;002&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;37.271&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;34.183&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;030&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;295.587&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;155.478&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;033&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;15.665&lt;&#x2F;td&gt;&lt;td&gt;8.792&lt;&#x2F;td&gt;&lt;td&gt;6.745&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;035&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;43.214&lt;&#x2F;td&gt;&lt;td&gt;2.942&lt;&#x2F;td&gt;&lt;td&gt;22.751&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;039&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;287.079&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;051&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;78.317&lt;&#x2F;td&gt;&lt;td&gt;210.932&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;060&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;113.371&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;89.741&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;073&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;159.886&lt;&#x2F;td&gt;&lt;td&gt;286.783&lt;&#x2F;td&gt;&lt;td&gt;178.010&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;087&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;5.606&lt;&#x2F;td&gt;&lt;td&gt;31.730&lt;&#x2F;td&gt;&lt;td&gt;5.519&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;SAT&#x2F;v360-c1530&#x2F;093&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;56.257&lt;&#x2F;td&gt;&lt;td&gt;17.749&lt;&#x2F;td&gt;&lt;td&gt;190.154&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;001&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;387.568&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;390.890&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;015&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;175.274&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;175.413&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;028&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;331.694&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;407.681&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;029&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;508.666&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;031&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;263.632&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;345.386&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;053&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;431.730&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;303.767&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;061&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;086&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;195.286&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;193.819&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;089&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;483.832&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;425.792&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;3&#x2F;UNS&#x2F;v360-c1530&#x2F;096&amp;quot;&lt;&#x2F;td&gt;&lt;td&gt;150.258&lt;&#x2F;td&gt;&lt;td&gt;ABORT&lt;&#x2F;td&gt;&lt;td&gt;179.919&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;2 aborts&lt;&#x2F;td&gt;&lt;td&gt;14 aborts&lt;&#x2F;td&gt;&lt;td&gt;3 aborts&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;2019-07-24&quot;&gt;2019-07-24&lt;&#x2F;h1&gt;
&lt;p&gt;この尺度は重要かもしれない。増加率は意味ありげな変化を示している。
増加がゆっくりな部分はハードコアにあたるのではないだろうか。
EMAを二つ用意して増加率の傾向の時間変化を記録してみた。
緑線がこの尺度。赤線は矛盾変数。青線はこの段階では無視してほしい。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;07-21&#x2F;FUIP-trend.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;FUIP集合と矛盾変数集合の相関は極めて高い。同一と言ってもいいくらい。&lt;&#x2F;li&gt;
&lt;li&gt;極めてゆっくりと変化し、変動が少ない。&lt;&#x2F;li&gt;
&lt;li&gt;長期にわたって減少する期間がある。これこそハードコアの求解区間ではないだろうか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>EMA of LBD</title>
        <published>2019-07-15T00:00:00+00:00</published>
        <updated>2019-07-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-07-15-splr/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-07-15-splr/</id>
        
        <content type="html">&lt;p&gt;学習節の平均 LBD は大きく揺れすぎ。節削減の影響もあるので節の持つ数値は使いにくい気がする。
そんなこともあって、統計処理したからといって探索パラメータとしては使いにくいのではないだろうか。
むしろ個々の学習節の生データで戦略を決定した方がいいかもしれない。ともあれ、データを取ってみよう。&lt;&#x2F;p&gt;
&lt;p&gt;まずは、枝刈り（悪い状態からの離脱）の効果に関して。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;A._CHB_branch_から普通のやつ&quot;&gt;A. CHB branch から普通のやつ&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;v360-c1530: 9 SATs + 1 UNS
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   721.82
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     319339, #decision:      1751376, #propagate:      965031514
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   748607, #fix:     7573, #elm:  2389040, prg%:  76.1986
&lt;&#x2F;span&gt;&lt;span&gt; Clause Kind|Remv:   105560, LBD2:    35076, Binc:    19760, Perm:  5453978
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     1721, #RST:     1409, eASG:   0.0169, eLBD:   0.6303
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|aLBD:     4.70, bjmp:     9.00, cnfl:    40.03 |#stg:        0
&lt;&#x2F;span&gt;&lt;span&gt;   Clause DB|#rdc:       12, #sce:      463 |blkR:   1.4000, frcK:   0.7000
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Non-Specific-Instance using generic settings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;B._そこから_force_restart_における_ema_lbd_による起動条件を抜いたもの&quot;&gt;B. そこから &lt;code&gt;force_restart&lt;&#x2F;code&gt; における &lt;code&gt;ema_lbd&lt;&#x2F;code&gt; による起動条件を抜いたもの&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;v360-c1530: 6 SATs + 3 UNSs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   944.43
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     341071, #decision:      2311368, #propagate:     1254204513
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   697575, #fix:    32350, #elm:  2415295, prg%:  77.8211
&lt;&#x2F;span&gt;&lt;span&gt; Clause Kind|Remv:    48361, LBD2:    34735, Binc:    21108, Perm:  4918971
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:      620, #RST:     4765, eASG:   0.0195, eLBD:   0.5683
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|aLBD:     4.92, bjmp:    10.17, cnfl:    51.10 |#stg:        0
&lt;&#x2F;span&gt;&lt;span&gt;   Clause DB|#rdc:       13, #sce:      623 |blkR:   1.5000, frcK:   0.7000
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Non-Specific-Instance using generic settings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;C._block_restart_における_ema_asgによる封鎖条件を抜いたもの&quot;&gt;C. &lt;code&gt;block_restart&lt;&#x2F;code&gt; における &lt;code&gt;ema_asg&lt;&#x2F;code&gt;による封鎖条件を抜いたもの&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;n360-v1560: 9 SATs + 1 UNS
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;T56.2.0.cnf                                3145220,10854665 |time:   605.01
&lt;&#x2F;span&gt;&lt;span&gt; #conflict:     320514, #decision:      1747366, #propagate:      781715799
&lt;&#x2F;span&gt;&lt;span&gt;  Assignment|#rem:   694683, #fix:    35089, #elm:  2415448, prg%:  77.9131
&lt;&#x2F;span&gt;&lt;span&gt; Clause Kind|Remv:    74302, LBD2:    34334, Binc:    19331, Perm:  5006638
&lt;&#x2F;span&gt;&lt;span&gt;     Restart|#BLK:     5739, #RST:      662, eASG:   0.0147, eLBD:   0.6291
&lt;&#x2F;span&gt;&lt;span&gt;    Conflict|aLBD:     4.94, bjmp:     9.16, cnfl:    52.13 |#stg:        0
&lt;&#x2F;span&gt;&lt;span&gt;   Clause DB|#rdc:       12, #sce:      395 |blkR:   1.3000, frcK:   0.7000
&lt;&#x2F;span&gt;&lt;span&gt;    Strategy|mode: Non-Specific-Instance using generic settings
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;わかったこと：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;3SAT 問題では、restart しない方が UNSAT 問題は解ける&lt;&#x2F;li&gt;
&lt;li&gt;大規模問題ではよさそうなものに投資するのは効果が薄い&lt;&#x2F;li&gt;
&lt;li&gt;大規模問題および UNSAT 3SAT では尺度（LBD）がすでに悪くなっているものからはすぐに撤退すべき&lt;&#x2F;li&gt;
&lt;li&gt;UNSAT 3SAT では&lt;code&gt;force_restart&lt;&#x2F;code&gt;の頻度を減らす方がいいと言うのは意外（というか薄々感じていたことに対する新たな物証）。
やはり解けない部分問題を徹底的に深く見ないと問題が解けないことはわからないのではないだろうか。。。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;と言うことで悪い状態から脱出する方法はかなり重要。不確実な未来予測（deep search）よりもこちらを優先すべきのようだ。
つまり&#x27;measure for forcing blocking&#x27;をどう設計するかが問題。そしてコーディングレベルでは&lt;code&gt;block_restart&lt;&#x2F;code&gt;よりも&lt;code&gt;force_restart&lt;&#x2F;code&gt;の実装がより重要である。EMA of VAD を考えるべきだろうか。。。&lt;&#x2F;p&gt;
&lt;p&gt;そしてなぜ矛盾が発生していない（節にも変数活性度にも影響が及ばない）パスの中に &lt;code&gt;force＿restart&lt;&#x2F;code&gt; が埋め込まれているんだろうか？ 学習節が追加されたら 1 度は&lt;code&gt;propagate&lt;&#x2F;code&gt;させる必要がある。だから、そのタイミングで 3 方向分岐すればいいのでは。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;なぜ_force_restart_は無矛盾パスに埋め込まれているか&quot;&gt;なぜ &lt;code&gt;force_restart&lt;&#x2F;code&gt; は無矛盾パスに埋め込まれているか&lt;&#x2F;h4&gt;
&lt;p&gt;これは矛盾が起きなくても変化する特徴量＝割り当て率を即時に反映させたいからだろう。
これを backjump level などに置き換えるとリアルタイム性を失ってしまう。
最大到達決定レベル、すなわち&lt;code&gt;c_lvl&lt;&#x2F;code&gt;との比較なら同等の即時性を持たせることができる。&lt;&#x2F;p&gt;
&lt;p&gt;T56.2 で実験しよう。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;original: 712.47sec&lt;&#x2F;li&gt;
&lt;li&gt;LBD やめて&lt;code&gt;1&#x2F;sum-of-va&lt;&#x2F;code&gt;に変更: 値変えても大きく悪化 -- 方向性間違えている&lt;&#x2F;li&gt;
&lt;li&gt;高位決定レベルからの強制リスタート：より低いレベルで矛盾を起こした方がいいのではないか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;using_a_weighed_sum_of_variable_activities_in_a_clause,_or_weighted_SVA.&quot;&gt;using a weighed sum of variable activities in a clause, or &lt;em&gt;weighted SVA&lt;&#x2F;em&gt;.&lt;&#x2F;h3&gt;
&lt;p&gt;変数活性度の変化から求解状況の特徴量を抽出しようとして、色々と試したがよい結果にならなかったのでアイデアに戻す(CHB3)。なお、CHB4(decay rate の変更とコードレベルの最適化) からの知見を back port してみたが同じ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Development of Var activities (2019-07-11)</title>
        <published>2019-07-11T00:00:00+00:00</published>
        <updated>2019-07-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-07-11-varact-distribution/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-07-11-varact-distribution/</id>
        
        <content type="html">&lt;p&gt;以下は変数活性度の分散（青色の線）と変数割当量のEMA（緑色の線）の時間変化である。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;2019-07-11_vadist-fixedvars.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;どうもこの両者には負の相関があるらしい。変数割当てが減ると分散は高くなる。
これは、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;リスタートにより活性度が高い変数群の割当てを優先する。
他の変数の割当てはなくなり、全体としての割当量は減少する。&lt;&#x2F;li&gt;
&lt;li&gt;リスタート後もその矛盾する変数に関連する変数のみ活性度が繰り返し増加する。
従って活性度の分散は大きくなる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;ということで説明できるだろう。&lt;&#x2F;p&gt;
&lt;p&gt;難しい山を乗り越えたからこそ（変数割当てに関する）進捗があるらしい。
逆に、割当量が小さくなりながら（困難な矛盾が解決して）新しい変数が見つかる。
とは言え、決して小ささを維持しようとしているわけではない。
小さくなった後では大したことはできないと思う。&lt;&#x2F;p&gt;
&lt;p&gt;逆に言うと、落ちるためにまず上がらなければならないのかもしれないが、これは当然、予測不能問題：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;今、超えないといけないから山を登るべきなのか、&lt;&#x2F;li&gt;
&lt;li&gt;高すぎる=資源を使いすぎたから降りるべきなのか。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;しかし、それでもstagnationは&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;threshold&lt;&#x2F;li&gt;
&lt;li&gt;step&lt;&#x2F;li&gt;
&lt;li&gt;山登り量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;のどれかの増加の契機となるはずではなかろうか。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2019-07-13&quot;&gt;2019-07-13&lt;&#x2F;h2&gt;
&lt;p&gt;割当て率と平均LBDをガイドにした場合ほど性能がよくない。目的関数にするには、ずれているのかも。確かに割当てを改善しなければ解には到達できないだろう。しかし枝刈りの尺度としては優秀なはずなのだが。&lt;&#x2F;p&gt;
&lt;p&gt;分散は目的ではなく求解過程の（遷移）状態を表現しているのかも。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Can&#x27;t bind an expression to v-scroll-to</title>
        <published>2019-06-26T00:00:00+00:00</published>
        <updated>2019-06-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-06-26-vue-scrollto/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-06-26-vue-scrollto/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vuejs.org&quot;&gt;vue.js&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;nuxtjs.org&#x2F;&quot;&gt;nuxt.js&lt;&#x2F;a&gt;で作った
このblog（実はつい最近hugoから変更しました）のtagページで
タグ一覧からそのセクションへのページ内ジャンプを実現するために
&lt;a href=&quot;https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;vue-scrollto&quot;&gt;vue-schrollto&lt;&#x2F;a&gt;
を入れてみた。&lt;&#x2F;p&gt;
&lt;p&gt;もともとのタグ一覧の生成コードはこんな感じ：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;div v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag in tags&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :key&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;#{{ tag }},
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを &lt;code&gt;v-scroll-to&lt;&#x2F;code&gt; でジャンプできるように変えてみた：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;template v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag in tags&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;nuxt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;link :key&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; :v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;scroll&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39; + tag + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #{{ tag }}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;nuxt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;よさそうなんだけどこれでは動かないことが判明。
どうも&lt;code&gt;v-scroll-to&lt;&#x2F;code&gt; はbindができない。真にリテラルしか受け付けないようだ。
ということで正解はこうだった。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;template v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag in tags&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;nuxt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;link :key&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;tag&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;scroll&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;`#${tag}`&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #{{ tag }}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;nuxt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;link&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  ,
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでスルスル動くようになった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Connect mongoDB Atlas from Rust</title>
        <published>2019-05-31T00:00:00+00:00</published>
        <updated>2019-05-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-05-31-connect-mongodb-atlas-from-rust/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-05-31-connect-mongodb-atlas-from-rust/</id>
        
        <content type="html">&lt;p&gt;クラウドの勉強をしようと思って無料データベース&lt;a href=&quot;https:&#x2F;&#x2F;cloud.mongodb.com&#x2F;&quot;&gt;mongoDB Atlas&lt;&#x2F;a&gt;にアカウントを作ってみた。&lt;&#x2F;p&gt;
&lt;p&gt;mongoDBを選んだのは、以下の理由から。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cl.ecei.tohoku.ac.jp&#x2F;nlp100&#x2F;&quot;&gt;nlp100&lt;&#x2F;a&gt;の課題で、
自前のmongoDBをrustから利用するプログラムを作ってた&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zeit.co&#x2F;&quot;&gt;Zeit@now&lt;&#x2F;a&gt;からも&lt;a href=&quot;https:&#x2F;&#x2F;zeit.co&#x2F;blog&#x2F;zeit-now-integrations-platform&quot;&gt;統合&lt;&#x2F;a&gt;できる&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;セットアップはサクサクできて、あとはプログラムにconnectするだけ。
もちろん、ちゃんと参考例が表示される。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;2019&#x2F;2019-05-31_mongodb-1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;例えば&lt;strong&gt;Connect Your Application&lt;&#x2F;strong&gt;から辿ったjs用のサンプルはこうなっている。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;MongoClient &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt;(‘mongodb’).MongoClient;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;uri &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;mongodb+srv:&#x2F;&#x2F;&amp;lt;ADMIN&amp;gt;:&amp;lt;PASSWORD&amp;gt;@&amp;lt;MYCLUSTER&amp;gt;.mongodb.net&#x2F;test?...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;client &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;MongoClient(uri, { useNewUrlParser: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(err &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;test&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;devices&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; perform actions on the collection object
&lt;&#x2F;span&gt;&lt;span&gt;  client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これを真似すれば、非公式クライアントライブラリ&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mongodb&quot;&gt;mongodb 0.3.12&lt;&#x2F;a&gt;を使ったRustのプログラムでも
簡単に移植できるだろうと思ったら、予想が外れてしまった。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;thread &amp;#39;main&amp;#39; panicked at &amp;#39;failed to auth: OperationError(&amp;quot;No servers available for the provide
&lt;&#x2F;span&gt;&lt;span&gt;d ReadPreference.&amp;quot;)&amp;#39;, src&#x2F;libcore&#x2F;result.rs:997:5                                              
&lt;&#x2F;span&gt;&lt;span&gt;note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ネットで調べると参考になりそうなのはこのあたり。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;9x0bs9&#x2F;connect_to_mongodb_atlas_from_rust&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;mongodb-labs&#x2F;mongo-rust-driver-prototype&#x2F;issues&#x2F;291&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;mongodb-labs&#x2F;mongo-rust-driver-prototype&#x2F;issues&#x2F;313&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;そこで、&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;クライアントライブラリは変えたくないなあ。なんとかmongodbで繋ぎたい。&lt;&#x2F;li&gt;
&lt;li&gt;しかし、&lt;code&gt;mongodb+srv:&#x2F;&#x2F;&lt;&#x2F;code&gt;はまだ実装されてない。&lt;&#x2F;li&gt;
&lt;li&gt;とにかく、sshのサポートは必要なのでmongodbのコンパイルに&lt;code&gt;features=&amp;quot;ssl&amp;quot;&lt;&#x2F;code&gt; が必要&lt;&#x2F;li&gt;
&lt;li&gt;そして、認証には&lt;code&gt;db::auth&lt;&#x2F;code&gt;メソッドを呼び出すことが必要。&lt;&#x2F;li&gt;
&lt;li&gt;さらに、認証時につなぐべきbdは &lt;code&gt;&amp;quot;auth&amp;quot;&lt;&#x2F;code&gt; である。ただwebでの管理画面を見ていると正解はどうも &lt;code&gt;&amp;quot;admin&amp;quot;&lt;&#x2F;code&gt; らしい。。。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;となって、こういうコードになった：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; opts &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mongodb::ClientOptions::with_unauthenticated_ssl(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; uri &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;上のURI&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;mongodb::Client::with_uri_and_options(uri, opts).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;connect&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;admin&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;lt;ADMIN&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;lt;PASSWORD&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;auth&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; coll &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;lt;DB&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;lt;COLLECTION&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;しかし、これらを反映してもどうやっても最初のエラーが取れない。&lt;&#x2F;p&gt;
&lt;p&gt;いい加減、諦めかけていたのだけど、&lt;strong&gt;Connect with the Mongo Shell&lt;&#x2F;strong&gt;の中のサンプルを見ていて
指定すべきURIがMongo Shellのバージョンによって全然違うことに気づいた。
具体的には最新版(3.6 or later)だと、&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;mongo &amp;quot;mongodb+srv:&#x2F;&#x2F;&amp;lt;CLUSTER&amp;gt;.mongodb.net&#x2F;test&amp;quot; --username &amp;lt;username&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なのが、3.3 or earlierだとこうなる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;mongo &amp;quot;mongodb:&#x2F;&#x2F;&amp;lt;CLUSTER&amp;gt;-&amp;lt;SHARD0&amp;gt;.mongodb.net:xxx,&amp;lt;CLUSTER&amp;gt;-&amp;lt;SHARD1&amp;gt;.mongodb.net:xxx,&amp;lt;CLUSTER&amp;gt;-&amp;lt;SHARD2&amp;gt;.mongodb.net:xxx&#x2F;test?...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;問題の &lt;code&gt;srv&lt;&#x2F;code&gt; がないじゃん！&lt;&#x2F;p&gt;
&lt;p&gt;なので上のrustプログラムの2行目の&lt;code&gt;uri&lt;&#x2F;code&gt;の定義をこれと入れ替えたら、さっくり通ってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;めでたし、めでたし。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Compiling Rust programs that use openssl</title>
        <published>2019-03-28T00:00:00+00:00</published>
        <updated>2019-03-28T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-28-rust-programs-using-openssl/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-28-rust-programs-using-openssl/</id>
        
        <content type="html">&lt;p&gt;The simplest way is using the old version of openssl.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ pacman -Ss openssl
&lt;&#x2F;span&gt;&lt;span&gt;core&#x2F;openssl 1.1.1.b-1 [installed]
&lt;&#x2F;span&gt;&lt;span&gt;    The Open Source toolkit for Secure Sockets Layer and Transport Layer Security
&lt;&#x2F;span&gt;&lt;span&gt;core&#x2F;openssl-1.0 1.0.2.r-1 [installed]
&lt;&#x2F;span&gt;&lt;span&gt;    The Open Source toolkit for Secure Sockets Layer and Transport Layer Security
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Select it by environment variables.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;OPENSSL_LIB_DIR=&#x2F;usr&#x2F;lib&#x2F;openssl-1.0 OPENSSL_INCLUDE_DIR=&#x2F;usr&#x2F;include&#x2F;openssl-1.0 cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;On_NixOS&quot;&gt;On NixOS&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix-shell -p openssl pkg-config
&lt;&#x2F;span&gt;&lt;span&gt;cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;and_about_macOS&quot;&gt;and about macOS&lt;&#x2F;h5&gt;
&lt;p&gt;If you face &#x27;no Security&#x27; error on darwin (macOS), that occured by &#x27;mongodb with ssl&#x27;, try:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix-shell -p openssl_1_1 pkg-config darwin.apple_sdk.frameworks.Security
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Install Rust programs with resources on NixOS</title>
        <published>2019-03-22T00:00:00+00:00</published>
        <updated>2019-03-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-22-rust-program-with-resources-on-nixos/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-22-rust-program-with-resources-on-nixos/</id>
        
        <content type="html">&lt;h2 id=&quot;目標&quot;&gt;目標&lt;&#x2F;h2&gt;
&lt;p&gt;同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;方法&quot;&gt;方法&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;build.rsで頑張る →試してません&lt;&#x2F;li&gt;
&lt;li&gt;最終保存場所をソースに書き込む&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;ここでは2番目の手法についてメモしておきます。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;前提条件&quot;&gt;前提条件&lt;&#x2F;h2&gt;
&lt;p&gt;rustPlatform.buildRustProgramを使っている&lt;&#x2F;p&gt;
&lt;h2 id=&quot;実現手段&quot;&gt;実現手段&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;patchPhaseでsedで&lt;code&gt;$out&lt;&#x2F;code&gt;をソースに埋め込む&lt;&#x2F;li&gt;
&lt;li&gt;PostInstallで同梱ファイルを&lt;code&gt;$out&lt;&#x2F;code&gt;にコピーする&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;実例&quot;&gt;実例&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shnarazk&#x2F;SAT-bench&quot;&gt;sat-bench&lt;&#x2F;a&gt;はSATソルバーのベンチマークをするためのユーティリティなので、
複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。
しかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来
もあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。
そのためにコンパイル時にpwdを&lt;code&gt;env!(&amp;quot;PWD&amp;quot;)&lt;&#x2F;code&gt;で埋め込んでいるが、一方コマンドラインからディレクトリを指定す
るためのコマンドオプションも用意した。&lt;&#x2F;p&gt;
&lt;p&gt;しかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。
ディレクトリを指定しているのは以下の&lt;code&gt;Config::lib_dir&lt;&#x2F;code&gt;のデフォルト値。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[structopt(name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;sat-bench&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, about &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Run simple SAT benchmarks&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Config {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;&#x2F; directory holding instances
&lt;&#x2F;span&gt;&lt;span&gt;    #[structopt(long &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;lib&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, default_value &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;    lib_dir: String,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;（別件だが、ここで&lt;code&gt;default_value = env!(&amp;quot;PWD&amp;quot;)&lt;&#x2F;code&gt;とか書きたいのだが、
そうするとコンパイルエラーになってしまう。残念。）&lt;&#x2F;p&gt;
&lt;p&gt;なのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは&lt;code&gt;$out&#x2F;lib&lt;&#x2F;code&gt;とした。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;  satbench &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; super&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;rustPlatform&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;buildRustPackage &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;patchPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;      sed -i &amp;quot;s|long = \&amp;quot;lib\&amp;quot;, default_value = \&amp;quot;\&amp;quot;|long = \&amp;quot;lib\&amp;quot;, default_value = \&amp;quot;$out&#x2F;lib\&amp;quot;|&amp;quot; src&#x2F;bin&#x2F;sat-bench.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;コンパイルやインストールの挙動はいじらないように&lt;code&gt;postInstall&lt;&#x2F;code&gt;フックを使って、
インストール後の処理としてファイルをターゲットディレクトリ&lt;code&gt;$out&#x2F;lib&lt;&#x2F;code&gt;にコピー。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;    postInstall &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;      mkdir -p $out&#x2F;lib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;      cp -r 3-SAT SAT09 SR2015 $out&#x2F;lib&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このようなnix式を評価してパッケージをインストールすると、
以下のように適切なデフォルト値が埋め込まれているのがわかる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ sat-bench --help
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;OPTIONS:
&lt;&#x2F;span&gt;&lt;span&gt;    -K, --aux-key &amp;lt;aux_key&amp;gt;   [default: ]
&lt;&#x2F;span&gt;&lt;span&gt;    -H, --header &amp;lt;header&amp;gt;     [default: ]
&lt;&#x2F;span&gt;&lt;span&gt;        --lib &amp;lt;lib_dir&amp;gt;       [default: &#x2F;nix&#x2F;store&#x2F;63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4&#x2F;lib]
&lt;&#x2F;span&gt;&lt;span&gt;    -M, --message &amp;lt;message&amp;gt;   [default: ]
&lt;&#x2F;span&gt;&lt;span&gt;...  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;めでたし。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Memo about @now&#x2F;rust by Zeit</title>
        <published>2019-03-17T00:00:00+00:00</published>
        <updated>2019-03-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-17-now/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-17-now/</id>
        
        <content type="html">&lt;h2 id=&quot;準備&quot;&gt;準備&lt;&#x2F;h2&gt;
&lt;p&gt;まずシステムを汚染しないようにnowをインストール：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;npm config set prefix ~&#x2F;.local&#x2F;npm&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;npm install -g now
&lt;&#x2F;span&gt;&lt;span&gt;ln -s ~&#x2F;.local&#x2F;npm&#x2F;bin&#x2F;now `&#x2F;.local&#x2F;bin&#x2F;now
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;試行&quot;&gt;試行&lt;&#x2F;h2&gt;
&lt;p&gt;紹介ポスト(dead link https:&#x2F;&#x2F;zeit.co&#x2F;blog&#x2F;introducing-now-rust)は色々と内容が古くなっているので Document(dead link https:&#x2F;&#x2F;zeit.co&#x2F;docs&#x2F;v2&#x2F;deployments&#x2F;official-builders&#x2F;now-rust&#x2F;)をたどる方がよい。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Tips&quot;&gt;Tips&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;要求:_$TOP&#x2F;index.rsではなくsrc&#x2F;の下においてcargoでコンパイルしたい。&quot;&gt;要求: &lt;code&gt;$TOP&#x2F;index.rs&lt;&#x2F;code&gt;ではなくsrc&#x2F;の下においてcargoでコンパイルしたい。&lt;&#x2F;h3&gt;
&lt;p&gt;now.jsonでビルド元を指定すればよい。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;builds&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;src&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;src&#x2F;index.rs&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;use&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;@now&#x2F;rust&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;routes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;	{
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;src&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;dest&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&#x2F;src&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい&quot;&gt;要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい&lt;&#x2F;h3&gt;
&lt;p&gt;デプロイするのはsrc&#x2F;index.rsなので、それ以外のソースにmain関数があればいい。
実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;target
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;src&#x2F;bin
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;そもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。
なのでそこに実行ファイルを置きたいならsrc&#x2F;binの下のファイルを&lt;code&gt;cargo run -bin&lt;&#x2F;code&gt;で実行しろと
いう話。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない&quot;&gt;要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない&lt;&#x2F;h3&gt;
&lt;p&gt;cargoのfeatureを使えばいい&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span&gt;http = &amp;quot;0.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;regex = &amp;quot;1.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;reqwest = { version = &amp;quot;0.9.12&amp;quot;, optional = true }
&lt;&#x2F;span&gt;&lt;span&gt;scraper = { version = &amp;quot;0.9.2&amp;quot;, optional = true }
&lt;&#x2F;span&gt;&lt;span&gt;serde = { version = &amp;quot;1.0.89&amp;quot;, features = [&amp;quot;derive&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span&gt;serde_json = &amp;quot;1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;url = { version = &amp;quot;1.7.2&amp;quot;, features = [ &amp;quot;query_encoding&amp;quot; ] }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[features]
&lt;&#x2F;span&gt;&lt;span&gt;prepare = [&amp;quot;reqwest&amp;quot;, &amp;quot;scraper&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;こうしておいて、手元で実行するときは以下を実行。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cargo run --bin xxx --features prepare
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;デプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;要求：handlerを手元で実行する時も流用したい&quot;&gt;要求：handlerを手元で実行する時も流用したい&lt;&#x2F;h3&gt;
&lt;p&gt;handlerの型は&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;fn handler(request: http::Request&amp;lt;()&amp;gt;) -&amp;gt; http::Result&amp;lt;http::Response&amp;lt;String&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので
難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。&lt;&#x2F;p&gt;
&lt;p&gt;まあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GTK development on Nix on macOS</title>
        <published>2019-03-14T00:00:00+00:00</published>
        <updated>2020-07-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-14-gtk-development-on-nix/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-14-gtk-development-on-nix/</id>
        
        <content type="html">&lt;h2 id=&quot;C&quot;&gt;C&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;sample target: https:&#x2F;&#x2F;developer.gnome.org&#x2F;gtk3&#x2F;stable&#x2F;gtk-getting-started.html&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Dive into the environment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;nix-shell -p gtk3 gcc pkgconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And compile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;gcc `pkg-config --cflags gtk+-3.0` -o example example.c `pkg-config --libs gtk+-3.0`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;Rust_(updated_at_2020-07-05)&quot;&gt;Rust (updated at 2020-07-05)&lt;&#x2F;h2&gt;
&lt;p&gt;If you need not to install your project as a nix package, just run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ nix-shell -p gtk3 pkgconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;Rust&quot;&gt;Rust&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;package: https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;gtk
&lt;ul&gt;
&lt;li&gt;Cargo.toml: &lt;code&gt;gtk = 0.9&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Cargo.toml: &lt;code&gt;gtk = 0.5&lt;&#x2F;code&gt;  # 0.6 requires unstable channel as of 2019-03-14&lt;&#x2F;li&gt;
&lt;li&gt;Cargo.toml: &lt;code&gt;gtk = 0.6&lt;&#x2F;code&gt;  # for stable channel as of 2019-07-02&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;sample target: https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;gtk&#x2F;blob&#x2F;master&#x2F;src&#x2F;rt.rs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Start with the same approach:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ nix-shell -p gtk3 pkgconfig rustc cargo llvm
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span&gt;    Finished dev &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; target(s) in 0.21s                                       
&lt;&#x2F;span&gt;&lt;span&gt;     Running `target&#x2F;debug&#x2F;gtktest`
&lt;&#x2F;span&gt;&lt;span&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;main&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; panicked at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;libgtk-3 was configured with `--enable-debug=no`. See https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;gtk&#x2F;issues&#x2F;270 for details&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, ~&#x2F;.cargo&#x2F;registry&#x2F;src&#x2F;github.com-1ecc6299db9ec823&#x2F;gtk-0.5.0&#x2F;src&#x2F;rt.rs:137:13
&lt;&#x2F;span&gt;&lt;span&gt;note: Run with `RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;` for a backtrace.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;the issue: https:&#x2F;&#x2F;github.com&#x2F;gtk-rs&#x2F;gtk&#x2F;issues&#x2F;270&lt;&#x2F;li&gt;
&lt;li&gt;src:  &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;master&#x2F;pkgs&#x2F;development&#x2F;libraries&#x2F;gtk&#x2F;3.x.nix&quot;&gt;nix expression for gtk3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So let&#x27;s make an overlay:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    gtk3RustDarwin = super.gtk3.overrideDerivation (attrs: { 
&lt;&#x2F;span&gt;&lt;span&gt;        configureFlags = [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--enable-debug&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--disable-dependency-tracking&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--disable-glibtest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--enable-quartz-backend&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        ];
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What&#x27;s &lt;code&gt;overrideDerivation&lt;&#x2F;code&gt;? It&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;nixpkgs&#x2F;manual&#x2F;#sec-pkg-overrideDerivation&quot;&gt;deprecated&lt;&#x2F;a&gt; function.
So the following seems better:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    gtk3RustDarwin = super.gtk3.overrideAttrs (attrs: rec {
&lt;&#x2F;span&gt;&lt;span&gt;        configureFlags = [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--enable-debug&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--disable-dependency-tracking&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--disable-glibtest&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;--enable-quartz-backend&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        ];
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anyway, give it a try.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ nix-shell -p gtk3RustDarwin pkgconfig rustc cargo llvm
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo clean  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# to purge the previous attempt
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That works!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Build GNU Source-highlight supporting Rust for NixOS</title>
        <published>2019-03-10T00:00:00+00:00</published>
        <updated>2019-03-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-10-source-highlight-Rust/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-10-source-highlight-Rust/</id>
        
        <content type="html">&lt;p&gt;Let&#x27;s Rust syntax highlighten in less!&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We need to apply &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;tav&#x2F;3846383&quot;&gt;a patch&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;To apply the patch, make a simple overlay(~&#x2F;.config&#x2F;nixpkgs&#x2F;overlays&#x2F;source-highlight.nix) against &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;master&#x2F;pkgs&#x2F;tools&#x2F;text&#x2F;source-highlight&#x2F;default.nix&quot;&gt;the expression&lt;&#x2F;a&gt; in the master branch.&lt;&#x2F;li&gt;
&lt;li&gt;But somehow I failed to build it due to lack of makeinfo.&lt;&#x2F;li&gt;
&lt;li&gt;So add super.texinfo to the &lt;code&gt;BuildInputs&lt;&#x2F;code&gt; in the overlay.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;nix-env -i source-highliht&lt;&#x2F;code&gt; and got it.&lt;&#x2F;li&gt;
&lt;li&gt;Activate this feature with the following settings:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LESS&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;-R&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span&gt;LESSOPEN&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;|| ~&#x2F;.nix-profile&#x2F;bin&#x2F;src-hilite-lesspipe.sh %s&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The double veritical bars are important!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, if the first character of LESSOPEN  starts  with  two  vertical  bars, the exit status of the script becomes meaningful.  If the exit status is zero, the output is considered to  be replacement text, even if it empty.  If the exit status is nonzero, any output is ignored and the original file is used.  For compatibility with previous versions of  less, if LESSOPEN starts with only one vertical bar, the exit status of the preprocessor is ignored.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In most cases in which &lt;code&gt;less&lt;&#x2F;code&gt; is used as a pager, this settings is identital to the original
behavior. On the other side, with a single bar, &lt;code&gt;less&lt;&#x2F;code&gt; clears the sceen to switch to full
screen mode.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;files&quot;&gt;files&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;~&#x2F;.config&#x2F;nixpkgs&#x2F;overlays&#x2F;source-highlight.nix&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;sourceHighlight &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;sourceHighlight&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;overrideAttrs (attrs: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;buildInputs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ super&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;boost super&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;texinfo ];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;patches &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;~&#x2F;.config&#x2F;nixpkgs&#x2F;rust.patch &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;~&#x2F;.config&#x2F;nixpkgs&#x2F;rust.patch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;diff -urN source-highlight-3.1.8&#x2F;src&#x2F;Makefile.am source-highlight-3.1.8-Rust&#x2F;src&#x2F;Makefile.am
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8&#x2F;src&#x2F;Makefile.am      2015-03-30 22:00:00.000000000 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8-Rust&#x2F;src&#x2F;Makefile.am 2019-03-10 21:38:57.249427742 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -86,7 +86,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; errors.lang erlang.lang proto.lang vala.lang lisp.lang islisp.lang \
&lt;&#x2F;span&gt;&lt;span&gt; scheme.lang po.lang opa.lang javalog.lang upc.lang tml.lang \
&lt;&#x2F;span&gt;&lt;span&gt; lilypond.lang coffeescript.lang go.lang \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-r.lang s.lang zsh.lang groovy.lang json.lang feature.lang
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;r.lang s.lang zsh.lang groovy.lang json.lang feature.lang rust.lang
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; LANGFILES_NOTTOCHECK= \
&lt;&#x2F;span&gt;&lt;span&gt; tml_formatting_all.lang  tml_macrolinks.lang      tml_macrosdelayed2.lang \
&lt;&#x2F;span&gt;&lt;span&gt;diff -urN source-highlight-3.1.8&#x2F;src&#x2F;Makefile.in source-highlight-3.1.8-Rust&#x2F;src&#x2F;Makefile.in
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8&#x2F;src&#x2F;Makefile.in      2015-03-31 00:04:55.000000000 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8-Rust&#x2F;src&#x2F;Makefile.in 2019-03-10 21:39:16.152740165 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -838,7 +838,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; errors.lang erlang.lang proto.lang vala.lang lisp.lang islisp.lang \
&lt;&#x2F;span&gt;&lt;span&gt; scheme.lang po.lang opa.lang javalog.lang upc.lang tml.lang \
&lt;&#x2F;span&gt;&lt;span&gt; lilypond.lang coffeescript.lang go.lang \
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-r.lang s.lang zsh.lang groovy.lang json.lang feature.lang
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;r.lang s.lang zsh.lang groovy.lang json.lang feature.lang rust.lang
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; LANGFILES_NOTTOCHECK = \
&lt;&#x2F;span&gt;&lt;span&gt; tml_formatting_all.lang  tml_macrolinks.lang      tml_macrosdelayed2.lang \
&lt;&#x2F;span&gt;&lt;span&gt;diff -urN source-highlight-3.1.8&#x2F;src&#x2F;lang.map source-highlight-3.1.8-Rust&#x2F;src&#x2F;lang.map
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8&#x2F;src&#x2F;lang.map 2015-03-30 20:26:24.000000000 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8-Rust&#x2F;src&#x2F;lang.map    2019-03-10 22:19:59.609966381 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -169,3 +169,5 @@
&lt;&#x2F;span&gt;&lt;span&gt; groovy = groovy.lang
&lt;&#x2F;span&gt;&lt;span&gt; json = json.lang
&lt;&#x2F;span&gt;&lt;span&gt; feature = feature.lang
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;rust = rust.lang
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;rs = rust.lang
&lt;&#x2F;span&gt;&lt;span&gt;diff -urN source-highlight-3.1.8&#x2F;src&#x2F;rust.lang source-highlight-3.1.8-Rust&#x2F;src&#x2F;rust.lang
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8&#x2F;src&#x2F;rust.lang        1970-01-01 09:00:00.000000000 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; source-highlight-3.1.8-Rust&#x2F;src&#x2F;rust.lang   2019-03-10 13:09:20.711181631 +0900
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -0,0 +1,18 @@
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;preproc = &amp;quot;import&amp;quot;,&amp;quot;package&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;include &amp;quot;c_comment.lang&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;include &amp;quot;number.lang&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;string delim &amp;quot;\&amp;quot;&amp;quot; &amp;quot;\&amp;quot;&amp;quot; escape &amp;quot;\\&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;string delim &amp;quot;&amp;#39;&amp;quot; &amp;quot;&amp;#39;&amp;quot;  escape &amp;quot;\\&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;string delim &amp;quot;`&amp;quot; &amp;quot;`&amp;quot;  escape &amp;quot;\\&amp;quot; multiline
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;keyword = &amp;quot;as|assert|break|const|copy|do|drop|else|enum|export|extern|fail|false|fn|for|if|impl|let|log|loop|match|mod|move|mut|p
&lt;&#x2F;span&gt;&lt;span&gt;riv|pub|pure|ref|return|struct|true|trait|type|unsafe|use|while&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;keyword = &amp;quot;be|self|static|export|assert|log|fail&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;type = &amp;quot;bool|char|f32|f64|float|i8|i16|i32|i64|int|str|u8|u16|u32|u64|uint&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;include &amp;quot;symbols.lang&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;cbracket = &amp;quot;{|}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Post to Discord from shell</title>
        <published>2019-03-07T00:00:00+00:00</published>
        <updated>2019-03-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-07-post-to-discord/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-07-post-to-discord/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;第1引数はメッセージ本体&lt;&#x2F;li&gt;
&lt;li&gt;第2引数には投稿者名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#!&#x2F;bin&#x2F;sh -norc
&lt;&#x2F;span&gt;&lt;span&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;empty message&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;$&lt;&#x2F;span&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    payload&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    payload&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;https:&#x2F;&#x2F;discordapp.com&#x2F;api&#x2F;webhooks&#x2F;aaa&#x2F;bbb&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;curl -X POST -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Accept: application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Content-type: application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span&gt;payload&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;${url}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;&#x2F;code&gt;には先に取得しておいたwebhookのものを指定する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NixOS administration</title>
        <published>2019-03-06T00:00:00+00:00</published>
        <updated>2019-03-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-06-nixos-administration/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-06-nixos-administration/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;Where&#x27;s configuration: &#x2F;etc&#x2F;nixos&#x2F;configuration.nix
&lt;ul&gt;
&lt;li&gt;The option &lt;code&gt;system.nixos.stateVersion&lt;&#x2F;code&gt; has been renamed &lt;code&gt;system.stateVersion&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Choose kernel version: https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Choose_your_kernel_on_NixOS&lt;&#x2F;li&gt;
&lt;li&gt;how to update:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nixos-rebuild switch --upgrade
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&#x27;nix search&#x27; is faster than &lt;code&gt;nix-env -qa&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Running Glucose in benchmark mode</title>
        <published>2019-03-04T00:00:00+00:00</published>
        <updated>2019-03-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-03-04-benchmarking-glucose/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-03-04-benchmarking-glucose/</id>
        
        <content type="html">&lt;p&gt;Using my &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;satisfiability01&#x2F;glucose&#x2F;tree&#x2F;v.4.1&quot;&gt;patched&lt;&#x2F;a&gt; glucose, we can get more useful result.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;glucose -cpu-lim=TIMEOUT -verb=0 a.cnf result.file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-cpu-lim=TIMEOUT&lt;&#x2F;code&gt; ; you can&#x27;t insert whitespaces.&lt;&#x2F;li&gt;
&lt;li&gt;no progress report if &lt;code&gt;verb&lt;&#x2F;code&gt;== 0.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now the result file contains the stats information.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c restarts              : 2 (2201 conflicts in avg)
&lt;&#x2F;span&gt;&lt;span&gt;c blocked restarts      : 0 (multiple: 0) 
&lt;&#x2F;span&gt;&lt;span&gt;c last block at restart : 0
&lt;&#x2F;span&gt;&lt;span&gt;c nb ReduceDB           : 1
&lt;&#x2F;span&gt;&lt;span&gt;c nb removed Clauses    : 994
&lt;&#x2F;span&gt;&lt;span&gt;c nb learnts DL2        : 22
&lt;&#x2F;span&gt;&lt;span&gt;c nb learnts size 2     : 0
&lt;&#x2F;span&gt;&lt;span&gt;c nb learnts size 1     : 0
&lt;&#x2F;span&gt;&lt;span&gt;c conflicts             : 4403           (83932 &#x2F;sec)
&lt;&#x2F;span&gt;&lt;span&gt;c decisions             : 5285           (0.00 % random) (100745 &#x2F;sec)
&lt;&#x2F;span&gt;&lt;span&gt;c propagations          : 184690         (3520654 &#x2F;sec)
&lt;&#x2F;span&gt;&lt;span&gt;c nb reduced Clauses    : 0
&lt;&#x2F;span&gt;&lt;span&gt;c CPU time              : 0.052459 s
&lt;&#x2F;span&gt;&lt;span&gt;-1 2 -3 -4 5 -6 -7 ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;remaining_parts&quot;&gt;remaining parts&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s run on the benchmark suit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;parallel -j1 &amp;quot;glucose -cpu-lim=5000 -verb=0 {} .ans_{&#x2F;}&amp;quot; ::: SAT-COMPETITION&#x2F;*.cnf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then gather the results into a csv.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fs::read_dir(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;file_name&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string_lossy&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;starts_with&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.ans_&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(t) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;read_time&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(f, t);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;read_time&lt;&#x2F;span&gt;&lt;span&gt;(input: ... ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; re &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Regex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;c CPU time +: ([.0-9]+)&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;wrong regex&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buf &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(k) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;read_line&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; buf) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; k &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(c) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;captures&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;buf) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;(v) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(v)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Memo on Nixpkgs</title>
        <published>2019-02-27T00:00:00+00:00</published>
        <updated>2019-02-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-02-27-memo-on-nix/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-02-27-memo-on-nix/</id>
        
        <content type="html">&lt;h2 id=&quot;Location_of_my_configuration_file&quot;&gt;Location of my configuration file&lt;&#x2F;h2&gt;
&lt;p&gt;is &lt;strong&gt;~&#x2F;.config&#x2F;nixpkgs&#x2F;config.nix&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;FAQ#How_can_I_manage_software_with_nix-env_like_with_configuration.nix.3F&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;Overriding_nix_package&quot;&gt;Overriding nix package&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&#x27;error: attribute `override&#x27; missing&#x27;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Probably you&#x27;re trying to override a non-existing package.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the following emits the error because &lt;code&gt;emacs26&lt;&#x2F;code&gt; doesn&#x27;t exist.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# ~&#x2F;.config&#x2F;nixpkgs&#x2F;config.nix
&lt;&#x2F;span&gt;&lt;span&gt;{ pkgs }:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    allowBroken = true;
&lt;&#x2F;span&gt;&lt;span&gt;    allowUnfree = true;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    packageOverrides = pkgs : rec {
&lt;&#x2F;span&gt;&lt;span&gt;   	emacs26 = pkgs.stdenv.lib.overrideDerivation pkgs.emacs26 (oldAttrs : {
&lt;&#x2F;span&gt;&lt;span&gt;	    name = &amp;quot;emacs-26.1.92&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	    version = &amp;quot;26.1.92&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	    src = pkgs.fetchurl {
&lt;&#x2F;span&gt;&lt;span&gt;	        url = &amp;quot;https:&#x2F;&#x2F;alpha.gnu.org&#x2F;gnu&#x2F;emacs&#x2F;pretest&#x2F;emacs-26.1.92.tar.xz&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;		    sha256 = &amp;quot;0aa1dfa39b020feb49b82a388863c8a4b2ee0f1dfc04528f49759dbba4f28d41&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;		};
&lt;&#x2F;span&gt;&lt;span&gt;	});
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By changing the package name to &lt;code&gt;emacs&lt;&#x2F;code&gt;, it works.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;4017&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;UPDATE&quot;&gt;UPDATE&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;overrideDerivation&lt;&#x2F;code&gt; is almost depricated. Here&#x27;s a better version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    emacs26 = super.emacs26.overrideAttrs (attrs: rec {
&lt;&#x2F;span&gt;&lt;span&gt;        name = &amp;quot;emacs-26.1.92&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        version = &amp;quot;26.1.92&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        src = super.fetchurl {
&lt;&#x2F;span&gt;&lt;span&gt;            url = &amp;quot;https:&#x2F;&#x2F;alpha.gnu.org&#x2F;gnu&#x2F;emacs&#x2F;pretest&#x2F;emacs-26.1.92.tar.xz&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;            sha256 = &amp;quot;0aa1dfa39b020feb49b82a388863c8a4b2ee0f1dfc04528f49759dbba4f28d41&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        patches = [];
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nixファイルの構造&quot;&gt;nixファイルの構造&lt;&#x2F;h3&gt;
&lt;p&gt;nixファイルはnix式を定義するもの。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;nix-buildはderivationを生成する式を要求する。そしてその環境のシェルを走らせる。?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;config.nixやオーバレイはnixpkgsを更新する関数を定義するもの。?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;https:&#x2F;&#x2F;nixos.org&#x2F;nixos&#x2F;manual&#x2F;index.html#sec-nix-syntax-summary&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;https:&#x2F;&#x2F;nixos.org&#x2F;nixos&#x2F;manual&#x2F;index.html#sec-configuration-syntax&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;そもそもの関数の構文&quot;&gt;そもそもの関数の構文&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:&lt;&#x2F;code&gt;が引数と本体のセパレータ。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;x : x &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;集合を引数に取り、その中の特定要素を参照するならば、セレクタを並べた（カンマ区切り）集合が引数に位置する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ x&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;y }: x &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これは一見、2引数関数のように見えるがコロンの位置からもそうではない。&lt;&#x2F;p&gt;
&lt;p&gt;ということで、例えばlet構文（式）なしで集合型の返値が計算できるなら&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ config&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;pkgs }:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;属性の定義式;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;となるし、let構文を使いたいなら以下のようになる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ config&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;pkgs }:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ ... };
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{ ... };
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;  x
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;なお、2引数関数はoverlayで用いられている。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;self: super:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;nix-buildに与えるべきnixファイル(shell.nixという名前がconvention?)はこんな感じ:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;nixgkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{};   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# この;は文を区切るものではなく、withは次の行まで続いている
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# derivationを返すこと
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A derivationを返すwith構文が一つあるだけ。with構文については後述。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;nix-shellに与えるべきnixファイル（default.nixがデフォールト）はこんな感じ:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;nixgkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{};
&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# 集合を返す
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;pkgsを更新している？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;モジュールとwith構文&quot;&gt;モジュールとwith構文&lt;&#x2F;h3&gt;
&lt;p&gt;ということで多くのファイルは以下の構造で単一の関数が定義されているだけ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;依存するモジュール（カンマ区切り）&lt;&#x2F;span&gt;&lt;span&gt; }:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;返値&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;オーバレイも ~&#x2F;.config&#x2F;nixpkgs&#x2F;config.nix もこんな感じ。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ pkgs }:
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで&lt;code&gt;with import &amp;lt;nixpkgs&amp;gt;&lt;&#x2F;code&gt;を先頭に置いても問題ないはず。
試してみたところ、下のどちらの書き方でも正しく評価できる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;inxpkgs&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;; self: super:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;inxpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{}; self: super:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;それどころか以下でも問題ない。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;inxpkgs&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{} {}; self: super:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;何故ならば、&lt;code&gt;import &amp;lt;nixpkgs&amp;gt;&lt;&#x2F;code&gt;は&lt;code&gt;関数：集合 -&amp;gt; 集合&lt;&#x2F;code&gt;。
なので&lt;code&gt;(import &amp;lt;inxpkgs&amp;gt;) {}&lt;&#x2F;code&gt;は関数適用。もちろんその返値は集合を受け付ける関数。なので&lt;code&gt;{}&lt;&#x2F;code&gt;を受け付
ける。
そして評価が終わった&lt;code&gt;import &amp;lt;inxpkgs&amp;gt; {} {}&lt;&#x2F;code&gt;までを環境として、セミコロン以下の本体を評価するのがwith
構文（式）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;nixos.org&#x2F;nixos&#x2F;nix-pills&#x2F;functions-and-imports.html#idm140737316371552&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;S式で表せばこういうこと。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;(((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;inxpkgs&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;) {}) {}) (self: super: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;うーん、ヘンタイ。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Make Vec from HashMap in Rust</title>
        <published>2019-02-20T00:00:00+00:00</published>
        <updated>2019-02-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-02-20-hashmap-to-vec/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-02-20-hashmap-to-vec/</id>
        
        <content type="html">&lt;p&gt;Think about &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;struct.HashMap.html&quot;&gt;HashMap&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;Struct std::collections::HashMap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;self, k: K, v: V) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;V&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        Inserts a key&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;value pair into the map.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; Keys&amp;lt;K, V&amp;gt;[src]
&lt;&#x2F;span&gt;&lt;span&gt;        An iterator visiting all keys &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; arbitrary order. The iterator element &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; K.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a straight application of &lt;code&gt;insert&lt;&#x2F;code&gt;, the following code seems to work well.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; collect keys of a HashMap into a Vec
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h: HashMap&amp;lt;K, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But in some case this is troublesome. For example,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; key is String
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;is a type mismatch because the return type of &lt;code&gt;keys&lt;&#x2F;code&gt; is the reference to key:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0277]: a collection of type `std::vec::Vec&amp;lt;std::string::String&amp;gt;` cannot be built from an iterator over elements of type `&amp;amp;std::string::String`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To fix it, make &lt;code&gt;hash&lt;&#x2F;code&gt; hold &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; as &lt;em&gt;key&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; change the key&amp;#39;s type
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;it emits another error in this case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0515]: cannot return value referencing local variable `h`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How about dereferencing and &lt;em&gt;injecting&lt;&#x2F;em&gt; them to the return value?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;amp;String to String
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; v: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; h.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|k| &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;k).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It can&#x27;t work (we can&#x27;t destruct data in order to make a return value):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0507]: cannot move out of borrowed content
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So we need to copy them explicitly, if &lt;code&gt;K&lt;&#x2F;code&gt; doesn&#x27;t have &lt;code&gt;Copy&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hash: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|k| k.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this code may contain unwanted memory copy. So make &lt;code&gt;hash&lt;&#x2F;code&gt; hold the reference.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; `hash` points the original data to avoid double allocation
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hash: HashMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, V&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; hash.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|k| k.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).collect::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SAT solvers in crates.io</title>
        <published>2019-02-16T00:00:00+00:00</published>
        <updated>2019-02-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-02-16-sat-solvers-on-crates_io/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-02-16-sat-solvers-on-crates_io/</id>
        
        <content type="html">&lt;p&gt;Here&#x27;s the list of SAT solvers in &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;search?q=SAT%20solver&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;varisat&quot;&gt;varisat&lt;&#x2F;h2&gt;
&lt;p&gt;A CDCL based SAT solver (command line tool)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;varisat&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;varisat-cli&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;batsat&quot;&gt;batsat&lt;&#x2F;h2&gt;
&lt;p&gt;Extensible SAT solver in Rust&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;batsat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cryptominisat&quot;&gt;cryptominisat&lt;&#x2F;h2&gt;
&lt;p&gt;Rust bindings for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;msoos&#x2F;cryptominisat&quot;&gt;Cryptominisat&lt;&#x2F;a&gt;, a boolean satisfiability solver&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cryptominisat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;splr&quot;&gt;splr&lt;&#x2F;h2&gt;
&lt;p&gt;My solver.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;splr&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;Related_project&quot;&gt;Related project&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;bcsat&quot;&gt;bcsat&lt;&#x2F;h2&gt;
&lt;p&gt;A parser, printer and related utilities for BCSAT &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;http:&#x2F;&#x2F;users.ics.aalto.fi&#x2F;tjunttil&#x2F;bcsat&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bcsat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ipasir&quot;&gt;ipasir&lt;&#x2F;h2&gt;
&lt;p&gt;Bindings for the IPASIR API to communicate with &lt;strong&gt;incremental SAT solvers&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ipasir&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Memo about installing Texlive</title>
        <published>2019-01-06T00:00:00+00:00</published>
        <updated>2019-01-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2019/2019-01-06-texlive-install/" type="text/html"/>
        <id>https://shnarazk.github.io/2019/2019-01-06-texlive-install/</id>
        
        <content type="html">&lt;h3 id=&quot;Bootstapping_my_Japanese_env.&quot;&gt;Bootstapping my Japanese env.&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;tlmgr update --self --all&lt;&#x2F;li&gt;
&lt;li&gt;tlmgr install collection-langjapanese&lt;&#x2F;li&gt;
&lt;li&gt;tlmgr install collection-latexextra&lt;&#x2F;li&gt;
&lt;li&gt;tlmgr install latexmk&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&#x2F;usr&#x2F;local&#x2F;texlive&#x2F;* が自分の管理下ならsudoは不要．&lt;&#x2F;p&gt;
&lt;h3 id=&quot;macでのパス&quot;&gt;macでのパス&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;実行ファイル: PATH=$PATH:&#x2F;Library&#x2F;TeX&#x2F;texbin&lt;&#x2F;li&gt;
&lt;li&gt;スタイルファイルなど: Library&#x2F;texmf&#x2F;tex&#x2F;latex&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;参考&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;texwiki.texjp.org&#x2F;?BasicTeX&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building emacs-mozc with yay</title>
        <published>2018-11-30T00:00:00+00:00</published>
        <updated>2018-11-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-11-30-build-emacs-mozc-with-yay/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-11-30-build-emacs-mozc-with-yay/</id>
        
        <content type="html">&lt;p&gt;Arch linuxでemacs-mozcを生成するにはmozcのPKGBUILDを修正する必要がある．
yayでそうするには以下のようなオプションが必要．&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ yay -S mozc --editmenu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ここで&lt;code&gt;--editmenu&lt;&#x2F;code&gt;だけを与えると，デフォールトの&lt;code&gt;-Syu&lt;&#x2F;code&gt;がなくなって何も実行しなくなるので注意．&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Disable auto-suspend by gdm</title>
        <published>2018-11-16T00:00:00+00:00</published>
        <updated>2018-11-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-11-16-gdm-autosuspend/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-11-16-gdm-autosuspend/</id>
        
        <content type="html">&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;u - gdm -s &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;export $(dbus-launch)
&lt;&#x2F;span&gt;&lt;span&gt;GSETIINGS_BACKEND=dconf gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type &amp;#39;nothing`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NixOS on MacOS Mojave</title>
        <published>2018-09-27T00:00:00+00:00</published>
        <updated>2018-09-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-09-27-nixos-on-majave/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-09-27-nixos-on-majave/</id>
        
        <content type="html">&lt;p&gt;Mojaveへのアップグレードでまた共有ライブラリがなくなってnix由来のプログラムが動かなくなった。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;dyld: Library not loaded: &#x2F;usr&#x2F;lib&#x2F;system&#x2F;libsystem_network.dylib
&lt;&#x2F;span&gt;&lt;span&gt;  Referenced from: &#x2F;nix&#x2F;store&#x2F;zk0kw320dn3dq56lpk7rgmf4pgk06g4f-Libsystem-osx-10.11.6&#x2F;lib&#x2F;libSystem.B.dylib
&lt;&#x2F;span&gt;&lt;span&gt;  Reason: image not found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;関連するissueは色々立っているけどどれもよくわからない。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;42719&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;多くの回答は再インストールを勧めているけど、それでも問題がある人もいるようだ。
結局以下の方法で対応できた。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# 問題を起こしている（存在しなくなったライブラリを読もうとしている）パッケージを全て削除：
&lt;&#x2F;span&gt;&lt;span&gt;sudo rm -fr &#x2F;nix&#x2F;store&#x2F;*-Libsystem-osx-10.11.6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# macOSの元環境でnix-2.1.2を再インストール
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;export PATH=&#x2F;usr&#x2F;bin:&#x2F;bin
&lt;&#x2F;span&gt;&lt;span&gt;curl https:&#x2F;&#x2F;nixos.org&#x2F;nix&#x2F;install &amp;gt; install
&lt;&#x2F;span&gt;&lt;span&gt;bash install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これでよくなった。nixOSが動くようになったのでTexLive2018の更新もまたできるようになった。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>memo about rustup</title>
        <published>2018-08-10T00:00:00+00:00</published>
        <updated>2018-08-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-08-10-rustup/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-08-10-rustup/</id>
        
        <content type="html">&lt;h2 id=&quot;ツールの追加&quot;&gt;ツールの追加&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;rustup component add rustfmt-preview
&lt;&#x2F;span&gt;&lt;span&gt;rustup component add rls-preview
&lt;&#x2F;span&gt;&lt;span&gt;rustup component add racer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;チャンネルの変更&quot;&gt;チャンネルの変更&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;rustup default {stable,beta,nightly}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;チャンネルの追加&quot;&gt;チャンネルの追加&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;rustup toolchain nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;開発環境&quot;&gt;開発環境&lt;&#x2F;h2&gt;
&lt;p&gt;emacsでは以下を入れておけばいいだろう。rust側ではrlsを入れておくこと。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;rust-mode&lt;&#x2F;li&gt;
&lt;li&gt;eglot&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;(eval-after-load &amp;quot;rust-mode&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(progn
&lt;&#x2F;span&gt;&lt;span&gt;     (define-key rust-mode-map (kbd &amp;quot;C-c C-c&amp;quot;) &amp;#39;compile)))
&lt;&#x2F;span&gt;&lt;span&gt;(add-hook &amp;#39;rust-mode-hook &amp;#39;eglot-ensure)
&lt;&#x2F;span&gt;&lt;span&gt;(add-hook &amp;#39;rust-mode-hook &amp;#39;flymake-mode-on)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;完全なブートストラップ&quot;&gt;完全なブートストラップ&lt;&#x2F;h2&gt;
&lt;p&gt;NixOSではrustupをcurlで落としてshに食わせてもうごかない。
nixpkgのrustupをインストールして以下を実行しないといけない。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rustup toolchain install stable
&lt;&#x2F;span&gt;&lt;span&gt;$ rustup default stable
&lt;&#x2F;span&gt;&lt;span&gt;$ rustup toolchain install rustc cargo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Compiling Haskell programs on NixOS on MacOS</title>
        <published>2018-07-18T00:00:00+00:00</published>
        <updated>2018-07-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-07-18-compiling-haskell-on-nixos-on-darwin/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-07-18-compiling-haskell-on-nixos-on-darwin/</id>
        
        <content type="html">&lt;p&gt;最近Haskellプログラムのコンパイルができなくなった。リンク時にiconv周りで未定義エラーが出てしまう。
対応するiconvをnixOS側に用意してやればいいようだ。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;nix:
&lt;&#x2F;span&gt;&lt;span&gt;  enable: true
&lt;&#x2F;span&gt;&lt;span&gt;  packages: [ haskellPackages.iconv ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;これで治った。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Re-edit personal information on NextCloud</title>
        <published>2018-07-15T00:00:00+00:00</published>
        <updated>2018-07-15T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-07-15-edit-personal-info-on-nextcloud/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-07-15-edit-personal-info-on-nextcloud/</id>
        
        <content type="html">&lt;p&gt;なにやら色々やっていたら、入力した電話番号やウェブサイトの情報が表示されているものの、
編集できなくなってしまった。&lt;&#x2F;p&gt;
&lt;p&gt;まず最初に考えたDBのリストアは見当違いだったので、ソースを追いかけてみた。&lt;&#x2F;p&gt;
&lt;p&gt;ウェブページのソースからブロックのidを見つけてソースで検索すると、
settings&#x2F;templates&#x2F;settings&#x2F;personal&#x2F;personal.info.php が引っかかる。
検索ボックスをhiddenにしているのは&lt;code&gt;lookupServerUploadEnabled&lt;&#x2F;code&gt;らしい。
このキーワードでさらに検索すると、server&#x2F;lib&#x2F;private&#x2F;Personal&#x2F;PersonalInfo.php(dead link https:&#x2F;&#x2F;github.com&#x2F;nextcloud&#x2F;server&#x2F;blob&#x2F;master&#x2F;lib&#x2F;private&#x2F;Settings&#x2F;Personal&#x2F;PersonalInfo.php)中で
&lt;code&gt;federated&lt;&#x2F;code&gt;かどうかを調べている。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;	&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt;	 * @return TemplateResponse returns the instance with all parameters set, ready to be rendered
&lt;&#x2F;span&gt;&lt;span&gt;	 * @since 9.1
&lt;&#x2F;span&gt;&lt;span&gt;	 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;	public function getForm() {
&lt;&#x2F;span&gt;&lt;span&gt;		$federatedFileSharingEnabled = $this-&amp;gt;appManager-&amp;gt;isEnabledForUser(&amp;#39;federatedfilesharing&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;		$lookupServerUploadEnabled = false;
&lt;&#x2F;span&gt;&lt;span&gt;		if($federatedFileSharingEnabled) {
&lt;&#x2F;span&gt;&lt;span&gt;			$federatedFileSharing = new Application();
&lt;&#x2F;span&gt;&lt;span&gt;			$shareProvider = $federatedFileSharing-&amp;gt;getFederatedShareProvider();
&lt;&#x2F;span&gt;&lt;span&gt;			$lookupServerUploadEnabled = $shareProvider-&amp;gt;isLookupServerUploadEnabled();
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;確かに共有に関して「色々やっていた」ので、メニュー：設定→共有→統合されたクラウド共有中のあれこれを公開するように変更したら問題解決。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;ただ、ログインに異常に時間が掛かるようにようになったのと、ログインに失敗したときに内部エラーになっ
てしまうという問題は残ったまま。再インストールでは治らなかったのでやはりDBの新規作り直しが必要なのだ
と思う。&lt;&#x2F;p&gt;
&lt;p&gt;カレンダーを使うとDBが壊れることもあるようだ。色々と勘違いをしていたせいもあり、設定をいじり過
ぎてわけがわからなくなってしまったので、結局データベースの作り直しも含む再インストールになってしまっ
た。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unlock files on NextCloud</title>
        <published>2018-07-10T00:00:00+00:00</published>
        <updated>2018-07-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-07-10-unlock-files-on-nextcloud/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-07-10-unlock-files-on-nextcloud/</id>
        
        <content type="html">&lt;p&gt;まず，&#x2F;etc&#x2F;webapps&#x2F;nextcloud&#x2F;config&#x2F;config.phpでmaintenanceをtrueに一時変更．&lt;&#x2F;p&gt;
&lt;p&gt;そして，以下を実行：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;mysql -u USERname DBname -p
&lt;&#x2F;span&gt;&lt;span&gt;パスワード
&lt;&#x2F;span&gt;&lt;span&gt;DELETE FROM oc_file_locks WHERE 1;
&lt;&#x2F;span&gt;&lt;span&gt;quit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to fix a nuisance by Intero on Emacs?</title>
        <published>2018-07-06T00:00:00+00:00</published>
        <updated>2018-07-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-07-06-broken-intero/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-07-06-broken-intero/</id>
        
        <content type="html">&lt;p&gt;At a directory without stack configuration, emacs is &lt;em&gt;devastated&lt;&#x2F;em&gt; by the initialization step of Intero.
This is a record of my atemps to fix.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2018-07-06:_Stop_it!&quot;&gt;2018-07-06: Stop it!&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;auto-revert-notify-add-watch &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Enable file notification for current buffer&amp;#39;s associated file.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;; We can assume that `buffer-file-name&amp;#39; and
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;; `auto-revert-use-notify&amp;#39; are non-nil.
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;match auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;exclude&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dir&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;regexp
&lt;&#x2F;span&gt;&lt;span&gt;			(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; default&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;directory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;	  (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;symlink&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name default&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;; Fallback to file checks.
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;local auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span&gt; auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor)
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor
&lt;&#x2F;span&gt;&lt;span&gt;	    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ignore-errors
&lt;&#x2F;span&gt;&lt;span&gt;	      (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name
&lt;&#x2F;span&gt;&lt;span&gt;		  (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch
&lt;&#x2F;span&gt;&lt;span&gt;		   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name default&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		   &amp;#39;(change attribute&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;change)
&lt;&#x2F;span&gt;&lt;span&gt;		   &amp;#39;auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;handler)
&lt;&#x2F;span&gt;&lt;span&gt;		(file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch
&lt;&#x2F;span&gt;&lt;span&gt;		 (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name default&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;directory&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		 &amp;#39;(change)
&lt;&#x2F;span&gt;&lt;span&gt;		 &amp;#39;auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;handler))))
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor
&lt;&#x2F;span&gt;&lt;span&gt;	  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;progn
&lt;&#x2F;span&gt;&lt;span&gt;	    (puthash
&lt;&#x2F;span&gt;&lt;span&gt;	     auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor
&lt;&#x2F;span&gt;&lt;span&gt;	     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span&gt;(current&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;buffer)
&lt;&#x2F;span&gt;&lt;span&gt;		   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;gethash&lt;&#x2F;span&gt;&lt;span&gt; auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor
&lt;&#x2F;span&gt;&lt;span&gt;			    auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	     auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;descriptor&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	    (add&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;kill&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook
&lt;&#x2F;span&gt;&lt;span&gt;		      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;#&amp;#39;auto-revert-notify-rm-watch nil t&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;; Fallback to file checks.
&lt;&#x2F;span&gt;&lt;span&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;local auto&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;revert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;)))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Comparison of luajitlatex and lualatex in TexLive2018</title>
        <published>2018-06-30T00:00:00+00:00</published>
        <updated>2018-06-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/luajitlatex/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/luajitlatex/</id>
        
        <content type="html">&lt;p&gt;つい最近までluajittexを知らなかったので、lualatexとluajitltexの速度比較をしてみます．&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;対象：50ページを超えるbeamerプレゼンテーションスライド&lt;&#x2F;li&gt;
&lt;li&gt;Version: TexLive2018 x86_64-linux&lt;&#x2F;li&gt;
&lt;li&gt;Env.: ArchLinux, 16GB, SSD&lt;&#x2F;li&gt;
&lt;li&gt;環境変数&lt;code&gt;TIMEFORMAT=&amp;quot;%2U&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;種々のキャッシュを活かすため１回目の実行結果は対象外&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ make clean; time lualatex presen.tex &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;18.31
&lt;&#x2F;span&gt;&lt;span&gt;17.74
&lt;&#x2F;span&gt;&lt;span&gt;17.99
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;※ make cleanの内容は &lt;code&gt;rm -f *.pdf *.aux *.log *.nav *.snm *.toc *.vrb&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ make clean;time luajittex --fmt=luajitlatex.fmt presen.tex &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;43.91
&lt;&#x2F;span&gt;&lt;span&gt;44.67
&lt;&#x2F;span&gt;&lt;span&gt;44.90
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;予想に反してjit版の方が2倍強遅いという結果になってしまった．なにか勘違いしている？
それともluatexはlua 5.2ベースなのに対して，luajittexはlua5.1ベースだそうだが，そのせいなのだろうか．&lt;&#x2F;p&gt;
&lt;p&gt;ではもしかしてluatex53は何か期待できる？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;$ make clean;time luatex53 --fmt=lualatex.fmt presen.tex &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span&gt;16.34
&lt;&#x2F;span&gt;&lt;span&gt;16.21
&lt;&#x2F;span&gt;&lt;span&gt;16.28
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;1秒強速くなった．今回の環境ではこれが最速．&lt;&#x2F;p&gt;
&lt;p&gt;この程度の違いでも何度もlatexを走らせるlatexmkで評価するとそれなりの差になってくる．
実際に&lt;code&gt;$pdflatex&lt;&#x2F;code&gt;の定義をこの２つで変えて実行してみると以下の結果．&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;latexmk&lt;&#x2F;th&gt;&lt;th&gt;run 1&lt;&#x2F;th&gt;&lt;th&gt;run 2&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;luatex53&lt;&#x2F;td&gt;&lt;td&gt;63.33&lt;&#x2F;td&gt;&lt;td&gt;63.63&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;luatex&lt;&#x2F;td&gt;&lt;td&gt;69.53&lt;&#x2F;td&gt;&lt;td&gt;69.85&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;うーむ．では .latexmkrc には luatex53 を登録しておこう．&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Deploy a Servant program to Heroku with Docker</title>
        <published>2018-06-24T00:00:00+00:00</published>
        <updated>2018-06-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-24-haskell-on-heroku/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-24-haskell-on-heroku/</id>
        
        <content type="html">&lt;p&gt;stackのテンプレートを使って
&lt;a href=&quot;https:&#x2F;&#x2F;haskell.jp&#x2F;blog&#x2F;posts&#x2F;2017&#x2F;02-haskell-on-heroku.html&quot;&gt;Dockerを使ってHaskellアプリをHerokuにデプロイする&lt;&#x2F;a&gt;
と同じことをやってみます．&lt;&#x2F;p&gt;
&lt;h3 id=&quot;下準備（オプショナル）&quot;&gt;下準備（オプショナル）&lt;&#x2F;h3&gt;
&lt;p&gt;stackに警告を出されないように，~&#x2F;.stack&#x2F;config.yml に以下のような情報を追加しておくといいかも．&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;templates&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;author-email&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;EMAIL
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;author-name&lt;&#x2F;span&gt;&lt;span&gt;:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;NAME
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;プロジェクトの生成&quot;&gt;プロジェクトの生成&lt;&#x2F;h3&gt;
&lt;p&gt;stackのテンプレート &lt;code&gt;servant-docker&lt;&#x2F;code&gt; を使ってプロジェクトの雛形を作らせます．&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;stack new PROJECT [--bare] servant-docker [--solver SOLVER]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;雛形なのでこれでデプロイまでできるはずなのですが，いくつか問題があるので修正します．&lt;&#x2F;p&gt;
&lt;h3 id=&quot;heroku用にプログラムを変更&quot;&gt;heroku用にプログラムを変更&lt;&#x2F;h3&gt;
&lt;p&gt;まず，herokuの環境でlistenすべきポート番号は環境変数で取得しないといけないのでそれを反映させます：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;diff --git a&#x2F;src&#x2F;Lib.hs b&#x2F;src&#x2F;Lib.hs
&lt;&#x2F;span&gt;&lt;span&gt;index 46ba8bc..c800dc5 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;src&#x2F;Lib.hs
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;src&#x2F;Lib.hs
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -10,6 +10,7 @@ import Data.Aeson.TH
&lt;&#x2F;span&gt;&lt;span&gt; import Network.Wai
&lt;&#x2F;span&gt;&lt;span&gt; import Network.Wai.Handler.Warp
&lt;&#x2F;span&gt;&lt;span&gt; import Servant
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;import System.ReadEnvVar (readEnvDef)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; data User = User
&lt;&#x2F;span&gt;&lt;span&gt;   { userId        :: Int
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -22,7 +23,10 @@ $(deriveJSON defaultOptions &amp;#39;&amp;#39;User)
&lt;&#x2F;span&gt;&lt;span&gt; type API = &amp;quot;users&amp;quot; :&amp;gt; Get &amp;#39;[JSON] [User]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; startApp :: IO ()
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;color:#323232;&quot;&gt;-startApp = run 1234 app
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;startApp = do
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  port &amp;lt;- readEnvDef &amp;quot;PORT&amp;quot; 8080
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  putStrLn $ &amp;quot;;;; start server at &amp;quot; ++ show port
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  run port app
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; app :: Application
&lt;&#x2F;span&gt;&lt;span&gt; app = serve api server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cdepillabout&#x2F;read-env-var&quot;&gt;ReadEnvVar&lt;&#x2F;a&gt;パッケージを追加したのでcabalファイルにも追加：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;diff --git a&#x2F;appname.cabal b&#x2F;appname.cabal
&lt;&#x2F;span&gt;&lt;span&gt;index b977aa5..e654f60 100644
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;PROJECT.cabal
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;PROJECT.cabal
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -18,6 +18,7 @@ library
&lt;&#x2F;span&gt;&lt;span&gt;   exposed-modules:     Lib
&lt;&#x2F;span&gt;&lt;span&gt;   build-depends:       base &amp;gt;= 4.7 &amp;amp;&amp;amp; &amp;lt; 5
&lt;&#x2F;span&gt;&lt;span&gt;                      , aeson
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;                     , read-env-var
&lt;&#x2F;span&gt;&lt;span&gt;                      , servant-server
&lt;&#x2F;span&gt;&lt;span&gt;                      , wai
&lt;&#x2F;span&gt;&lt;span&gt;                      , warp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;手動で確認&quot;&gt;手動で確認&lt;&#x2F;h3&gt;
&lt;p&gt;ここでコンパイルしてエラーがないことを確認します．&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ stack build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;動作確認は&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ export PORT=8080&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;APP &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;$ wget http:&#x2F;&#x2F;localhost:8080&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;Dockerイメージの作成&quot;&gt;Dockerイメージの作成&lt;&#x2F;h3&gt;
&lt;p&gt;まずdockerのイメージでプログラムが自動で実行されるようにDockerfile（ついでにstack.yml）を変更します．
．&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#ffecec;font-weight:bold;font-style:italic;color:#bd2c00;&quot;&gt;---&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; a&#x2F;Dockerfile
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;font-style:italic;color:#55a532;&quot;&gt;+++&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt; b&#x2F;Dockerfile
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -9,3 +9,4 @@
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; COPY . &#x2F;app&#x2F;user
&lt;&#x2F;span&gt;&lt;span&gt; RUN stack install
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;CMD APP.EXE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt;modified   stack.yaml
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;font-style:italic;color:#969896;&quot;&gt;@@ -66,6 +66,15 @@ allow-newer: true
&lt;&#x2F;span&gt;&lt;span&gt; # Allow a newer minor version of GHC than the snapshot specifies
&lt;&#x2F;span&gt;&lt;span&gt; # compiler-check: newer-minor
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;image:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;  containers:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;    -
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;      base: &amp;quot;haskell:8.4.3&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;      executables:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;        - APP.EXE
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;      entrypoints:
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;font-weight:bold;color:#55a532;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#eaffea;color:#323232;&quot;&gt;        - APP.EXE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下を実行してイメージを作ります：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;docker build -t APPNAME .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;動作確認は&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ docker run -p 8080:8080 --publish-all APPNAME
&lt;&#x2F;span&gt;&lt;span&gt;$ wget http:&#x2F;&#x2F;localhost:8080&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;herokuへのデプロイ&quot;&gt;herokuへのデプロイ&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;初期設定&quot;&gt;初期設定&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;アカウントを作る&lt;&#x2F;li&gt;
&lt;li&gt;heroku dashboardでアプリの登録&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;heroku login
&lt;&#x2F;span&gt;&lt;span&gt;heroku apps:create APPNAME
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;ビルドからデプロイ&quot;&gt;ビルドからデプロイ&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;ログインする&lt;&#x2F;li&gt;
&lt;li&gt;コンテナ環境での作業&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ heroku container:login
&lt;&#x2F;span&gt;&lt;span&gt;$ heroku container:push web &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;app APPNAME&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;$ heroku container:release web &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;app APPNAME&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;gitlab-ci.ymlに登録&quot;&gt;gitlab-ci.ymlに登録&lt;&#x2F;h3&gt;
&lt;p&gt;うまく行ったなら自動化させます．当然gitlab用に &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; を作成：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;build:
&lt;&#x2F;span&gt;&lt;span&gt;  stage: build
&lt;&#x2F;span&gt;&lt;span&gt;  script:
&lt;&#x2F;span&gt;&lt;span&gt;    - docker build -t APPNAME .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;deploy heroku:
&lt;&#x2F;span&gt;&lt;span&gt;  stage: deploy
&lt;&#x2F;span&gt;&lt;span&gt;  script:
&lt;&#x2F;span&gt;&lt;span&gt;    - heroku container:login
&lt;&#x2F;span&gt;&lt;span&gt;    - heroku container:push web --app APPNAME
&lt;&#x2F;span&gt;&lt;span&gt;    - heroku container:release web --app APPNAME
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;（さらにherokuへのデプロイ用のキーを登録する必要があるかも）&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;だったらstack_templateにしてしまおう&quot;&gt;だったらstack templateにしてしまおう&lt;&#x2F;h2&gt;
&lt;p&gt;ということで以上の変更をしたテンプレート https:&#x2F;&#x2F;gitlab.com&#x2F;snippets&#x2F;1728485&#x2F;raw を作りました．
テンプレートはurl指定で使えるので，以下のようにするのが一番速いでしょう．&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;stack new projectname https:&#x2F;&#x2F;gitlab.com&#x2F;snippets&#x2F;1728485&#x2F;raw
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ということで結論&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;プロジェクト生成： &lt;code&gt;stack new PROJECT https:&#x2F;&#x2F;gitlab.com&#x2F;snippets&#x2F;1728485&#x2F;raw&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;dockerで確認： &lt;code&gt;docker build -t PROJECT .&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;herokuにログイン： &lt;code&gt;heroku container:login&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;プッシュ: &lt;code&gt;heroku container:push web --app PROJECT&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;実行開始: &lt;code&gt;heroku container:release web --app PROJECT&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;PostgreSQLにつないでみよう&quot;&gt;PostgreSQLにつないでみよう&lt;&#x2F;h2&gt;
&lt;p&gt;このプログラムはPostgreSQLを使うために外部プログラムを呼び出していません。
対応するのは簡単で以下の通り：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Dockerのベースイメージを &lt;code&gt;nixos:2.0.4&lt;&#x2F;code&gt; に変更&lt;&#x2F;li&gt;
&lt;li&gt;servantのプログラムはtutorialの&lt;a href=&quot;http:&#x2F;&#x2F;haskell-servant.readthedocs.io&#x2F;en&#x2F;stable&#x2F;cookbook&#x2F;db-postgres-pool&#x2F;PostgresPool.html&quot;&gt;Cookbook PostgreSQL connection pool&lt;&#x2F;a&gt;をそのまま流用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;あとはherokuでpostgreSQLを有効にすればOK。
Dockerfileはこのようになりました。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;FROM nixos&#x2F;nix:2.0.4
&lt;&#x2F;span&gt;&lt;span&gt;ENV LANG C.UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RUN nix-channel --update
&lt;&#x2F;span&gt;&lt;span&gt;RUN nix-env -u
&lt;&#x2F;span&gt;&lt;span&gt;RUN nix-env -f &amp;quot;&amp;lt;nixpkgs&amp;gt;&amp;quot; -iA haskell.compiler.ghc843
&lt;&#x2F;span&gt;&lt;span&gt;RUN nix-env -i stack
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;WORKDIR &#x2F;opt&#x2F;PROJECT&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;ENV PATH &amp;quot;&#x2F;opt&#x2F;PROJECT&#x2F;bin:$PATH&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Build and install application binaries to &#x2F;opt&#x2F;PROJECT&#x2F;bin.
&lt;&#x2F;span&gt;&lt;span&gt;COPY *.yaml &#x2F;opt&#x2F;PROJECT&#x2F;src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;RUN stack --no-terminal build --only-dependencies
&lt;&#x2F;span&gt;&lt;span&gt;COPY . &#x2F;opt&#x2F;PROJECT&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;RUN stack --no-terminal --local-bin-path &#x2F;opt&#x2F;PROJECT&#x2F;bin install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# clean up and run
&lt;&#x2F;span&gt;&lt;span&gt;RUN rm -rf &#x2F;opt&#x2F;PROJECT&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;CMD &#x2F;opt&#x2F;PROJECT&#x2F;bin&#x2F;PROJECT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>lualatex-ja on ArchLinux</title>
        <published>2018-06-22T00:00:00+00:00</published>
        <updated>2018-06-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-22-lualatex-on-archlinux/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-22-lualatex-on-archlinux/</id>
        
        <content type="html">&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;ABD: EverySelectfont initializing macros)
&lt;&#x2F;span&gt;&lt;span&gt;(&#x2F;usr&#x2F;share&#x2F;texmf-dist&#x2F;tex&#x2F;luatex&#x2F;luatexja&#x2F;patches&#x2F;lltjdefs.sty(save: &#x2F;home&#x2F;nas
&lt;&#x2F;span&gt;&lt;span&gt;h&#x2F;.texlive&#x2F;texmf-var&#x2F;luatex-cache&#x2F;generic&#x2F;fonts&#x2F;otl&#x2F;ipaexm.lua)(save: &#x2F;home&#x2F;nas
&lt;&#x2F;span&gt;&lt;span&gt;h&#x2F;.texlive&#x2F;texmf-var&#x2F;luatex-cache&#x2F;generic&#x2F;fonts&#x2F;otl&#x2F;ipaexm.luc)(load cache: &#x2F;ho
&lt;&#x2F;span&gt;&lt;span&gt;me&#x2F;nash&#x2F;.texlive&#x2F;texmf-var&#x2F;luatexja&#x2F;extra_ipaexmincho.luc)
&lt;&#x2F;span&gt;&lt;span&gt;(&#x2F;usr&#x2F;share&#x2F;texmf-dist&#x2F;tex&#x2F;luatex&#x2F;luatexja&#x2F;jfm-ujisv.lua)
&lt;&#x2F;span&gt;&lt;span&gt;! Number too big.
&lt;&#x2F;span&gt;&lt;span&gt;ltj@@jfont -&amp;gt;luafunction ltj@@jfont@inner 
&lt;&#x2F;span&gt;&lt;span&gt;                                          
&lt;&#x2F;span&gt;&lt;span&gt;l.53 \kanjiencoding{JY3}\selectfont
&lt;&#x2F;span&gt;&lt;span&gt;                                 \adjustbaseline
&lt;&#x2F;span&gt;&lt;span&gt;? 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;rm .texlive&#x2F;texmf-var&#x2F;lualatexja&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;pacman -Qo &#x2F;usr&#x2F;share&#x2F;texmf-dist&#x2F;tex&#x2F;luatex&#x2F;luatexja&#x2F;patches&#x2F;lltjdefs.sty 
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;usr&#x2F;share&#x2F;texmf-dist&#x2F;tex&#x2F;luatex&#x2F;luatexja&#x2F;patches&#x2F;lltjdefs.sty は texlive-langjapanese 2018.47402-1 によって所有されています
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reading a CSV file into R</title>
        <published>2018-06-21T00:00:00+00:00</published>
        <updated>2018-06-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-21-Reading-CSV-in-R/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-21-Reading-CSV-in-R/</id>
        
        <content type="html">&lt;h2 id=&quot;関数read.csvを使ってCSVファイルを読む&quot;&gt;関数read.csvを使ってCSVファイルを読む&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;df = read.csv(...)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;引数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ファイル名 :: 文字列&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;header&lt;&#x2F;code&gt; :: Bool -- コラム名として使われるヘッダー行を持つか&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;comment&lt;&#x2F;code&gt; :: 文字列 -- コメント行の開始文字&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;!--more--&gt;
&lt;p&gt;例&lt;&#x2F;p&gt;
&lt;p&gt;以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00
&lt;&#x2F;span&gt;&lt;span&gt;solver, num, target, time
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;mios-f69b8b8 0.4-2C2L@12-15&amp;quot;, 1, &amp;quot;SR2015subset1&#x2F;38bits_10.dimacs.cnf&amp;quot;,  4.12
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;mios-f69b8b8 0.4-2C2L@12-15&amp;quot;, 2, &amp;quot;SR2015subset1&#x2F;40bits_10.dimacs.cnf&amp;quot;,  1256.82
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;このファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;df = read.csv(&amp;quot;result.csv&amp;quot;, header=T, comment=&amp;quot;#&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;1._行や列を指定して部分データを取り出す&quot;&gt;1. 行や列を指定して部分データを取り出す&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;まず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。&lt;&#x2F;li&gt;
&lt;li&gt;次に対象行や対象列の要素全てに対する計算のやり方を考えます。&lt;&#x2F;li&gt;
&lt;li&gt;次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。&lt;&#x2F;li&gt;
&lt;li&gt;最後に条件を使った計算式についてループにより処理する方法を見ます。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;1.1_行添字、列添字による部分データの取り出し&quot;&gt;1.1 行添字、列添字による部分データの取り出し&lt;&#x2F;h4&gt;
&lt;p&gt;データフレームの一部を取り出すには、&lt;strong&gt;[, 列指定添字]&lt;&#x2F;strong&gt;、&lt;strong&gt;[行指定添字, ]&lt;&#x2F;strong&gt; を用いる。返ってくるものはスカラー値またはデータフレーム型になる。
添字はスカラー値でもよいし、ベクターでもよい。&lt;&#x2F;p&gt;
&lt;p&gt;例&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;R&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-R &quot;&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span&gt;df[, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;df[, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;df[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, ]
&lt;&#x2F;span&gt;&lt;span&gt;df[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;1.2_列名による取り出し&quot;&gt;1.2 列名による取り出し&lt;&#x2F;h4&gt;
&lt;p&gt;ヘッダーを持つデータフレームの列は &lt;strong&gt;[列名]&lt;&#x2F;strong&gt; でindexingできます。列名は文字列型。従って文字列型の変数も使える。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;R&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-R &quot;&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span&gt;df &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= ... &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# データフレーム変数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;df[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;target&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# または
&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;target&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;df[c]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;1.3_条件式による行の取り出し&quot;&gt;1.3 条件式による行の取り出し&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;R&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-R &quot;&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span&gt;d1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;subset&lt;&#x2F;span&gt;&lt;span&gt;(df, p1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2._対象行（列）の要素全てに対する計算&quot;&gt;2. 対象行（列）の要素全てに対する計算&lt;&#x2F;h3&gt;
&lt;p&gt;多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。&lt;&#x2F;p&gt;
&lt;p&gt;例&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;R&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-R &quot;&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span&gt;df &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= ... &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# データフレーム型変数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;df[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; df[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;# 1行目と2行目の要素それぞれを加算
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Glucose on NixOS</title>
        <published>2018-06-21T00:00:00+00:00</published>
        <updated>2018-06-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-21-glucose-on-nixos/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-21-glucose-on-nixos/</id>
        
        <content type="html">&lt;script src=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;satisfiability01&#x2F;satisfiability01.gitlab.io&#x2F;snippets&#x2F;1726649.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;builder.sh&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;cd simp
&lt;&#x2F;span&gt;&lt;span&gt;make clean
&lt;&#x2F;span&gt;&lt;span&gt;make
&lt;&#x2F;span&gt;&lt;span&gt;mv glucose glucose3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;build&quot;&gt;build&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;$ nix-shell -p zlib
&lt;&#x2F;span&gt;&lt;span&gt;$ cd simp; make clean; make;
&lt;&#x2F;span&gt;&lt;span&gt;$ cp glucose3 ~&#x2F;.local&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lingeling on NixOS</title>
        <published>2018-06-21T00:00:00+00:00</published>
        <updated>2018-06-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-21-lingeling-on-nixos/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-21-lingeling-on-nixos/</id>
        
        <content type="html">&lt;h3 id=&quot;lingeling.nix&quot;&gt;lingeling.nix&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;nix&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-nix &quot;&gt;&lt;code class=&quot;language-nix&quot; data-lang=&quot;nix&quot;&gt;&lt;span&gt;{ pkgs &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;lt;nixpkgs&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{} } :
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;stdenv &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;stdenv;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;fetchurl &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;fetchurl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;zlib &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;pkgs&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;zlib;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in
&lt;&#x2F;span&gt;&lt;span&gt;stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;mkDerivation &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;rec &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;lingeling&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;src &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;fetchurl {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;fmv.jku.at&#x2F;lingeling&#x2F;lingeling-bbc-9230380-160707.tar.gz&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;sha256 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;7960c69ebd3da1400b0f3135fa08d71abd405c180fc52f785b35ad8a58585126&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;sourceRoot &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;lingeling-bbc-9230380-160707&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;configureScript&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.&#x2F;configure.sh&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;dontAddPrefix&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;makeFlags &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;installPhase &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    install -Dm0755 lingeling $out&#x2F;bin&#x2F;lingeling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    mkdir -p &amp;quot;$out&#x2F;share&#x2F;doc&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;    install -Dm0755 {COPYING,NEWS,README,VERSION} &amp;quot;$out&#x2F;share&#x2F;doc&#x2F;${&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;}&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;  &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= with &lt;&#x2F;span&gt;&lt;span&gt;stdenv&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;lib; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;A Modern and parallel SAT solver. Copyright (c) 2010 - 2016 Armin Biere, Johannes Kepler University, Linz, Austria. http:&#x2F;&#x2F;fmv.jku.at&#x2F;lingeling&#x2F;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#    license = licenses.mit;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;platforms &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;platforms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;unix;
&lt;&#x2F;span&gt;&lt;span&gt;  };
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;$ nix-build lingeling.nix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Kernel Density Estimation in R</title>
        <published>2018-06-20T00:00:00+00:00</published>
        <updated>2018-06-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-06-20-KDE-in-R/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-06-20-KDE-in-R/</id>
        
        <content type="html">&lt;pre data-lang=&quot;R&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-R &quot;&gt;&lt;code class=&quot;language-R&quot; data-lang=&quot;R&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env Rscript
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;MASS&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;KernSmooth&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;arg1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;commandArgs&lt;&#x2F;span&gt;&lt;span&gt;(trailingOnly&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;TRUE&lt;&#x2F;span&gt;&lt;span&gt;)[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;read.csv&lt;&#x2F;span&gt;&lt;span&gt;(arg1, header&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;T, sep&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, comment&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;#&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;bx &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, bandwidth.nrd(d[,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;by &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;, bandwidth.nrd(d[,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]))
&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span&gt;kde2d(d[,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], d[,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;(bx, by), n&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;png&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;paste&lt;&#x2F;span&gt;&lt;span&gt;(arg1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;-dens.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sep&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;(k)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;dev.off&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;png&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;paste&lt;&#x2F;span&gt;&lt;span&gt;(arg1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;-contour.png&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, sep&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contour&lt;&#x2F;span&gt;&lt;span&gt;(k)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;dev.off&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Flymake for Haskell in GNU Emacs 26</title>
        <published>2018-05-31T00:00:00+00:00</published>
        <updated>2018-05-31T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-05-31-flymake-Haskell/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-05-31-flymake-Haskell/</id>
        
        <content type="html">&lt;script src=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;snippets&#x2F;1725106.js&quot;&gt;&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Some GHC options for Mios</title>
        <published>2018-05-20T00:00:00+00:00</published>
        <updated>2018-05-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-05-20-ghc-options/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-05-20-ghc-options/</id>
        
        <content type="html">&lt;p&gt;https:&#x2F;&#x2F;downloads.haskell.org&#x2F;~ghc&#x2F;latest&#x2F;docs&#x2F;html&#x2F;users_guide&#x2F;runtime_control.html#rts-options-to-control-the-garbage-collector&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;-A ⟨size⟩
&lt;&#x2F;span&gt;&lt;span&gt;    Default:	1MB
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    Set the allocation area size used by the garbage collector. The allocation area (actually
&lt;&#x2F;span&gt;&lt;span&gt;    generation 0 step 0) is fixed and is never resized (unless you use -H [⟨size⟩], below).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Increasing the allocation area size may or may not give better performance (a bigger allocation
&lt;&#x2F;span&gt;&lt;span&gt;    area means worse cache behaviour but fewer garbage collections and less promotion).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    With only 1 generation (e.g. -G1, see -G ⟨generations⟩) the -A option specifies the minimum
&lt;&#x2F;span&gt;&lt;span&gt;    allocation area, since the actual size of the allocation area will be resized according to the
&lt;&#x2F;span&gt;&lt;span&gt;    amount of data in the heap (see -F ⟨factor⟩, below).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-M ⟨size⟩
&lt;&#x2F;span&gt;&lt;span&gt;    Default:	unlimited
&lt;&#x2F;span&gt;&lt;span&gt;    Set the maximum heap size to ⟨size⟩ bytes. The heap normally grows and shrinks according to the
&lt;&#x2F;span&gt;&lt;span&gt;    memory requirements of the program. The only reason for having this option is to stop the heap
&lt;&#x2F;span&gt;&lt;span&gt;    growing without bound and filling up all the available swap space, which at the least will
&lt;&#x2F;span&gt;&lt;span&gt;    result in the program being summarily killed by the operating system.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    The maximum heap size also affects other garbage collection parameters: when the amount of live
&lt;&#x2F;span&gt;&lt;span&gt;    data in the heap exceeds a certain fraction of the maximum heap size, compacting collection will
&lt;&#x2F;span&gt;&lt;span&gt;    be automatically enabled for the oldest generation, and the -F parameter will be reduced in
&lt;&#x2F;span&gt;&lt;span&gt;    order to avoid exceeding the maximum heap size.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Upgrade PostgreSQL DB</title>
        <published>2018-02-04T00:00:00+00:00</published>
        <updated>2018-02-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-02-04-upgrade-postgresql/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-02-04-upgrade-postgresql/</id>
        
        <content type="html">&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;PostgreSQL#Upgrading_PostgreSQL&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From 9.X to 10.X&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;systemctl stop postgreqsl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;lib&#x2F;postgres
&lt;&#x2F;span&gt;&lt;span&gt;mv data data-old
&lt;&#x2F;span&gt;&lt;span&gt;mkdir data
&lt;&#x2F;span&gt;&lt;span&gt;chown postgreq:postgreq data
&lt;&#x2F;span&gt;&lt;span&gt;su postgres
&lt;&#x2F;span&gt;&lt;span&gt;initdb --locale &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;en_US.UTF8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; -E UTF8 -D &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;#39;&#x2F;var&#x2F;lib&#x2F;postgres&#x2F;data&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;pg_upgrade -b &#x2F;opt&#x2F;pgsql-9.6&#x2F;bin&#x2F; -B &#x2F;usr&#x2F;bin&#x2F; -d &#x2F;var&#x2F;lib&#x2F;postgres&#x2F;data-old -D &#x2F;var&#x2F;lib&#x2F;postgres&#x2F;data)
&lt;&#x2F;span&gt;&lt;span&gt;sudo systemctl start postgresql
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;analyze_new_cluster.sh
&lt;&#x2F;span&gt;&lt;span&gt;.&#x2F;delete_old_cluster.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Evil (and vim) cheat sheet</title>
        <published>2018-02-03T00:00:00+00:00</published>
        <updated>2019-08-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2018/2018-02-03-Evil-keybindings/" type="text/html"/>
        <id>https://shnarazk.github.io/2018/2018-02-03-Evil-keybindings/</id>
        
        <content type="html">&lt;h2 id=&quot;Basic_::_object_&#x2F;_mark_&#x2F;_register&quot;&gt;Basic :: object &#x2F; mark &#x2F; register&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;object&quot;&gt;object&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;b      - a block by ()
&lt;&#x2F;span&gt;&lt;span&gt;t      - tag
&lt;&#x2F;span&gt;&lt;span&gt;w      - a small word
&lt;&#x2F;span&gt;&lt;span&gt;W      - a big word
&lt;&#x2F;span&gt;&lt;span&gt;$      - math mode in latex
&lt;&#x2F;span&gt;&lt;span&gt;i{o}   - inner text object {o}
&lt;&#x2F;span&gt;&lt;span&gt;a{o}   - around text object {o}
&lt;&#x2F;span&gt;&lt;span&gt;s{o}   - [Surround] surround object {o} in normal mode
&lt;&#x2F;span&gt;&lt;span&gt;S{o}   - [Surround] surround object {o} in visual mode
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;mark_(location)&quot;&gt;mark (location)&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;.      - last changed position (jump there by ` or &amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;^      - last insert position
&lt;&#x2F;span&gt;&lt;span&gt;-      - latest small delete, which is a delete smaller than 1 line
&lt;&#x2F;span&gt;&lt;span&gt;[      - beginning of previously changed or yanked text
&lt;&#x2F;span&gt;&lt;span&gt;]      - end of previously changed or yanked text
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;      - beginning of last visual selection
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;      - end of last visual selection
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;register&quot;&gt;register&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;0 to 9 - latest to 10th yanked text
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;      - latest deleted or yanked text
&lt;&#x2F;span&gt;&lt;span&gt;.      - latest inserted text
&lt;&#x2F;span&gt;&lt;span&gt;+      - clipboard
&lt;&#x2F;span&gt;&lt;span&gt;:      - latest executed command (f.e. @:)
&lt;&#x2F;span&gt;&lt;span&gt;%      - current file path
&lt;&#x2F;span&gt;&lt;span&gt;#      - alternate file path
&lt;&#x2F;span&gt;&lt;span&gt;=      - expression register, taking an elisp expression
&lt;&#x2F;span&gt;&lt;span&gt;:reg   - list up the contents
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Normal_Mode_::_motion_&#x2F;_operator&quot;&gt;Normal Mode :: motion &#x2F; operator&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;motion&quot;&gt;motion&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;h 	- move left
&lt;&#x2F;span&gt;&lt;span&gt;j 	- move down
&lt;&#x2F;span&gt;&lt;span&gt;k 	- move up
&lt;&#x2F;span&gt;&lt;span&gt;l	- move right
&lt;&#x2F;span&gt;&lt;span&gt;w 	- jump by start of words (punctuation considered words)
&lt;&#x2F;span&gt;&lt;span&gt;W 	- jump by words (spaces separate words)
&lt;&#x2F;span&gt;&lt;span&gt;b 	- jump backward by words (punctuation considered words)
&lt;&#x2F;span&gt;&lt;span&gt;B 	- jump backward by words (no punctuation)
&lt;&#x2F;span&gt;&lt;span&gt;e 	- jump to end of words (punctuation considered words)
&lt;&#x2F;span&gt;&lt;span&gt;E 	- jump to end of words (no punctuation)
&lt;&#x2F;span&gt;&lt;span&gt;ge 	- jump backward to end of words (punctuation considered words)
&lt;&#x2F;span&gt;&lt;span&gt;gE 	- jump backward to end of words (no punctuation)
&lt;&#x2F;span&gt;&lt;span&gt;f{c} 	- jump forward to the character {c}
&lt;&#x2F;span&gt;&lt;span&gt;F{c} 	- jump backward to the character {c}
&lt;&#x2F;span&gt;&lt;span&gt;t{c} 	- jump forward by the character {c}
&lt;&#x2F;span&gt;&lt;span&gt;T{c} 	- jump backward by the character {c}
&lt;&#x2F;span&gt;&lt;span&gt;; 	- repeat the last {fFtT}
&lt;&#x2F;span&gt;&lt;span&gt;, 	- repeat the last {fFtT} in reverse direction
&lt;&#x2F;span&gt;&lt;span&gt;0 	- (zero) start of line
&lt;&#x2F;span&gt;&lt;span&gt;^ 	- first non-blank character of line
&lt;&#x2F;span&gt;&lt;span&gt;$ 	- end of line
&lt;&#x2F;span&gt;&lt;span&gt;gg 	- go to first line
&lt;&#x2F;span&gt;&lt;span&gt;[N]G 	- go to line N. No N: last line
&lt;&#x2F;span&gt;&lt;span&gt;`{m} 	- jump to the marked position {m}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;{m} 	- jump to the marked line {m}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;register_operator&quot;&gt;register operator&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;[&amp;quot;{r}]d 	- delete target [to register {r}]
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;{r}]y 	- yank target [to register]
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;{r}]P 	- put (paste) the clipboard after cursor&#x2F;current line [from register]
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;{r}]p 	- put (paste) before cursor&#x2F;current line [from register]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Normal_Mode_Command_::_search_&#x2F;_edit_&#x2F;_movement&quot;&gt;Normal Mode Command :: search &#x2F; edit &#x2F; movement&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;search&quot;&gt;search&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&#x2F;pattern 	- search for pattern
&lt;&#x2F;span&gt;&lt;span&gt;?pattern 	- search backward for pattern
&lt;&#x2F;span&gt;&lt;span&gt;n 		- repeat search in same direction
&lt;&#x2F;span&gt;&lt;span&gt;N 		- repeat search in opposite direction
&lt;&#x2F;span&gt;&lt;span&gt;* 		- search the word on cursor
&lt;&#x2F;span&gt;&lt;span&gt;:%s&#x2F;old&#x2F;new&#x2F;g 	- replace all old with new throughout file
&lt;&#x2F;span&gt;&lt;span&gt;:%s&#x2F;old&#x2F;new&#x2F;gc 	- replace all old with new throughout file with confirmations
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;edit&quot;&gt;edit&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;i 	- start insert mode at cursor
&lt;&#x2F;span&gt;&lt;span&gt;I 	- insert at the beginning of the line
&lt;&#x2F;span&gt;&lt;span&gt;a 	- append after the cursor
&lt;&#x2F;span&gt;&lt;span&gt;A 	- append at the end of the line
&lt;&#x2F;span&gt;&lt;span&gt;o 	- open (append) blank line below current line (no need to press return)
&lt;&#x2F;span&gt;&lt;span&gt;O 	- open blank line above current line
&lt;&#x2F;span&gt;&lt;span&gt;. 	- repeat last command
&lt;&#x2F;span&gt;&lt;span&gt;u 	- undo
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-r 	- redo
&lt;&#x2F;span&gt;&lt;span&gt;x 	- delete current character
&lt;&#x2F;span&gt;&lt;span&gt;X 	- delete previous character
&lt;&#x2F;span&gt;&lt;span&gt;s 	- delete character at cursor and substitute text
&lt;&#x2F;span&gt;&lt;span&gt;r 	- replace a single character (does not use insert mode)
&lt;&#x2F;span&gt;&lt;span&gt;J 	- join line below to the current one
&lt;&#x2F;span&gt;&lt;span&gt;~ 	- switch case
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; 	- indent line one column to right
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; 	- indent line one column to left
&lt;&#x2F;span&gt;&lt;span&gt;== 	- auto-indent current line
&lt;&#x2F;span&gt;&lt;span&gt;q{m} 	- start recording a macro into {m}
&lt;&#x2F;span&gt;&lt;span&gt;q 	- end macro recording
&lt;&#x2F;span&gt;&lt;span&gt;@{m} 	- execute macro {m}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;movement&quot;&gt;movement&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;m{m} 	- mark the current position to {m} (jump there by ` or &amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-b 	- page up
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-f 	- page down
&lt;&#x2F;span&gt;&lt;span&gt;% 	- jump to matching brace
&lt;&#x2F;span&gt;&lt;span&gt;z. 	- recenter
&lt;&#x2F;span&gt;&lt;span&gt;zz 	- jump to center of screen
&lt;&#x2F;span&gt;&lt;span&gt;zt 	- jump to the top of screen
&lt;&#x2F;span&gt;&lt;span&gt;zb 	- jump to the bottom of screen
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Visual_Mode_::_mark_&#x2F;_commands&quot;&gt;Visual Mode :: mark &#x2F; commands&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;mark&quot;&gt;mark&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;v 	- start visual mode, mark lines, then do command (such as y-yank)
&lt;&#x2F;span&gt;&lt;span&gt;V 	- start Linewise visual mode
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-v 	- start visual block mode
&lt;&#x2F;span&gt;&lt;span&gt;o 	- move to other end of marked area
&lt;&#x2F;span&gt;&lt;span&gt;O 	- move to Other corner of block
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;commands&quot;&gt;commands&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;&amp;gt; 	- shift right
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; 	- shift left
&lt;&#x2F;span&gt;&lt;span&gt;c 	- change (replace) marked text
&lt;&#x2F;span&gt;&lt;span&gt;y 	- yank (copy) marked text
&lt;&#x2F;span&gt;&lt;span&gt;d 	- delete (cut) marked text
&lt;&#x2F;span&gt;&lt;span&gt;~ 	- switch case
&lt;&#x2F;span&gt;&lt;span&gt;U 	- upper case of marked area
&lt;&#x2F;span&gt;&lt;span&gt;v	- exit visual mode
&lt;&#x2F;span&gt;&lt;span&gt;S 	- [Surround] insert surrounding
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Insert_Mode&quot;&gt;Insert Mode&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;Esc 		- exit insert mode
&lt;&#x2F;span&gt;&lt;span&gt;\ 		- execute an command
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-r{r} 	- insert the content in register {r}
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-w 		- backward delete a word
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-y 		- copy a char in above line
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-e 		- copy a char in below line
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Interface_::_buffer_&#x2F;_windows_&#x2F;_tab_&#x2F;_exit&quot;&gt;Interface :: buffer &#x2F; windows &#x2F; tab &#x2F; exit&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;buffer&quot;&gt;buffer&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;:edit filename 	- Edit a file in a new buffer
&lt;&#x2F;span&gt;&lt;span&gt;:new **&#x2F;* 	- Open new files
&lt;&#x2F;span&gt;&lt;span&gt;:bnext		- go to next buffer
&lt;&#x2F;span&gt;&lt;span&gt;:bprev 		- go to previous buffer
&lt;&#x2F;span&gt;&lt;span&gt;:bd   		- delete a buffer (close a file)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;window&quot;&gt;window&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;:sp filename 	- Open a file in a new buffer and split window
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-w s 	- Split windows
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-w w 	- switch between windows
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-w q 	- Quit a window
&lt;&#x2F;span&gt;&lt;span&gt;Ctrl-w v 	- Split windows vertically
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;tab&quot;&gt;tab&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;gt		- next tab
&lt;&#x2F;span&gt;&lt;span&gt;gT		- previous tab
&lt;&#x2F;span&gt;&lt;span&gt;:tabr		- first tab
&lt;&#x2F;span&gt;&lt;span&gt;:tabl		- last tab
&lt;&#x2F;span&gt;&lt;span&gt;:tabe filename 	- Edit a file in a new tab (vim7)
&lt;&#x2F;span&gt;&lt;span&gt;:tabm [n]	- move current tab after tab n. no n: last. n=0: first.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;exit&quot;&gt;exit&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;:w		- write (save) the file, but don&amp;#39;t exit
&lt;&#x2F;span&gt;&lt;span&gt;:wq 		- write (save) and quit
&lt;&#x2F;span&gt;&lt;span&gt;:x		- same as :wq
&lt;&#x2F;span&gt;&lt;span&gt;:q		- quit (fails if anything has changed)
&lt;&#x2F;span&gt;&lt;span&gt;:q!		- quit and throw away changes
&lt;&#x2F;span&gt;&lt;span&gt;:setlocal fileformat=dos|unix | fileencoding=utf-8
&lt;&#x2F;span&gt;&lt;span&gt;:viusage 	- show a huge cheat sheet listing every command
&lt;&#x2F;span&gt;&lt;span&gt;:help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;Cliche&quot;&gt;Cliche&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;cs({    - [Surround] change surrounding parens to curly braces
&lt;&#x2F;span&gt;&lt;span&gt;xp 		- transpose two letters (delete and paste, technically)
&lt;&#x2F;span&gt;&lt;span&gt;g~iw 		- switch case of current word
&lt;&#x2F;span&gt;&lt;span&gt;guiw 		- make current word uppercase
&lt;&#x2F;span&gt;&lt;span&gt;guiw 		- make current word lowercase
&lt;&#x2F;span&gt;&lt;span&gt;ddp 		- swap current line with next
&lt;&#x2F;span&gt;&lt;span&gt;ddkp 		- swap current line with previous
&lt;&#x2F;span&gt;&lt;span&gt;:set paste 	- avoid unexpected effects in pasting
&lt;&#x2F;span&gt;&lt;span&gt;ds(    		- [Surround] delete the surrounding parens
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>tex-print for old Emacs</title>
        <published>2017-10-20T00:00:00+00:00</published>
        <updated>2017-10-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2017/2017-10-20-emacs-tex-print/" type="text/html"/>
        <id>https://shnarazk.github.io/2017/2017-10-20-emacs-tex-print/</id>
        
        <content type="html">&lt;p&gt;A customized tex-print for latex family that generate a pdf file directly.It works now!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defun &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;tex-print &lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;optional alt)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Print the .dvi file made by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;[tex-region], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;[tex-buffer] or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;[tex-file].
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;Runs the shell command defined by `tex-dvi-print-command&amp;#39;.  If prefix argument
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;is provided, use the alternative command, `tex-alt-dvi-print-command&amp;#39;.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  (interactive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;P&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pdf (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt; tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.pdf&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt; tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.dvi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	test&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name)
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;equal &lt;&#x2F;span&gt;&lt;span&gt;(current&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;buffer) tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;texed))
&lt;&#x2F;span&gt;&lt;span&gt;	     (buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name)
&lt;&#x2F;span&gt;&lt;span&gt;	     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;;; Check that this buffer&amp;#39;s printed file is up to date.
&lt;&#x2F;span&gt;&lt;span&gt;	     (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;or
&lt;&#x2F;span&gt;&lt;span&gt;	      (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;newer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;than&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p
&lt;&#x2F;span&gt;&lt;span&gt;	       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append &lt;&#x2F;span&gt;&lt;span&gt;(buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.pdf&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	       (buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name))
&lt;&#x2F;span&gt;&lt;span&gt;	      (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;newer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;than&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p
&lt;&#x2F;span&gt;&lt;span&gt;	       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; test&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;append &lt;&#x2F;span&gt;&lt;span&gt;(buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;.dvi&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;	       (buffer&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name))))
&lt;&#x2F;span&gt;&lt;span&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi test&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name))
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;and
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;(file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi))
&lt;&#x2F;span&gt;&lt;span&gt;     (file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pdf)
&lt;&#x2F;span&gt;&lt;span&gt;     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;setq print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pdf))
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span&gt;(file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi))
&lt;&#x2F;span&gt;&lt;span&gt;        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;No appropriate `.pdf&amp;#39; nor `.dvi&amp;#39; file could be found %s &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi)
&lt;&#x2F;span&gt;&lt;span&gt;      (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;shell&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;running)
&lt;&#x2F;span&gt;&lt;span&gt;          (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;kill&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;job)
&lt;&#x2F;span&gt;&lt;span&gt;        (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;shell))
&lt;&#x2F;span&gt;&lt;span&gt;      (tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;command
&lt;&#x2F;span&gt;&lt;span&gt;       (&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; alt tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;alt&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;command tex&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;command)
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;dvi
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Math Sample</title>
        <published>2017-03-05T00:00:00+00:00</published>
        <updated>2017-03-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2017/2017-03-05-math-sample/" type="text/html"/>
        <id>https://shnarazk.github.io/2017/2017-03-05-math-sample/</id>
        
        <content type="html">&lt;p&gt;KaTeX can be used to generate complex math formulas server-side. &lt;&#x2F;p&gt;
&lt;p&gt;$$
\phi = \frac{(1+\sqrt{5})}{2} = 1.6180339887\cdots
$$&lt;&#x2F;p&gt;
&lt;p&gt;Additional details can be found on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Khan&#x2F;KaTeX&quot;&gt;GitHub&lt;&#x2F;a&gt; or on the &lt;a href=&quot;http:&#x2F;&#x2F;tiddlywiki.com&#x2F;plugins&#x2F;tiddlywiki&#x2F;katex&#x2F;&quot;&gt;Wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Example_1&quot;&gt;Example 1&lt;&#x2F;h3&gt;
&lt;p&gt;If the text between $$ contains newlines it will rendered in display mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-tex &quot;&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\int&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\infty&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\infty\hat &lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\xi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;)\,&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\xi &lt;&#x2F;span&gt;&lt;span&gt;x}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;\,&lt;&#x2F;span&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\xi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$$
f(x) = \int_{-\infty}^\infty\hat f(\xi),e^{2 \pi i \xi x},d\xi
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Example_2&quot;&gt;Example 2&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;tex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-tex &quot;&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\Bigl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\sqrt&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\phi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\sqrt&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-\phi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\Bigr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;25 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi&lt;&#x2F;span&gt;&lt;span&gt;}} &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi&lt;&#x2F;span&gt;&lt;span&gt;}} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi&lt;&#x2F;span&gt;&lt;span&gt;}} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi&lt;&#x2F;span&gt;&lt;span&gt;}} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{e&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;\pi&lt;&#x2F;span&gt;&lt;span&gt;}} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\cdots&lt;&#x2F;span&gt;&lt;span&gt;} } } }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;Example_3&quot;&gt;Example 3&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;tex&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-tex &quot;&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{q&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{q&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;)(1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2)&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\cdots &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\prod&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;{j&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\infty&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\frac&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;(1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;)(1&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\quad\quad \txt&lt;&#x2F;span&gt;&lt;span&gt;{for }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\lvert &lt;&#x2F;span&gt;&lt;span&gt;q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;\rvert&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;$$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;$$
1 +  \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \quad\quad \text{for }\lvert q\rvert&amp;lt;1.
$$&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code Sample</title>
        <published>2016-03-08T00:00:00+00:00</published>
        <updated>2018-06-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://shnarazk.github.io/2016/2016-03-08-code-sample/" type="text/html"/>
        <id>https://shnarazk.github.io/2016/2016-03-08-code-sample/</id>
        
        <content type="html">&lt;p&gt;The following are two code samples using syntax highlighting.&lt;&#x2F;p&gt;
&lt;!--more--&gt;
&lt;p&gt;The following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span&gt;num1, num2, sum
&lt;&#x2F;span&gt;&lt;span&gt;    num1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Enter first number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    num2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Enter second number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    sum &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(num1) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;parseInt&lt;&#x2F;span&gt;&lt;span&gt;(num2) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;quot;+&amp;quot; means &amp;quot;add&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;alert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Sum = &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;sum)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;quot;+&amp;quot; means combine into a string
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The following is a code sample using the &amp;quot;highlight&amp;quot; shortcode provided in Hugo. This is server side
highlighting and required Python and Pygments to be installed once. But it doesn&#x27;t now.&lt;&#x2F;p&gt;
&lt;p&gt;{{&amp;lt; highlight javascript &amp;gt;}}
var num1, num2, sum
num1 = prompt(&amp;quot;Enter first number&amp;quot;)
num2 = prompt(&amp;quot;Enter second number&amp;quot;)
sum = parseInt(num1) + parseInt(num2) &#x2F;&#x2F; &amp;quot;+&amp;quot; means &amp;quot;add&amp;quot;
alert(&amp;quot;Sum = &amp;quot; + sum)  &#x2F;&#x2F; &amp;quot;+&amp;quot; means combine into a string
{{&amp;lt;&#x2F; highlight &amp;gt;}}&lt;&#x2F;p&gt;
&lt;p&gt;And here is the same code with line numbers:&lt;&#x2F;p&gt;
&lt;p&gt;{{&amp;lt; highlight javascript &amp;quot;linenos=inline&amp;quot;&amp;gt;}}
var num1, num2, sum
num1 = prompt(&amp;quot;Enter first number&amp;quot;)
num2 = prompt(&amp;quot;Enter second number&amp;quot;)
sum = parseInt(num1) + parseInt(num2) &#x2F;&#x2F; &amp;quot;+&amp;quot; means &amp;quot;add&amp;quot;
alert(&amp;quot;Sum = &amp;quot; + sum)  &#x2F;&#x2F; &amp;quot;+&amp;quot; means combine into a string
{{&amp;lt;&#x2F; highlight &amp;gt;}}&lt;&#x2F;p&gt;
&lt;p&gt;In this site it, &lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&#x2F;content-management&#x2F;syntax-highlighting&#x2F;&quot;&gt;chrome&lt;&#x2F;a&gt; is the default highlight engine, activated by ( ``` ) too.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;section &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;main&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#795da3;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;title&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;{{ .Title }}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;h1&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    {{ range .Data.Pages }}
&lt;&#x2F;span&gt;&lt;span&gt;      {{ .Render &amp;quot;summary&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;    {{ end }}
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#63a35c;&quot;&gt;section&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And, for me, it accepts the following languages: awk, (e)bnf, make, bash (sh, shell), c, C,
css, lisp, coq, diff, docker, elisp, html, haskell, json, java, javascript, mason, nix,
ocaml (ml), prolog, python(3), R, rust, scheme, smalltalk, (la)tex, xml, yaml, markdown,
text (plain). Wow!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
