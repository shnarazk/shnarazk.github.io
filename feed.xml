<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Just a Note</title>
        <link>https://shnarazk.github.io</link>
        <description>a collection of memo</description>
        <lastBuildDate>Sat, 10 Oct 2020 13:29:37 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>nuxtjs/feed</generator>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Sep.]]></title>
            <link>https://shnarazk.github.io/2020/2020-10-10-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-10-10-UNSATlog</guid>
            <pubDate>Sat, 10 Oct 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## 怪我の8〜9月

すっかり遅くなってしまった。あちこち怪我したせいで色々と時間をとられてしまいました。9月はパラメータチューニングだけやって0.5.2をリリースするつもりだったのだけど、実行時間に対して求解可能問題が単調に増えるソルバにしたくてやっている最中にまた脱線してしまいました。ということで特に成果なし。強いて言うなら、

* `StructOpts`への依存を削除。オブジェクトサイズがほぼ半減した！さらに`libc`への依存も実は std::time::{Duration, Instant}　で代替できたのでこれも削除。今やSplrが依存するのは`bitflags`だけ！

* つい昨日気づいたけどリスタート延期の判断を矛盾発生時まで遅延させるのは筋が悪い。タイミングを逸している。作り直すべき。9月に散々試したいろいろなstabilizationの実験結果は全て放棄することに]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Aug.]]></title>
            <link>https://shnarazk.github.io/2020/2020-09-12-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-09-12-UNSATlog</guid>
            <pubDate>Sat, 12 Sep 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## 8月の目玉

[Splr-0.5.0](https:://crates.io/crates/splr/)をリリースしました。表立ってはclause vilification の導入です。一方裏ではリスタートの尺度がオリジナルなものへ変更されました。これは今のところ充分な評価ができてないのでChangelogではundocumentedで済ませたという代物。宿題です。

## Glucose-4.1との比較

前回, Glucoseと比べて全然遅いという話をしましたが、0.5.0はタイムアウトを100秒に設定するとoutperformできるようになりました。結構早い段階でこの成果は出ていたのですが、タイムアウトを500秒に伸ばすと100秒での求解数が10近くも落ちてしまうため、本当にいいのかどうかなんとも言えない。これはSplrがタイムアウト時間を考慮して{pre, in}-proce]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zoomについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-30-zoom</link>
            <guid>https://shnarazk.github.io/2020/2020-08-30-zoom</guid>
            <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[* **NEW** [Zoom Windows clientがブラウザに保存されたCookieをアンインストール時に操作していることが判明](https://gigazine.net/news/20200828-zoom-read-write-cookie/), 2020-08-28
* [NASA, ドイツ外務省が使用制限、バンク・オブ・アメリカ、ダイムラー、エリクソンが使用禁止](https://wedge.ismedia.jp/articles/-/19630), シンガポール政府は使用禁止解除
* [Googleがオンラインビデオ会議アプリ「Zoom」の使用を禁止](https://gigazine.net/news/20200409-google-bans-zoom/), 2020-04-09
* [台湾行政院が政府機関でのZoom使用を禁止](https://jp.techcr]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust製の「SATソルバーで25x25のナンプレが解けるだろうか」]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-19-sudoku25</link>
            <guid>https://shnarazk.github.io/2020/2020-08-19-sudoku25</guid>
            <pubDate>Wed, 19 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。
http://labs.timedia.co.jp/2017/07/sat25x2520.html

```text
+--------------+--------------+--------------+--------------+--------------+
| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|
| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|
| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Implementing clause vivification on Splr]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification</link>
            <guid>https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification</guid>
            <pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[**cover image: https://unsplash.com/photos/-IMlv9Jlb24**

Version 0.4.2 リリース直前のSplr、性能的には妥協できるものが出来たので次の課題は妥当性。
SAT問題はいいのだけど、UNSAT問題に対する certification がおかしなものになっているとか。
vivification を切ると問題が解消するので、vivify時の節の追加削除が正しくcertification に反映されてないようだ。

## 1. gratgenのこういうメッセージがどうやっても解消できない

```text
c Ignoring deletion of non-existent clause (pos 30441)
c Ignoring deletion of non-existent clause (pos 30441)
c I]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RustのClone on Writeについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-15-Cow</link>
            <guid>https://shnarazk.github.io/2020/2020-08-15-Cow</guid>
            <pubDate>Sat, 15 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[自転車本では紹介されてないけれど、Rustならでは必要とされる面白い型、Copy on Writeではなくて、Clone on Writeを意味する[`std::borrow::Cow`](https://doc.rust-lang.org/std/borrow/enum.Cow.html) の紹介です。

## 前提知識：`str` と `String`の違い

* `str` -- （固定長の）UTF-8文字のスライス
* `&str` -- UTF-8文字のスライスへのポインタ
* `String` -- ヒープ上に置かれた、追加を含めた変更ができる文字列


## 前提知識：文字列定数とその参照

#### ローカル変数

まず、以下のように関数内のローカルデータとして確保された文字列定数を参照する変数の型を確認しておきます。

```rust
/// コンパイルできる
fn f(]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JaNG version 1.0.2]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-14-justanote-102</link>
            <guid>https://shnarazk.github.io/2020/2020-08-14-justanote-102</guid>
            <pubDate>Fri, 14 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[このブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', *Just-A-Note Generator* にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。

[Observable](https://observablehq.com/)が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。

* githubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。
* ところがjsonを読み込もうとすると `Cross-Access-Allow-Origin` の制約に引っかかってデータがとって来れない。手動でリロードを掛け]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NixOS on Big Sur]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur</link>
            <guid>https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur</guid>
            <pubDate>Mon, 17 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[### Big Sur以前

/etc/synthetic.conf　に

```
nix
```

を追加してmountしていた。

### Big Sur

なんだかmountしてくれないので `/nix` をシンボリックリンクに変更して対応することにした。
そのため、/etc/synthetic.conf を

```
nix	/Volumes/Nix
```
に編集。さらにどこかで

```
export NIX_IGNORE_SYMLINK_STORE=1
```

を実行して、リンクを辿ってくれるようにすればいいようだ。

それにしても結構Gnomeな見かけだなぁ。。。

### 2020-08-09

/usr/lib/system/libcache.dylib がないのでrustプログラムがコンパイルできなくなっている。

Cコンパイラも動かないのでemacs27も作れない]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Jul.]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-31-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-07-31-UNSATlog</guid>
            <pubDate>Fri, 31 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# UNSATlog

## 今月のキーワード
* Debugging Vivification
* Restricted Stabilization
* Maximum LBD of Dependency Graph
* Duplicated Bin-clause Checking
* Change of Restart Point

## Vivification update
 先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。

## 節の重複検]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What's new in CryptoMiniSat 5.8.0]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580</link>
            <guid>https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580</guid>
            <pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[もう今年のcompetition終わっていた。

https://www.msoos.org/2020/07/cryptominisat-5-8-0-released/

* Guass-Jordan Elimination とは? 変数ペアを作るのだろうか？ XOR制約がわかってないが他のソルバではどうなんだろう
* CaDiCaL風のtarget phase。やはりやる価値があるのか。読み間違えているかなあ。
* Local search solver -- ふーむ、ここはまだ全然手を付けてない

どうも、次に手をつけるべきは、うーむlocal search solverかなあ。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Swiftのfallthroughについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift</link>
            <guid>https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift</guid>
            <pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[*The Swift Programming Language -- Swift 5.3 Edition (beta)* を読んでいて、`fallthrough` に関するちょっと信じられない記述を目にした。

> Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.

playgroundで実行してみた。

```swift
var x = 1

switch x {
    case 1: print(1)
            fallthrough
    case 2: print(2)
    default: break
}
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[まとめて借用]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type</link>
            <guid>https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type</guid>
            <pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[オブジェクトからフィールドを借用したい。
借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。
よくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。

### Box

困った時は一旦スタックに持っていく、そのために `Box` を使う、という定石を使ってみるとこうなる。

```rust
pub trait Export<'a, T> {
    fn exports(&'a self) -> Box<T>;
}

impl<'a> Export<'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)> for Restarter {
    fn exports(&'a self) -> Box<(&'a Ema2, &'a Ema2, &'a Ema2, &']]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What's KISSAT]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-21-what-is-kissat</link>
            <guid>https://shnarazk.github.io/2020/2020-07-21-what-is-kissat</guid>
            <pubDate>Tue, 21 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[SAT Competition 2020の予稿集より。

* 変数のiteratorを使用するようになった
* なんかWatcherのメモリ使用量が減った
* ただしtagつけるので変数のインデックスはCPUアーキテクチャギリギリのビット幅ではなく、28ビットで表現できるところまで減少する。これは約2億7000万変数を意味する。

など。
TBC]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Lives of Clauses]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-18-summer-homework</link>
            <guid>https://shnarazk.github.io/2020/2020-07-18-summer-homework</guid>
            <pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[**cover image: https://unsplash.com/photos/UsSfqYdR64Q**

# イントロとベルリンの壁

論文書くのは仕事じゃない。しかし一年に一度くらいは開発ではなくて、文章をまとめる一ヶ月があってもいいかもね。そもそも今年もCompetitionに出しそびれたし。それに夏といえば、宿題やるのが日本の文化。
9月1日提出に間に合うようになんかしよう。爆音で音楽聴きながらlatex的なことをしよう。

# 2020-07-24

* 旧題: Restart as A Multi-Armed Bandid Problem
* 新題: Lives of Clauses

# 2020-07-27

0.4.2がいい結果を出しそうなので、それをリリースしてから、なぜ0.4.2がいいのかを説明できるようなものにしよう。
"Lives of Clauses"は]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Clause Vivification updated 2020]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-05-vivification2</link>
            <guid>https://shnarazk.github.io/2020/2020-07-05-vivification2</guid>
            <pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[**cover image: https://unsplash.com/photos/tYs9rjaT8Vc**

Vivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。

* Chu-Min Li *et al.*, "Clause vivification by unit propagation in CDCL SAT solvers,”*Artif. Intell.*, vol. 279, 2019.

* [part 2](/2020/2020-08-19-splr-with-vivification/)

### Errata

* **Algorithm 3**のL17はforeachの内側
* **Algorithm 4**のLL.9-10はthen節の中

### Outline

Vivificationは魅力的な節削減手法ので]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Jun.]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-05-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-07-05-UNSATlog</guid>
            <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 6月の総括

先月、性能良くなってきたのでなんとかかんとかと書いたのですが、実はGlucose 4.1よりも全然改善されてないことがわかったので、前言撤回。どうしたものか半分途方にくれた6月でした。
後半は気を取り直して、[vivificationの実装](https://shnarazk.github.io/2020/2020-06-20-vivification/)に取り組みました。

# Vivification

読んだのは2008年の論文。

* C. Piette, Y. Hamadi, and L. Saïs, "Vivifying propositional clausal formulae," *Front. Artif. Intell. Appl.*, vol. 178, pp. 525–529, 2008.

短い論文だったし、アルゴリズムもそれほど難しいものでは]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Duplicate Learnt Clauses]]></title>
            <link>https://shnarazk.github.io/2020/2020-06-22-duplicate-learnt-clause</link>
            <guid>https://shnarazk.github.io/2020/2020-06-22-duplicate-learnt-clause</guid>
            <pubDate>Tue, 23 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Google Scholar alert 発令。今日のお題は「重複した学習節による速度向上」！？

* S. Kochemazov, O. Zaikin, A. Semenov, and V. Kondratiev, "Speeding Up CDCL Inference With Duplicate Learnt Clauses," *24th European Conference on Artificial Intelligence - ECAI2020*, 2020.

duplicateは複数持つのではなく何度でも現れるという意味だ。
そのような節を削除せずに保持することで求解数が向上する（そういう問題セットが存在する）とのこと。
論文ではHash表を使って再出現を検知しようとしているようだ。
LBDによる層化は必ずしも正しいとは限らないと。

変数に比べ節の尺度はそれほど注意が]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vivification of a CNF formula]]></title>
            <link>https://shnarazk.github.io/2020/2020-06-20-vivification</link>
            <guid>https://shnarazk.github.io/2020/2020-06-20-vivification</guid>
            <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Vivification がなんなのか、日本語で探しても出てこないので以下の論文をまとめてみた。
（最新の話かと思っていたけど2008年とは。。。）

* C. Piette, Y. Hamadi, and L. Saïs, "Vivifying propositional clausal formulae,” *Front. Artif. Intell*. Appl., vol. 178, pp. 525–529, 2008.

Splr でいうところの `processor` が節数に対する制約内での網羅的な変数除去と節包摂(clause subsumption)とを実行するのに対し、vivification は（その節に「対応」する割り当てを仮定して）propagateを行った結果を用いて節の包摂方針を決めるというもの。
節長を減らす方向でのみ置換するので、（節数の増加と引き換えに）]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[井上ひさし、四千万歩の男]]></title>
            <link>https://shnarazk.github.io/2020/2020-06-19-40M-steps</link>
            <guid>https://shnarazk.github.io/2020/2020-06-19-40M-steps</guid>
            <pubDate>Fri, 19 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[題材が今ひとつ興味が持てなくて、しかしベストセラーになっていたので、時間ができたら読もうと思っていた
井上ひさしの長編小説「四千万歩の男」。
ようやく読了。

なんと、

* 未完！四百万歩くらいで終わった。単行本が出てから作者が亡くなるまで随分と時間があったはずなのでもう当然完結したストーリーだと思っていたのだが。。。
* 「小説」であった。同時代の有名人が毎回登場して絡んでいく。なんか早坂暁の「天下御免」を思い出した。
* なので伊能忠敬に関するドラマ化というよりも、アイヌ問題とか、農民の困窮生活とか、学閥間の争いとか、御家騒動とか、大名間の闘争とか、ドロドロした話が一話完結的に展開していく。
* 主人公が百姓上がりということから、特にその時代の百姓の生活が色々と描かれている。そういう時代を舞台にしたものは米村圭伍、岡本綺堂、半村良、NHK土曜時代劇くらいしか読んだ（り見たりした）こと]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Clap-3.0.0-beta.1]]></title>
            <link>https://shnarazk.github.io/2020/2020-06-13-clap3</link>
            <guid>https://shnarazk.github.io/2020/2020-06-13-clap3</guid>
            <pubDate>Sat, 13 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[[Clap](https://crates.io/crates/clap)-3.0だと[StructOpt](https://crates.io/crates/structopt)が要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。

### 1. PathBufの取扱いの違い

StructOptでは問題なくオプションになる以下のフィールドは、

```rust
   #[structopt(long = "result", default_value = "", parse(from_os_str))]
   pub result: PathBuf,
```

Clapでは引数が指定されてないエラーを起こしてしまう。
default_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：

```rust
    #[clap(long]]></content:encoded>
        </item>
    </channel>
</rss>