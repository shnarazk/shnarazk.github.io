<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Just a Note</title>
        <link>https://shnarazk.github.io</link>
        <description>a collection of memo</description>
        <lastBuildDate>Sat, 04 Sep 2021 10:24:37 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>nuxtjs/feed</generator>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Sep.]]></title>
            <link>https://shnarazk.github.io/2021/2021-09-03-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-09-03-UNSATlog</guid>
            <pubDate>Fri, 03 Sep 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 順調な8月

0.10のリリースから一ヶ月。この間に0.11もリリースできました。現在0.12の準備中。

# 0.11リリース

正しいことが売りの0.10をリリースするために、ちょっと後回しにしていた、Luby stabilizationのタイミングの調整をしました。
これは結構性能に影響するものでした。
あとはどうでもいいマイクロなチューニングの削除として、vivifierの対象節選択部を簡略化。

大物はないけど、ベンチマークの結果はそこそこ改善。
ベストではないにしろ今年リリースしたバージョンでもたらされた壊滅的な速度低下がかなり解消しました。

# その他

SAT-benchをSAT Competition 2021対応にして、2018年のベンチマーク問題を削除。
2019年の問題も近々削除の予定。
というわけで、長らく愛用してきたT56.2.cnfともいよいよおさらば。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Kissat on macOS]]></title>
            <link>https://shnarazk.github.io/2021/2021-08-31-kissat-on-macos</link>
            <guid>https://shnarazk.github.io/2021/2021-08-31-kissat-on-macos</guid>
            <pubDate>Tue, 31 Aug 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[KissatをNix package化しようとして、OSの違いに阻まれてしまった。
こりゃ手に負えない。

```
$ ./result/bin/kissat ../SAT/kissat/test/cnf/add128.cnf proof                 
c ---- [ banner ] ------------------------------------------------------------
c                                                                             
c KISSAT SAT Solver                                                           
c Copyright (c) 2019-2021 ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Klara and the Sun]]></title>
            <link>https://shnarazk.github.io/2021/2021-08-29-KlaraAndTheSun</link>
            <guid>https://shnarazk.github.io/2021/2021-08-29-KlaraAndTheSun</guid>
            <pubDate>Sun, 29 Aug 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[小学生ではなく、大学受験前のティーンエイジャーが主登場人物ではあるが、
おんぶされたり、
知的レベルが高いにも関わらず太陽を擬人化するクララという登場人物の描写、
それらロボットを受け入れた社会の描きようから、
そして描かれるドラマから、
なんとなくドラえもん的な印象を受けてしまう。

なぜ、そういう設定なのかまで考察しなければ文学作品についてエントリーを作る意味ないのは重々承知。しかし、まあ、そのレベルで脳みそが動いてないので、
それは放棄して、チラシの裏、小学生の感想文以下の短文羅列でお茶を濁すw。

- 擬人化能力はなんなのだろう。これによって演繹された結論がそれほど頑健、「健全かつ完全」、なのだろうか。うーむ。
- さらにそのプランニングに対する影響力の大きいこと。人間が一様に算術的記号処理能力を持っているように、AFの中でも飛び抜けたレベルの超知性には神の存在とその根拠の発見能力]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Aug.]]></title>
            <link>https://shnarazk.github.io/2021/2021-08-01-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-08-01-UNSATlog</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# Finally Bugs Fixed in July
ようやくバグフィックス終わった。7月に[0.10.0リリース](https://github.com/shnarazk/splr/releases/tag/Splr-0.10.0)できました。

# なんだったのか
Splrの開発史上最大最長の難問になった今回の不整合バグがどうやって発生したのか振り返っておきたい。現れたバグは様々だった。

- UNSAT certificateがおかしい — https://github.com/shnarazk/splr/issues/122
- 単位節が伝播を起こさない — https://github.com/shnarazk/splr/issues/119
- 割り当てられても伝播されない — https://github.com/shnarazk/splr/issues/117
- 依存]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[luaLatex-jaでNotoMono-Regularを使いたい]]></title>
            <link>https://shnarazk.github.io/2021/2021-07-25-NotoMono-Regular</link>
            <guid>https://shnarazk.github.io/2021/2021-07-25-NotoMono-Regular</guid>
            <pubDate>Sun, 25 Jul 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[lualatexの個人共通設定ファイルでゴシック系の文章に対して以下の設定をしています。

```latex
\setmainjfont[
    BoldFont={NotoSansCJKjp-Bold},
    YokoFeatures={JFM=prop,Kerning=On},
    AutoFakeSlant=0.2,
    SlantedFeatures={FakeSlant=0.2},
    BoldItalicFeatures={FakeSlant=0.2},
    BoldSlantedFeatures={FakeSlant=0.2}]
  {NotoSansCJKjp-Regular}
```

で、等幅フォントに関してはこちら。


```latex
\setmonofont[
    BoldFont={NotoSansMono-Bold},
    Au]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Peter Watts, Blindsight]]></title>
            <link>https://shnarazk.github.io/2021/2021-07-11-Blindsight</link>
            <guid>https://shnarazk.github.io/2021/2021-07-11-Blindsight</guid>
            <pubDate>Sun, 11 Jul 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Blenderのマニュアルを通して読んだりしたせいで、Apple booksでの連続読書日数が100日を超えたので、記録を切らずに何か読みづけたいものだと思って本を選んでました。

指輪物語も読み終わったところなので、Lord of Ringsの原著が第1候補だったけど、Kindle版は無料で入手済みなので、Apple bookstoreで（日本語版の約6000円に加えて）さらに1600円も出すのはためらってしまった。

では、ということで思いついたのが、そこそこの受賞作でありながら電子書籍化されていないピーターワッツのブラインドサイト。
それなりに面白そうなので、創元がやる気を出すのをずっと待ち続けていたのだけど、どうも無理らしい。
もういっそのこと英語で安く読んでしまえばいいじゃないか。

探せばある、ある、英語版1500円。日本語の文庫上下分冊購入より500円お得。
これにしようかと]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Swiftでcrawling]]></title>
            <link>https://shnarazk.github.io/2021/2021-07-10-crawler-in-swift</link>
            <guid>https://shnarazk.github.io/2021/2021-07-10-crawler-in-swift</guid>
            <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[福岡市の[COVID19オープンデータ](https://ckan.open-governmentdata.org/dataset/401000_pref_fukuoka_covid19_patients)は更新されるたびにURLが更新される（そして古いURLは削除される）という意味不明な[運用](https://ckan.open-governmentdata.org/dataset/activity/401000_pref_fukuoka_covid19_patients)なので、毎日swiftプログラムを書き換えるという馬鹿なことをしていたのだけど、半年たってようやくcrawlingしようという気になりました。

[やり方を紹介しているサイト](https://www.fivestars.blog/articles/build-web-crawler-swift/)のコードはそれなり]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Jul.]]></title>
            <link>https://shnarazk.github.io/2021/2021-07-04-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-07-04-UNSATlog</guid>
            <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 亀の2021年6月

相変わらず0.10のリリースができない一ヶ月でした。
ということで今月も短信です。

# 問題点

色々と直してはいるのだけど、最後のピースまでは行きつかない。
transitionにおける論理バグを見つけたり、除去された変数を戻す部分を完全にRust的なコードに書き換えたり、少しづつは進展している。
監視リテラルを正しくセットしているにも関わらず単位節が無視されるという不可解なバグはchrono-BTによるものではないかと思う。
これも最後まで追い詰めきれてないのだが、今のところこの方向でちょっとづつ進めていくのが正解のようだ。

これは監視リテラルが待つ対リテラルキャッシュが現在の決定レベルよりも高いレベルで充足していた時には監視リテラルの更新は行われないのだが、より高いレベルで充足リテラルが否定された場合、このリテラルをこの節は監視していないのでBCPの対象]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Scratchでの変数のスコープ]]></title>
            <link>https://shnarazk.github.io/2021/2021-06-22-scope-of-vars-in-Scratch</link>
            <guid>https://shnarazk.github.io/2021/2021-06-22-scope-of-vars-in-Scratch</guid>
            <pubDate>Tue, 22 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。
これだとあまり変数の必要性を感じない。
ただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。

で、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。

![](/img/2021/06-22-scratch/define-var.png)

ここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。

## 結論

- `すべてのスプライト用` -- 全てのスプライト、全てのクローンで共有。完全にglobal。
- `このスプライトのみ` -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread l]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ChoroBT再実装]]></title>
            <link>https://shnarazk.github.io/2021/2021-06-22-chronoBT</link>
            <guid>https://shnarazk.github.io/2021/2021-06-22-chronoBT</guid>
            <pubDate>Tue, 22 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[どうもChronoBTの実装が間違っていたらしい。
散々バグを取ってきたはずのコードなんだけど今見直してみると、これでいいのか自信が持てない。
一旦機能削除するつもりで論文[1]に忠実に再実装することにした。

![The idea](/img/2021/06-22/Fig1.png)


![The modified CDCL](/img/2021/06-22/CDCL.png)


[1] A. Nadel and V. Ryvchin, “Chronological Backtracking,” in Theory and Applications of Satisfiability Testing - SAT 2018, no. June 2018, 2018, pp. 111–121.]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Scratchでスプライト間コピペ]]></title>
            <link>https://shnarazk.github.io/2021/2021-06-15-copy-and-paste-in-scratch</link>
            <guid>https://shnarazk.github.io/2021/2021-06-15-copy-and-paste-in-scratch</guid>
            <pubDate>Tue, 15 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Scratchのコンテキストメニューに「複製」というのがあるのだけど、どうしても別スプライトに持っていけない。
なんか反応してそうな画面フィードバックはあるのだけど、あれは持っていけないよのグレイアウトだったようだ。

裏技ないかしらんと探していたら、なんとOSのコピペのショートカットが生きていた。
MacOSなら`コマンド-C`で最後にクリックしたブロックがコピーされ、
スプライト切り替えて`コマンド-V`でペーストできる。

これで、透視図法を使った3Dゲームを作るために、スプライトごとに3次元->2次元座標変換式を打ち込まなければならないという悲劇を避けることができた！]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JIS配列のMacbookのかなキーで日本語入力モードをトグルしたい]]></title>
            <link>https://shnarazk.github.io/2021/2021-06-11-mac-keylayout</link>
            <guid>https://shnarazk.github.io/2021/2021-06-11-mac-keylayout</guid>
            <pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## hidutilでなんとかしよう

US配列だと基本は(macbookでは)、こういうので日本語入力モードを切り替えることができる。

```
hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x7000000e7,"HIDKeyboardModifierMappingDst":0x700000068}]}'
```

あるいは、最近だとmagic keyboardが対象だと下のようになる（以前は上ので問題なかったのだけど、OSのバージョンが上がって何か変わってしまったようだ）。

```
hidutil property --set '{"UserKeyMapping":[{"HIDKeyboardModifierMappingSrc":0x7000000e7,"HIDKeyboa]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Jun.]]></title>
            <link>https://shnarazk.github.io/2021/2021-06-05-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-06-05-UNSATlog</guid>
            <pubDate>Sat, 05 Jun 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 進歩と停滞の5月

5月はとうとう充足性判定問題のバグが（おそらく）取れたという大きな進展がありました。
一方このバージョンは0.7より圧倒的に遅くなってしまいました。
どうしよう。
色々見比べているのだけども、論理的無謬性が保証された状態変化のみを起こすためのコード書き換えのせいとしか思えないのだけど、では、だからと言って、revertする気にはなれないし。

また途方に暮れて開発ペースがグッと落ちてしまいました。
バグあり0.7の置き換えは早いところリリースしなければ行けないのだけどなあ。

開発サボって何やっていたかというとBlender。
授業で使っているので泥縄でも勉強しなければならない。
やっているうちに面白くなってきた。
モデリングやレンダリングはMayaとの類推で大体マニュアル見なくてもわかるけど、データの再利用とかビデオトラッキングとか新しいことも多くて、最近はCPU]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, May]]></title>
            <link>https://shnarazk.github.io/2021/2021-05-01-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-05-01-UNSATlog</guid>
            <pubDate>Sat, 01 May 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## vivificationの4月
Clause vivificationのバグが取れない4月でした。
これに尽きる。
一体何が起きているのやら。

UNSAT certificateの問題だけではなく、時々充足性判定すら間違うという状況が一ヶ月続いていて、一向に改善すら見られぬ状況。
しかし、これの解決なくして先に進むこともままならないわけで。
というわけでこれ以上今月は言うことなし。
強いて言うなら自分のメモも兼ねて、片っ端からbugをissue化していったくらい。まあこれはいいgithubの使い方なんだろう。まさに日記代わり。

- https://github.com/shnarazk/splr/issues/96
- https://github.com/shnarazk/splr/issues/104
- https://github.com/shnarazk/splr/is]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[New Implementation of clause vivifier on Splr-0.8]]></title>
            <link>https://shnarazk.github.io/2021/2021-04-10-splr-vivification</link>
            <guid>https://shnarazk.github.io/2021/2021-04-10-splr-vivification</guid>
            <pubDate>Tue, 04 May 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[### 2021-04-10

Splr-0.7.1で発見された決定性誤りバグの一因がどうもvivificationにあるようなので、徹底的に見直してみた。
その結果、バグ修正の副産物として大変更に至りました。

これまではひたすら論文[1]のオリジナル疑似コードに忠実な実装を心がけていた:

![](/img/2020/07-05/vivi-algo3.jpg)

ここで`confilctAnalysis`の引数は

1. $\phi$ -- 論理式式
1. $D$ -- 仮定されたリテラル列（なぜtrailではいけないのだろう）
1. $R$ - 矛盾節

見ての通り、節を追加して伝播させて、節を削除して、ということを繰り返している。
そのためsandboxなんてものをサブモジュールに追加したりしていたのだけど、この"clause vivification"とは

- 節に含まれるリテ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Apr.]]></title>
            <link>https://shnarazk.github.io/2021/2021-04-10-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-04-10-UNSATlog</guid>
            <pubDate>Sat, 10 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 充足性判定誤りの3月

Splr-0.7シリーズのポイントリリース0.7.1をサクサク公開して、いよいよ並列化という大物に取り掛かるつもりだったのが、ベンチマークの結果の検証で論理バグが検出されて、思いも掛けない終わりのないデバッグに突入してしまいました。
なんと0.7.1でエンバグしたのではなく、0.7.0が既におかしい。
いやもしかするとそれ以前からあったのかもしれない。
SATソルバーを名乗れないものをリリースしてしまっていた！

その上このことに気づいてから1週間経ってもバグが取れない！
時間がかかってしまう理由が簡単な問題では再現しないバグであること。
ベンチマークを走らせて検証スクリプトを走らせるとただ1問だけ不適切な充足解を生成している。
その問題は0.7.1RCで初めて解けるようになって、それ以前のソルバーではタイムアウトしてしまう問題。
なので色々なフィーチャーを切っ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Mar.]]></title>
            <link>https://shnarazk.github.io/2021/2021-03-28-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-03-28-UNSATlog</guid>
            <pubDate>Mon, 05 Apr 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# UNSATlog

## Splr-0.7.1リリースのはずが

前号を出したのが12日でそれから2週間足らずなので、Splr-0.7.1をリリースしたことしか書くことないよなあと思っていたら、リリース前のルーチンワークのベンチマークの検証中にエラーが発見されてしまった。

まさか、UNSAT問題をSATと答えるなんて！
それも、原因モジュールの同定に数時間かかることになってしまって、半日経っても何が問題なのかすら判明できていない有様。
ちょっとこのバグはキツい。リリースは（楽観的にみて）1週間ほど延期になりそうだ。

という以上の内容だけでvol.3を出して、Splr-0.7.1のリリースのタイミングで次の号を出し、そこで UNSAT logの号数を実暦に合わせよう。ああ、それだけが楽しみ。

## 2021-04-02

やっと、やっと、原因の節が特定できそう。`watch`が適切]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[衝撃の320変数3-SAT]]></title>
            <link>https://shnarazk.github.io/2021/2021-03-16-3SAT-SC20-170058143</link>
            <guid>https://shnarazk.github.io/2021/2021-03-16-3SAT-SC20-170058143</guid>
            <pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[まともなSAT solverなら250変数の3-SATなんて1秒程度で解け、その求解速度なんてなんの尺度にもならないものだろう。
なので最近のSplrの開発は360変数の3-SATをマイクロベンチマークに使っている。
最近はまあ「そこそこ待ち遠しくない時間」でSAT問題、UNSAT問題どちらも解けるようになってきていた。
で、やっとSAT competition 2021での問題をつまみ食いし始めたのだけど、ある問題に衝撃を受けてしまった。

それはSATな320変数3-SAT問題170058143.cnf。解けて当然だと思ってたのだが、5000秒タイムアウトで解けない。
色々設定変えて、やっと解けたらこんな感じ：

```
$ splr ~/Library/SAT/SC20/170058143.cnf
170058143.cnf                              ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Nix flakeの作り方]]></title>
            <link>https://shnarazk.github.io/2021/2021-03-14-nix-flakes</link>
            <guid>https://shnarazk.github.io/2021/2021-03-14-nix-flakes</guid>
            <pubDate>Tue, 16 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[2021-03-08にnix-2.4のpre-release版が三ヶ月ぶりに更新されて、ようやくnixを置き換えてもエラーなく使えるようになりました。（いやそうでもないみたいだぞ。。。@2021-03-16）
なので早速Splrで使ってみたのでいくつかメモ。

## restricted modeとは

`nix-env -u`でエラーはなくなったものの、flake.nixを作ろうとすると相変わらずrestricted modeではxxxxにアクセスできないというようなエラーが出る。これは`--impure`フラグを渡してやるといい。`nix --help`によると、

> When the --expr option is given, all installables are interpreted as Nix expressions.
> You may need to speci]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2021, Feb.]]></title>
            <link>https://shnarazk.github.io/2021/2021-03-09-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-03-09-UNSATlog</guid>
            <pubDate>Fri, 12 Mar 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# UNSAT log

## 2月の振り返り

2月はSplr-0.6シリーズのポイントリリースを2つ。
まあ大したものではないのだけど、内部的にはイオンという考え方について色々試してみた。
そして3月になってからリリースされた0.7.0で結局削除ということになりました。
これも含め0.7.0はうまくいかないアイデアを結構整理して削除するようなリリースとなりました。

## イオン

非常に単純化してSAT求解過程のモデルを作るなら、無矛盾なリテラル集合を大きくしていく過程をイメージするのがいいだろう。
この集合には変数活性度が高いものから組み込まれていく。
なので、ここに含まれていない変数は大きな活性度は持っていないはずである。
逆にこの条件を満足しない変数はそれ自身がある種のブロッカーすなわち「求解の妨げとなる変数」になっていると思われるので、（導入したステージベースのvar boo]]></content:encoded>
        </item>
    </channel>
</rss>