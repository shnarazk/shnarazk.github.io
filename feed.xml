<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Just a Note</title>
        <link>https://shnarazk.github.io</link>
        <description>a collection of memo</description>
        <lastBuildDate>Tue, 26 Jan 2021 06:18:35 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>nuxtjs/feed</generator>
        <item>
            <title><![CDATA[Rust製のSATソルバーで144x144のSudokuを解こう]]></title>
            <link>https://shnarazk.github.io/2021/2021-01-17-sudoku144</link>
            <guid>https://shnarazk.github.io/2021/2021-01-17-sudoku144</guid>
            <pubDate>Sun, 17 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[着々と巨大なSudokuが解けるようになったのでどんどん行きましょう。
largeとかgiantとかを追加キーワードにして検索してとてもよさそうな[サイト](https://sudokugeant.cabanova.com/noflash.html)を見つけたけど、そのサイトはflashで書いてあって一切見れない。
なんという時代（技術）の断絶！

ただ[チャットページ](http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html)が生きていたのでなんとか144x144とか400x400の問題を見つけることができました。

ということで[144x144 sudoku](http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Dec.]]></title>
            <link>https://shnarazk.github.io/2021/2021-01-02-UNSATlog</link>
            <guid>https://shnarazk.github.io/2021/2021-01-02-UNSATlog</guid>
            <pubDate>Sat, 02 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# UNSATlog

## 2020年振り返り

結局0.5.1はリリースできませんでした。12月にやったことは

- リフェーズ(re-phasing to best phase)に関するチューニング
- Sudoku 64への応用
- Advent of Code 2020への応用

というあたり。
個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。
やはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。

## Best Phase Rewarding

Rephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust製のSATソルバーで64x64のSudokuが解けるだろうか]]></title>
            <link>https://shnarazk.github.io/2020/2020-12-18-sudoku64</link>
            <guid>https://shnarazk.github.io/2020/2020-12-18-sudoku64</guid>
            <pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Splr-0.6.0のリリース直前のベンチマークをしながら、息抜きでもっと大きなSudokuを探してみました。

http://www.sudoku-download.net/sudoku_64x64.php

さあこの問題を[Splrで解いてみよう](https://github.com/shnarazk/sudoku_sat/blob/master/src/bin/sudoku64.rs)。

元データがpdfしかないので人手で取り込み、変換、間違いの修正に3時間掛かって、ようやくSplrの出番。20秒で正解でした。

大きさの割に空欄が少ないのでN=25と比べてそんなに計算量は増えないだろうと思ったのが2桁近く増えてしまった。なかなか勘はあたらないものだなあ。
ちなみに生成されるCNFの大きさはこんな感じ。

* 変数数: 262144 = (2^6)^3 = 1M * 2^(-2)]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Nov.]]></title>
            <link>https://shnarazk.github.io/2020/2020-12-04-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-12-04-UNSATlog</guid>
            <pubDate>Fri, 04 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 冬眠への道

今年もいよいよあと一ヶ月となってきました。夏からずっと取り組んでいるSplrのバージョン0.5.1はおそらく0.6.0としてリリースすることになると思うけどもう少し時間かかりそう。Splrの新版がリリースできたら今年の残りは勉強と研究に当てようと思う。絶対、論文読んだ方がいいよなあ。読みかけの専門書も溜まっているし。おっと、その前に夏休みの宿題を終わらせねば。節の有効性と取得環境の関係についてというテーマでいいはずだけど。積み残しが山のようだ。これではとても一ヶ月で終わりそうにないな。

# Sudoku25

今月はSudoku25に振り回された一ヶ月でした。実はSAT符合化に問題があったのでCNFファイルを作り直したら一瞬で解けるようになったものの、それ以前は1日CPUをぶん回しても解けなかったので色々とソルバーに手を入れてました。

```text
$ cargo ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JSONファイルをドラッグ&ドロップする]]></title>
            <link>https://shnarazk.github.io/2020/2020-11-08-Drop-a-JSON-file</link>
            <guid>https://shnarazk.github.io/2020/2020-11-08-Drop-a-JSON-file</guid>
            <pubDate>Sun, 08 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[画像ファイルとかURLとかをドロップする話はそこそこ見つかるけど、JSONファイルをドロップするのに手こずったのでメモ。

```swift
  NavigationView { ... }
  .onDrop(of: ["public.json"], isTargeted: nil) { providers, location in
       if let item = providers.first {
           item.loadItem(forTypeIdentifier: "public.json", options: nil) { (urlData, error) in
               if let url = urlData as? URL {
                   self.json = loadJson(url: url)
 ]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[LubyStabilization]]></title>
            <link>https://shnarazk.github.io/2020/2020-11-07-LubyStabilization</link>
            <guid>https://shnarazk.github.io/2020/2020-11-07-LubyStabilization</guid>
            <pubDate>Wed, 18 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[Luby seriesでstabilizationする。まだ結果が出てないだけども、これはいいかも！

### 2020-11-18

Luby Stabilization だかLuby Un-stabilization だか。

### 2020-11-20

今やろうとしていることはrandom walkの導入に類することかも知れぬ。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[SATソルバのベンチマークについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-11-03-minimize-the-worst</link>
            <guid>https://shnarazk.github.io/2020/2020-11-03-minimize-the-worst</guid>
            <pubDate>Tue, 03 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[SATソルバの性能を議論する唯一の指標はSAT competition で使われている400問のベンチマークの求解数だけだろう。
しかしその評価は膨大な計算機リソースを必要とし、正直なところ個人ベースでは現実的でない。なので、これまでは外挿可能だろうという楽観的な見通しの下、極めて短いタイムアウトを設定して実験を繰り返してきた。さらにその前段のスクリーニングとして `SAT-bench` による3-SAT問題中心のマイクロベンチマークを実行して、合計実行時間の短縮と短いタイムアウト時間内での求解数の向上とを改善指針にしてきた。

しかしこれは過学習の危険性が避けられない。これまではこの問題は敢えて無視してきたけど、泥沼のようなパラメータチューニングはそれでも避けられないため、[ちょっとしたパラメータチューニングのつもりで始めた改良ですら二ヶ月が経ってしまう](/2020/2020-10-3]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Oct.]]></title>
            <link>https://shnarazk.github.io/2020/2020-10-31-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-10-31-UNSATlog</guid>
            <pubDate>Sat, 31 Oct 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# 相変わらず停滞中

リリースしたり夏休みの宿題をしたりするはずだった9月、10月が過ぎ、相変わらず停滞中です。

## 0.5.1のリリース

Monotonusにするついでのリスタートパラメータの設定が泥沼。それでも、少なくとも

* `block_restart`, `force_restart`の復活
* `structopt`, `libc`依存性の削除

という内部的なそれなりの変更はコミット済み。
しかし、あまりに長い膠着状態なので、これ以上色々なアイデアを導入するのは一旦放棄しました。

## [Sudoku25](/2020/2020-08-19-sudoku25/)

いやー全然ダメだわ。数十秒で解けたというのが信じられない。これもベンチマークの対象に入れて、一ヶ月色々なパラメータで試してみたけど約10040変数からの停滞から脱出できない。

## [SAT Comp]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Sep.]]></title>
            <link>https://shnarazk.github.io/2020/2020-10-10-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-10-10-UNSATlog</guid>
            <pubDate>Sat, 10 Oct 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## 怪我の8〜9月

すっかり遅くなってしまった。あちこち怪我したせいで色々と時間をとられてしまいました。9月はパラメータチューニングだけやって0.5.2をリリースするつもりだったのだけど、実行時間に対して求解可能問題が単調に増えるソルバにしたくてやっている最中にまた脱線してしまいました。ということで特に成果なし。強いて言うなら、

* `StructOpts`への依存を削除。オブジェクトサイズがほぼ半減した！さらに`libc`への依存も実は std::time::{Duration, Instant}　で代替できたのでこれも削除。今やSplrが依存するのは`bitflags`だけ！

* つい昨日気づいたけどリスタート延期の判断を矛盾発生時まで遅延させるのは筋が悪い。タイミングを逸している。作り直すべき。9月に散々試したいろいろなstabilizationの実験結果は全て放棄することに]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Aug.]]></title>
            <link>https://shnarazk.github.io/2020/2020-09-12-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-09-12-UNSATlog</guid>
            <pubDate>Sat, 12 Sep 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[## 8月の目玉

[Splr-0.5.0](https:://crates.io/crates/splr/)をリリースしました。表立ってはclause vilification の導入です。一方裏ではリスタートの尺度がオリジナルなものへ変更されました。これは今のところ充分な評価ができてないのでChangelogではundocumentedで済ませたという代物。宿題です。

## Glucose-4.1との比較

前回, Glucoseと比べて全然遅いという話をしましたが、0.5.0はタイムアウトを100秒に設定するとoutperformできるようになりました。結構早い段階でこの成果は出ていたのですが、タイムアウトを500秒に伸ばすと100秒での求解数が10近くも落ちてしまうため、本当にいいのかどうかなんとも言えない。これはSplrがタイムアウト時間を考慮して{pre, in}-proce]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zoomについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-30-zoom</link>
            <guid>https://shnarazk.github.io/2020/2020-08-30-zoom</guid>
            <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[* **NEW** [Zoom Windows clientがブラウザに保存されたCookieをアンインストール時に操作していることが判明](https://gigazine.net/news/20200828-zoom-read-write-cookie/), 2020-08-28
* [NASA, ドイツ外務省が使用制限、バンク・オブ・アメリカ、ダイムラー、エリクソンが使用禁止](https://wedge.ismedia.jp/articles/-/19630), シンガポール政府は使用禁止解除
* [Googleがオンラインビデオ会議アプリ「Zoom」の使用を禁止](https://gigazine.net/news/20200409-google-bans-zoom/), 2020-04-09
* [台湾行政院が政府機関でのZoom使用を禁止](https://jp.techcr]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust製の「SATソルバーで25x25のナンプレが解けるだろうか」]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-19-sudoku25</link>
            <guid>https://shnarazk.github.io/2020/2020-08-19-sudoku25</guid>
            <pubDate>Wed, 25 Nov 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。
http://labs.timedia.co.jp/2017/07/sat25x2520.html

```text
+--------------+--------------+--------------+--------------+--------------+
| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|
| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|
| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Implementing clause vivification on Splr]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification</link>
            <guid>https://shnarazk.github.io/2020/2020-08-19-splr-with-vivification</guid>
            <pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[**cover image: https://unsplash.com/photos/-IMlv9Jlb24**

Version 0.4.2 リリース直前のSplr、性能的には妥協できるものが出来たので次の課題は妥当性。
SAT問題はいいのだけど、UNSAT問題に対する certification がおかしなものになっているとか。
vivification を切ると問題が解消するので、vivify時の節の追加削除が正しくcertification に反映されてないようだ。

## 1. gratgenのこういうメッセージがどうやっても解消できない

```text
c Ignoring deletion of non-existent clause (pos 30441)
c Ignoring deletion of non-existent clause (pos 30441)
c I]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[RustのClone on Writeについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-15-Cow</link>
            <guid>https://shnarazk.github.io/2020/2020-08-15-Cow</guid>
            <pubDate>Sat, 15 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[自転車本では紹介されてないけれど、Rustならでは必要とされる面白い型、Copy on Writeではなくて、Clone on Writeを意味する[`std::borrow::Cow`](https://doc.rust-lang.org/std/borrow/enum.Cow.html) の紹介です。

## 前提知識：`str` と `String`の違い

* `str` -- （固定長の）UTF-8文字のスライス
* `&str` -- UTF-8文字のスライスへのポインタ
* `String` -- ヒープ上に置かれた、追加を含めた変更ができる文字列


## 前提知識：文字列定数とその参照

#### ローカル変数

まず、以下のように関数内のローカルデータとして確保された文字列定数を参照する変数の型を確認しておきます。

```rust
/// コンパイルできる
fn f(]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[JaNG version 1.0.2]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-14-justanote-102</link>
            <guid>https://shnarazk.github.io/2020/2020-08-14-justanote-102</guid>
            <pubDate>Fri, 14 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[このブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', *Just-A-Note Generator* にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。

[Observable](https://observablehq.com/)が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。

* githubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。
* ところがjsonを読み込もうとすると `Cross-Access-Allow-Origin` の制約に引っかかってデータがとって来れない。手動でリロードを掛け]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[NixOS on Big Sur]]></title>
            <link>https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur</link>
            <guid>https://shnarazk.github.io/2020/2020-08-07-NixOS-on-BigSur</guid>
            <pubDate>Mon, 17 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[### Big Sur以前

/etc/synthetic.conf　に

```
nix
```

を追加してmountしていた。

### Big Sur

なんだかmountしてくれないので `/nix` をシンボリックリンクに変更して対応することにした。
そのため、/etc/synthetic.conf を

```
nix	/Volumes/Nix
```
に編集。さらにどこかで

```
export NIX_IGNORE_SYMLINK_STORE=1
```

を実行して、リンクを辿ってくれるようにすればいいようだ。

それにしても結構Gnomeな見かけだなぁ。。。

### 2020-08-09

/usr/lib/system/libcache.dylib がないのでrustプログラムがコンパイルできなくなっている。

Cコンパイラも動かないのでemacs27も作れない]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[UNSAT LOG, 2020, Jul.]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-31-UNSATlog</link>
            <guid>https://shnarazk.github.io/2020/2020-07-31-UNSATlog</guid>
            <pubDate>Fri, 31 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[# UNSATlog

## 今月のキーワード
* Debugging Vivification
* Restricted Stabilization
* Maximum LBD of Dependency Graph
* Duplicated Bin-clause Checking
* Change of Restart Point

## Vivification update
 先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。

## 節の重複検]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What's new in CryptoMiniSat 5.8.0]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580</link>
            <guid>https://shnarazk.github.io/2020/2020-07-28-whats-new-in-cryptmitsat580</guid>
            <pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[もう今年のcompetition終わっていた。

https://www.msoos.org/2020/07/cryptominisat-5-8-0-released/

* Guass-Jordan Elimination とは? 変数ペアを作るのだろうか？ XOR制約がわかってないが他のソルバではどうなんだろう
* CaDiCaL風のtarget phase。やはりやる価値があるのか。読み間違えているかなあ。
* Local search solver -- ふーむ、ここはまだ全然手を付けてない

どうも、次に手をつけるべきは、うーむlocal search solverかなあ。]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Swiftのfallthroughについて]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift</link>
            <guid>https://shnarazk.github.io/2020/2020-07-28-fallthrough-in-swift</guid>
            <pubDate>Tue, 28 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[*The Swift Programming Language -- Swift 5.3 Edition (beta)* を読んでいて、`fallthrough` に関するちょっと信じられない記述を目にした。

> Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.

playgroundで実行してみた。

```swift
var x = 1

switch x {
    case 1: print(1)
            fallthrough
    case 2: print(2)
    default: break
}
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[まとめて借用]]></title>
            <link>https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type</link>
            <guid>https://shnarazk.github.io/2020/2020-07-25-lifetime-of-trait-object-type</guid>
            <pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[オブジェクトからフィールドを借用したい。
借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。
よくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。

### Box

困った時は一旦スタックに持っていく、そのために `Box` を使う、という定石を使ってみるとこうなる。

```rust
pub trait Export<'a, T> {
    fn exports(&'a self) -> Box<T>;
}

impl<'a> Export<'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)> for Restarter {
    fn exports(&'a self) -> Box<(&'a Ema2, &'a Ema2, &'a Ema2, &']]></content:encoded>
        </item>
    </channel>
</rss>