(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{616:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2021, Jul.","subtitle":"Vol.2, No.7.","date":"2021-07-10T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2021/07-04/banner.jpg","banner_caption":"まだまだ一般人が使うには早いようだ","bodyContent":"# 亀の2021年6月\\n\\n相変わらず0.10のリリースができない一ヶ月でした。\\nということで今月も短信です。\\n\\n# 問題点\\n\\n色々と直してはいるのだけど、最後のピースまでは行きつかない。\\ntransitionにおける論理バグを見つけたり、除去された変数を戻す部分を完全にRust的なコードに書き換えたり、少しづつは進展している。\\n監視リテラルを正しくセットしているにも関わらず単位節が無視されるという不可解なバグはchrono-BTによるものではないかと思う。\\nこれも最後まで追い詰めきれてないのだが、今のところこの方向でちょっとづつ進めていくのが正解のようだ。\\n\\nこれは監視リテラルが待つ対リテラルキャッシュが現在の決定レベルよりも高いレベルで充足していた時には監視リテラルの更新は行われないのだが、より高いレベルで充足リテラルが否定された場合、このリテラルをこの節は監視していないのでBCPの対象から漏れてしまうということ。\\n監視リテラルはその対リテラルキャッシュよりも高い決定レベルであることを保証しないとchronoBT導入は処理の妥当性を失うことになる。ようだ。\\n\\n（この文章を書いていて思ったけど、監視リテラルに関しては、\\n  - そのもの、\\n  - 監視リテラルのリスト、\\n  - 監視リテラルに関する構造体、\\n  - その中のMinisatやGlucoseで言うところのblocker、\\nと指し示す必要のあるオブジェクトが多すぎてネーミングに苦労しているのだけど、blockerは対リテラルキャッシュと呼ぶのがよさそうだ。\\n英語だと *Cache of Pairing Literal; CPL* かな。）\\n\\nこれが大学の研究者なら、数ヶ月前のバグ発生の認識から一週間でここまでやってこれないと生きていけないだろうなあ。\\n全く能力不足だわ。\\n\\n# その他\\n\\nSplrに初めてインタラクティブな操作関数が導入されました。\\n正しく動作するプログラムには全く要らない機能だけど、デバッグにこんなに苦労するなら、何が起きているのかを把握するために、節DBやassign stackを選択的に覗けるようにするのはもっと早い段階ですべきだった。\\nおかげで監視リテラルの時間変化がなんとなく見えるようになって、少し理解が進みました。\\nなんだかんだで現在Splrは11000 Line of Code。\\n前のリリース版から半分近くの行が書き換えられている。。。\\n\\n# 7月の予定\\n\\nそりゃもちろんバグ取り。それ以上のことは言わない。\\n\\n## 2021-07-09:追記\\n\\nどうも[バグが取れた](https://github.com/shnarazk/splr/issues/117)ようだ。\\n最後に残っていた問題は`cancel_until`中で`q_head`を間違えて更新していたせいだった。\\nそれで伝播できないリテラルが出現していたわけだ。\\n修正すると[aes.cnf](https://github.com/shnarazk/splr/pull/88#issuecomment-808834522)で3連続で問題なく検証できたし、SAT Competition 2019のベンチマーク、タイムアウト200秒で解けた問題も全て検証できた！\\n終わった！","bodyHtml":"<h1>亀の2021年6月</h1>\\n<p>相変わらず0.10のリリースができない一ヶ月でした。\\nということで今月も短信です。</p>\\n<h1>問題点</h1>\\n<p>色々と直してはいるのだけど、最後のピースまでは行きつかない。\\ntransitionにおける論理バグを見つけたり、除去された変数を戻す部分を完全にRust的なコードに書き換えたり、少しづつは進展している。\\n監視リテラルを正しくセットしているにも関わらず単位節が無視されるという不可解なバグはchrono-BTによるものではないかと思う。\\nこれも最後まで追い詰めきれてないのだが、今のところこの方向でちょっとづつ進めていくのが正解のようだ。</p>\\n<p>これは監視リテラルが待つ対リテラルキャッシュが現在の決定レベルよりも高いレベルで充足していた時には監視リテラルの更新は行われないのだが、より高いレベルで充足リテラルが否定された場合、このリテラルをこの節は監視していないのでBCPの対象から漏れてしまうということ。\\n監視リテラルはその対リテラルキャッシュよりも高い決定レベルであることを保証しないとchronoBT導入は処理の妥当性を失うことになる。ようだ。</p>\\n<p>（この文章を書いていて思ったけど、監視リテラルに関しては、</p>\\n<ul>\\n<li>そのもの、</li>\\n<li>監視リテラルのリスト、</li>\\n<li>監視リテラルに関する構造体、</li>\\n<li>その中のMinisatやGlucoseで言うところのblocker、\\nと指し示す必要のあるオブジェクトが多すぎてネーミングに苦労しているのだけど、blockerは対リテラルキャッシュと呼ぶのがよさそうだ。\\n英語だと <em>Cache of Pairing Literal; CPL</em> かな。）</li>\\n</ul>\\n<p>これが大学の研究者なら、数ヶ月前のバグ発生の認識から一週間でここまでやってこれないと生きていけないだろうなあ。\\n全く能力不足だわ。</p>\\n<h1>その他</h1>\\n<p>Splrに初めてインタラクティブな操作関数が導入されました。\\n正しく動作するプログラムには全く要らない機能だけど、デバッグにこんなに苦労するなら、何が起きているのかを把握するために、節DBやassign stackを選択的に覗けるようにするのはもっと早い段階ですべきだった。\\nおかげで監視リテラルの時間変化がなんとなく見えるようになって、少し理解が進みました。\\nなんだかんだで現在Splrは11000 Line of Code。\\n前のリリース版から半分近くの行が書き換えられている。。。</p>\\n<h1>7月の予定</h1>\\n<p>そりゃもちろんバグ取り。それ以上のことは言わない。</p>\\n<h2>2021-07-09:追記</h2>\\n<p>どうも<a href=\\"https://github.com/shnarazk/splr/issues/117\\">バグが取れた</a>ようだ。\\n最後に残っていた問題は<code>cancel_until</code>中で<code>q_head</code>を間違えて更新していたせいだった。\\nそれで伝播できないリテラルが出現していたわけだ。\\n修正すると<a href=\\"https://github.com/shnarazk/splr/pull/88#issuecomment-808834522\\">aes.cnf</a>で3連続で問題なく検証できたし、SAT Competition 2019のベンチマーク、タイムアウト200秒で解けた問題も全て検証できた！\\n終わった！</p>\\n","dir":"article/.json/2021","base":"2021-07-04-UNSATlog.json","ext":".json","sourceBase":"2021-07-04-UNSATlog.md","sourceExt":".md"}')}}]);