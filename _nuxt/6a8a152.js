(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{620:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2021, Aug.","subtitle":"Vol.2, No.8.","date":"2021-08-01T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2021/08-01/banner.jpg","banner_caption":"created with Blender","bodyContent":"# Finally Bugs Fixed in July\\nようやくバグフィックス終わった。7月に[0.10.0リリース](https://github.com/shnarazk/splr/releases/tag/Splr-0.10.0)できました。\\n\\n# なんだったのか\\nSplrの開発史上最大最長の難問になった今回の不整合バグがどうやって発生したのか振り返っておきたい。現れたバグは様々だった。\\n\\n- UNSAT certificateがおかしい — https://github.com/shnarazk/splr/issues/122\\n- 単位節が伝播を起こさない — https://github.com/shnarazk/splr/issues/119\\n- 割り当てられても伝播されない — https://github.com/shnarazk/splr/issues/117\\n- 依存グラフにより高いレベルのリテラルが出現する — https://github.com/shnarazk/splr/issues/116\\n- 除去リテラルを戻すとおかしい — https://github.com/shnarazk/splr/issues/115\\n- 依存グラフでbinary clauseでの方向が逆 — https://github.com/shnarazk/splr/issues/114\\n\\nとまあ呆れるくらい様々。\\nもうSATソルバーとしてはほぼ壊滅状態だった。\\n\\nで、これらの原因は一つではなかった。\\n0.10.0のリリースまでに潰したのは以下の通り。\\n\\n- chronoBTの最上レベルリテラル数が1の場合はchronoBTかそうでないかに関わらず同じ処理をしなければならなかったのだが、そうなっていなかった。論文の何気ない記述に引っ張られてしまった。\\n- chronoBT混在環境においてcancel_untilの処理が不適切だった。割り当て順序の逆転が起きていて、正しい依存グラフが作れなくなってしまっていた。\\n- 単位伝播は問題ないのだが、Eliminatorやvivifierが生成する節がClauseDBに適切に登録されてなかったため、伝播に失敗する単位節が存在していた。またcertificateに適切に生成された節が追加されてなかった。\\n- 除去変数を戻すモデル拡張器があやしいようなそうでないようなわかりにくいコードだった（sliceやiteratorを使ったもっとRust的（モダン）で意味が取りやすいコードに修正した）。\\n\\nどれを取っても致命的なのだが、よくもまあもっと早い段階で気づけなかったものだろうか。\\nおおよそ1年近くSplrはバグ持ち、それもSATソルバーを名乗れないレベルのバグ持ちだったと言うことがわかり、赤面してしまう。\\n\\n# After 0.10.0\\n\\nというわけで無事にSplr 0.10.0をリリースしてから、正しさを壊さないようにしながら、ちょっとづつパフォーマンスチューニング中です。\\n\\nまずはLuby stabilizationが全然よくないので改善中。\\n気づいていたけども0.10.0にはどうやっても入れる時間的な余裕はなかったので後回しにしていた。\\nその後、どうもモードの変更を節削減と同期を取るのが相当に効くらしいということがわかったので、そちらを採用。\\naes.cnfは0.10.0だと10000秒程度掛かるのが普通なんだけど、この部分を変えてみると2000秒台になっているし、sat-benchの結果もSplrのベストにかなり近くなった。\\n小さな変更なのだがリリースする価値がありそうだ。\\n初めて使ったalgorithm2eで書くとこうなる。\\nReduction, Elimination, Vivification、そしてモードスイッチ、と綺麗な流れじゃないか。\\n\\n![](/img/2021/08-01/LubyStabilization.png)\\n\\nドキュメントを更新して数日中に0.10.1としてリリースの予定です。\\n\\nあとは\\n- Root-level asserted literalsの除去の最適化\\n- 重複節の除去：どうもこれは重要のような気がするので早いところ統計データをとってみるつもり。in-processorを頻繁に起動するSplrでは無闇に重複節を発生させている可能性が捨てきれない。clause reductionの後にclause vivifierを起動するように変更したことである程度は削減できているような気もするがさて？　litsをhash値にマップすればそれほど計算量は高くならないのではないだろうか。\\n\\nという感じでまあぼちぼちと。\\nそれよりは論文読んでproceeding読んで、benchmark suitを今年のものに入れ替えて、とこれだけやれば8月は終わりです。","bodyHtml":"<h1>Finally Bugs Fixed in July</h1>\\n<p>ようやくバグフィックス終わった。7月に<a href=\\"https://github.com/shnarazk/splr/releases/tag/Splr-0.10.0\\">0.10.0リリース</a>できました。</p>\\n<h1>なんだったのか</h1>\\n<p>Splrの開発史上最大最長の難問になった今回の不整合バグがどうやって発生したのか振り返っておきたい。現れたバグは様々だった。</p>\\n<ul>\\n<li>UNSAT certificateがおかしい — https://github.com/shnarazk/splr/issues/122</li>\\n<li>単位節が伝播を起こさない — https://github.com/shnarazk/splr/issues/119</li>\\n<li>割り当てられても伝播されない — https://github.com/shnarazk/splr/issues/117</li>\\n<li>依存グラフにより高いレベルのリテラルが出現する — https://github.com/shnarazk/splr/issues/116</li>\\n<li>除去リテラルを戻すとおかしい — https://github.com/shnarazk/splr/issues/115</li>\\n<li>依存グラフでbinary clauseでの方向が逆 — https://github.com/shnarazk/splr/issues/114</li>\\n</ul>\\n<p>とまあ呆れるくらい様々。\\nもうSATソルバーとしてはほぼ壊滅状態だった。</p>\\n<p>で、これらの原因は一つではなかった。\\n0.10.0のリリースまでに潰したのは以下の通り。</p>\\n<ul>\\n<li>chronoBTの最上レベルリテラル数が1の場合はchronoBTかそうでないかに関わらず同じ処理をしなければならなかったのだが、そうなっていなかった。論文の何気ない記述に引っ張られてしまった。</li>\\n<li>chronoBT混在環境においてcancel_untilの処理が不適切だった。割り当て順序の逆転が起きていて、正しい依存グラフが作れなくなってしまっていた。</li>\\n<li>単位伝播は問題ないのだが、Eliminatorやvivifierが生成する節がClauseDBに適切に登録されてなかったため、伝播に失敗する単位節が存在していた。またcertificateに適切に生成された節が追加されてなかった。</li>\\n<li>除去変数を戻すモデル拡張器があやしいようなそうでないようなわかりにくいコードだった（sliceやiteratorを使ったもっとRust的（モダン）で意味が取りやすいコードに修正した）。</li>\\n</ul>\\n<p>どれを取っても致命的なのだが、よくもまあもっと早い段階で気づけなかったものだろうか。\\nおおよそ1年近くSplrはバグ持ち、それもSATソルバーを名乗れないレベルのバグ持ちだったと言うことがわかり、赤面してしまう。</p>\\n<h1>After 0.10.0</h1>\\n<p>というわけで無事にSplr 0.10.0をリリースしてから、正しさを壊さないようにしながら、ちょっとづつパフォーマンスチューニング中です。</p>\\n<p>まずはLuby stabilizationが全然よくないので改善中。\\n気づいていたけども0.10.0にはどうやっても入れる時間的な余裕はなかったので後回しにしていた。\\nその後、どうもモードの変更を節削減と同期を取るのが相当に効くらしいということがわかったので、そちらを採用。\\naes.cnfは0.10.0だと10000秒程度掛かるのが普通なんだけど、この部分を変えてみると2000秒台になっているし、sat-benchの結果もSplrのベストにかなり近くなった。\\n小さな変更なのだがリリースする価値がありそうだ。\\n初めて使ったalgorithm2eで書くとこうなる。\\nReduction, Elimination, Vivification、そしてモードスイッチ、と綺麗な流れじゃないか。</p>\\n<p><img src=\\"/img/2021/08-01/LubyStabilization.png\\" alt=\\"\\"></p>\\n<p>ドキュメントを更新して数日中に0.10.1としてリリースの予定です。</p>\\n<p>あとは</p>\\n<ul>\\n<li>Root-level asserted literalsの除去の最適化</li>\\n<li>重複節の除去：どうもこれは重要のような気がするので早いところ統計データをとってみるつもり。in-processorを頻繁に起動するSplrでは無闇に重複節を発生させている可能性が捨てきれない。clause reductionの後にclause vivifierを起動するように変更したことである程度は削減できているような気もするがさて？　litsをhash値にマップすればそれほど計算量は高くならないのではないだろうか。</li>\\n</ul>\\n<p>という感じでまあぼちぼちと。\\nそれよりは論文読んでproceeding読んで、benchmark suitを今年のものに入れ替えて、とこれだけやれば8月は終わりです。</p>\\n","dir":"article/.json/2021","base":"2021-08-01-UNSATlog.json","ext":".json","sourceBase":"2021-08-01-UNSATlog.md","sourceExt":".md"}')}}]);