(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{550:function(n){n.exports=JSON.parse('{"title":"What\'s Miracle Sudoku?","subtitle":"for a SAT solver developer","date":"2020-05-29T00:00:00.000Z","tags":["SAT","splr","sudoku"],"banner":"https://images.unsplash.com/photo-1511689774932-3aca18459e68?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1234&q=80","bodyContent":"25日のHacker Newsで初めて知ったMiracle Sudoku。ビデオの横に書いてあることから判断するに\\n\\n* Normal Sudoku rules apply.\\n* ナイトまたはキングが1hopで行ける場所には同じ数は置けない: Any two cells separated by a knight\'s move or a king\'s move (in chess) cannot contain the same digit.\\n* 近接した4近傍には連続する数列は置けない: Any two orthogonally adjacent cells cannot contain consecutive digits.\\n\\n[The Guardian 2020-05-22](https://www.theguardian.com/lifeandstyle/video/2020/may/22/cracking-the-cryptic-sudoku-solvers-become-unlikely-youtube-sensation-video)\\n\\nさあSATソルバの出番。\\n\\n# 2020-05-29 mokumoku\\n\\n場所とセルの状態をそれぞれ構造体`Pos`, `Cell`で表現すると\\n\\n* `fn state(Pos, digit: usize, bool) -> Cell`　で状態を生成\\n* `fn requires(Cell, Cell) -> [i32; 2]` で制約節を生成\\n* `fn valid(Pos) -> Option<Pos>` で妥当なセル座標に限定\\n\\nといった補助関数を用意すれば後は簡単。\\n座標やリテラルは1で始まる一方で、`Vec` は0で始まるといったあたりでいつものようにバグを発生させてしまった\\nけど、最終的に\\n\\n```\\n4 8 3 7 2 6 1 5 9 \\n7 2 6 1 5 9 4 8 3 \\n1 5 9 4 8 3 7 2 6 \\n8 3 7 2 6 1 5 9 4 \\n2 6 1 5 9 4 8 3 7 \\n5 9 4 8 3 7 2 6 1 \\n3 7 2 6 1 5 9 4 8 \\n6 1 5 9 4 8 3 7 2 \\n9 4 8 3 7 2 6 1 5 \\n```\\n\\nとなって、ビデオの解が唯一解であることが判明しました。\\n\\nできたプログラムは[こちら](https://github.com/shnarazk/miracle_sudoku)。","bodyHtml":"<p>25日のHacker Newsで初めて知ったMiracle Sudoku。ビデオの横に書いてあることから判断するに</p>\\n<ul>\\n<li>Normal Sudoku rules apply.</li>\\n<li>ナイトまたはキングが1hopで行ける場所には同じ数は置けない: Any two cells separated by a knight\'s move or a king\'s move (in chess) cannot contain the same digit.</li>\\n<li>近接した4近傍には連続する数列は置けない: Any two orthogonally adjacent cells cannot contain consecutive digits.</li>\\n</ul>\\n<p><a href=\\"https://www.theguardian.com/lifeandstyle/video/2020/may/22/cracking-the-cryptic-sudoku-solvers-become-unlikely-youtube-sensation-video\\">The Guardian 2020-05-22</a></p>\\n<p>さあSATソルバの出番。</p>\\n<h1>2020-05-29 mokumoku</h1>\\n<p>場所とセルの状態をそれぞれ構造体<code>Pos</code>, <code>Cell</code>で表現すると</p>\\n<ul>\\n<li><code>fn state(Pos, digit: usize, bool) -&gt; Cell</code>　で状態を生成</li>\\n<li><code>fn requires(Cell, Cell) -&gt; [i32; 2]</code> で制約節を生成</li>\\n<li><code>fn valid(Pos) -&gt; Option&lt;Pos&gt;</code> で妥当なセル座標に限定</li>\\n</ul>\\n<p>といった補助関数を用意すれば後は簡単。\\n座標やリテラルは1で始まる一方で、<code>Vec</code> は0で始まるといったあたりでいつものようにバグを発生させてしまった\\nけど、最終的に</p>\\n<pre><code>4 8 3 7 2 6 1 5 9 \\n7 2 6 1 5 9 4 8 3 \\n1 5 9 4 8 3 7 2 6 \\n8 3 7 2 6 1 5 9 4 \\n2 6 1 5 9 4 8 3 7 \\n5 9 4 8 3 7 2 6 1 \\n3 7 2 6 1 5 9 4 8 \\n6 1 5 9 4 8 3 7 2 \\n9 4 8 3 7 2 6 1 5 \\n</code></pre>\\n<p>となって、ビデオの解が唯一解であることが判明しました。</p>\\n<p>できたプログラムは<a href=\\"https://github.com/shnarazk/miracle_sudoku\\">こちら</a>。</p>\\n","dir":"article/.json/2020","base":"2020-05-26-MiracleSudoku.json","ext":".json","sourceBase":"2020-05-26-MiracleSudoku.md","sourceExt":".md"}')}}]);