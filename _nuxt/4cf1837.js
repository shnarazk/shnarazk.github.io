(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{541:function(n){n.exports=JSON.parse('{"title":"Connect mongoDB Atlas from Rust","subtitle":"\\"mongodb+srv://\\"がない","date":"2019-05-31T00:00:00.000Z","tags":["Rust","mongoDB","cloud"],"bodyContent":"クラウドの勉強をしようと思って無料データベース[mongoDB Atlas](https://cloud.mongodb.com/)にアカウントを作ってみた。\\n\\nmongoDBを選んだのは、以下の理由から。\\n\\n- [nlp100](http://www.cl.ecei.tohoku.ac.jp/nlp100/)の課題で、\\n自前のmongoDBをrustから利用するプログラムを作ってた\\n- [Zeit@now](https://zeit.co/)からも[統合](https://zeit.co/blog/zeit-now-integrations-platform)できる\\n\\nセットアップはサクサクできて、あとはプログラムにconnectするだけ。\\nもちろん、ちゃんと参考例が表示される。\\n\\n![](/img/2019/05-31/mongodb-1.png)\\n\\n例えば**Connect Your Application**から辿ったjs用のサンプルはこうなっている。\\n\\n```js\\nconst MongoClient = require(‘mongodb’).MongoClient;\\nconst uri = \\"mongodb+srv://<ADMIN>:<PASSWORD>@<MYCLUSTER>.mongodb.net/test?...\\";\\nconst client = new MongoClient(uri, { useNewUrlParser: true });\\nclient.connect(err => {\\n  const collection = client.db(\\"test\\").collection(\\"devices\\");\\n  // perform actions on the collection object\\n  client.close();\\n});\\n```\\n\\nこれを真似すれば、非公式クライアントライブラリ[mongodb 0.3.12](https://crates.io/crates/mongodb)を使ったRustのプログラムでも\\n簡単に移植できるだろうと思ったら、予想が外れてしまった。\\n\\n```\\nthread \'main\' panicked at \'failed to auth: OperationError(\\"No servers available for the provide\\nd ReadPreference.\\")\', src/libcore/result.rs:997:5                                              \\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.  \\n```\\n\\nネットで調べると参考になりそうなのはこのあたり。\\n\\n- https://www.reddit.com/r/rust/comments/9x0bs9/connect_to_mongodb_atlas_from_rust/\\n- https://github.com/mongodb-labs/mongo-rust-driver-prototype/issues/291\\n- https://github.com/mongodb-labs/mongo-rust-driver-prototype/issues/313\\n\\nそこで、\\n\\n- クライアントライブラリは変えたくないなあ。なんとかmongodbで繋ぎたい。\\n- しかし、`mongodb+srv://`はまだ実装されてない。\\n- とにかく、sshのサポートは必要なのでmongodbのコンパイルに`features=\\"ssl\\"` が必要\\n- そして、認証には`db::auth`メソッドを呼び出すことが必要。\\n- さらに、認証時につなぐべきbdは `\\"auth\\"` である。ただwebでの管理画面を見ていると正解はどうも `\\"admin\\"` らしい。。。\\n\\nとなって、こういうコードになった：\\n\\n```rust\\n   let opts = mongodb::ClientOptions::with_unauthenticated_ssl(None, false);\\n   let uri = <上のURI>;\\n   let mut m = mongodb::Client::with_uri_and_options(uri, opts).expect(\\"connect\\");\\n   client.db(\\"admin\\").auth(\\"<ADMIN>\\", \\"<PASSWORD>\\").expect(\\"auth\\");\\n   let coll = client.db(\\"<DB>\\").collection(\\"<COLLECTION>\\");\\n    ...\\n```\\nしかし、これらを反映してもどうやっても最初のエラーが取れない。\\n\\nいい加減、諦めかけていたのだけど、**Connect with the Mongo Shell**の中のサンプルを見ていて\\n指定すべきURIがMongo Shellのバージョンによって全然違うことに気づいた。\\n具体的には最新版(3.6 or later)だと、\\n\\n```\\nmongo \\"mongodb+srv://<CLUSTER>.mongodb.net/test\\" --username <username>\\n```\\n\\nなのが、3.3 or earlierだとこうなる。\\n\\n```\\nmongo \\"mongodb://<CLUSTER>-<SHARD0>.mongodb.net:xxx,<CLUSTER>-<SHARD1>.mongodb.net:xxx,<CLUSTER>-<SHARD2>.mongodb.net:xxx/test?...\\n```\\n\\n問題の `srv` がないじゃん！\\n\\nなので上のrustプログラムの2行目の`uri`の定義をこれと入れ替えたら、さっくり通ってしまった。\\n\\nめでたし、めでたし。","bodyHtml":"<p>クラウドの勉強をしようと思って無料データベース<a href=\\"https://cloud.mongodb.com/\\">mongoDB Atlas</a>にアカウントを作ってみた。</p>\\n<p>mongoDBを選んだのは、以下の理由から。</p>\\n<ul>\\n<li><a href=\\"http://www.cl.ecei.tohoku.ac.jp/nlp100/\\">nlp100</a>の課題で、\\n自前のmongoDBをrustから利用するプログラムを作ってた</li>\\n<li><a href=\\"https://zeit.co/\\">Zeit@now</a>からも<a href=\\"https://zeit.co/blog/zeit-now-integrations-platform\\">統合</a>できる</li>\\n</ul>\\n<p>セットアップはサクサクできて、あとはプログラムにconnectするだけ。\\nもちろん、ちゃんと参考例が表示される。</p>\\n<p><img src=\\"/img/2019/05-31/mongodb-1.png\\" alt=\\"\\"></p>\\n<p>例えば<strong>Connect Your Application</strong>から辿ったjs用のサンプルはこうなっている。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">const</span> MongoClient = <span class=\\"hljs-built_in\\">require</span>(‘mongodb’).MongoClient;\\n<span class=\\"hljs-keyword\\">const</span> uri = <span class=\\"hljs-string\\">\\"mongodb+srv://&lt;ADMIN&gt;:&lt;PASSWORD&gt;@&lt;MYCLUSTER&gt;.mongodb.net/test?...\\"</span>;\\n<span class=\\"hljs-keyword\\">const</span> client = <span class=\\"hljs-keyword\\">new</span> MongoClient(uri, { <span class=\\"hljs-attr\\">useNewUrlParser</span>: <span class=\\"hljs-literal\\">true</span> });\\nclient.connect(<span class=\\"hljs-function\\"><span class=\\"hljs-params\\">err</span> =&gt;</span> {\\n  <span class=\\"hljs-keyword\\">const</span> collection = client.db(<span class=\\"hljs-string\\">\\"test\\"</span>).collection(<span class=\\"hljs-string\\">\\"devices\\"</span>);\\n  <span class=\\"hljs-comment\\">// perform actions on the collection object</span>\\n  client.close();\\n});</code></pre><p>これを真似すれば、非公式クライアントライブラリ<a href=\\"https://crates.io/crates/mongodb\\">mongodb 0.3.12</a>を使ったRustのプログラムでも\\n簡単に移植できるだろうと思ったら、予想が外れてしまった。</p>\\n<pre><code>thread \'main\' panicked at \'failed to auth: OperationError(&quot;No servers available for the provide\\nd ReadPreference.&quot;)\', src/libcore/result.rs:997:5                                              \\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.  \\n</code></pre>\\n<p>ネットで調べると参考になりそうなのはこのあたり。</p>\\n<ul>\\n<li>https://www.reddit.com/r/rust/comments/9x0bs9/connect_to_mongodb_atlas_from_rust/</li>\\n<li>https://github.com/mongodb-labs/mongo-rust-driver-prototype/issues/291</li>\\n<li>https://github.com/mongodb-labs/mongo-rust-driver-prototype/issues/313</li>\\n</ul>\\n<p>そこで、</p>\\n<ul>\\n<li>クライアントライブラリは変えたくないなあ。なんとかmongodbで繋ぎたい。</li>\\n<li>しかし、<code>mongodb+srv://</code>はまだ実装されてない。</li>\\n<li>とにかく、sshのサポートは必要なのでmongodbのコンパイルに<code>features=&quot;ssl&quot;</code> が必要</li>\\n<li>そして、認証には<code>db::auth</code>メソッドを呼び出すことが必要。</li>\\n<li>さらに、認証時につなぐべきbdは <code>&quot;auth&quot;</code> である。ただwebでの管理画面を見ていると正解はどうも <code>&quot;admin&quot;</code> らしい。。。</li>\\n</ul>\\n<p>となって、こういうコードになった：</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">let</span> opts = mongodb::ClientOptions::with_unauthenticated_ssl(<span class=\\"hljs-literal\\">None</span>, <span class=\\"hljs-literal\\">false</span>);\\n   <span class=\\"hljs-keyword\\">let</span> uri = &lt;上のURI&gt;;\\n   <span class=\\"hljs-keyword\\">let</span> <span class=\\"hljs-keyword\\">mut</span> m = mongodb::Client::with_uri_and_options(uri, opts).expect(<span class=\\"hljs-string\\">\\"connect\\"</span>);\\n   client.db(<span class=\\"hljs-string\\">\\"admin\\"</span>).auth(<span class=\\"hljs-string\\">\\"&lt;ADMIN&gt;\\"</span>, <span class=\\"hljs-string\\">\\"&lt;PASSWORD&gt;\\"</span>).expect(<span class=\\"hljs-string\\">\\"auth\\"</span>);\\n   <span class=\\"hljs-keyword\\">let</span> coll = client.db(<span class=\\"hljs-string\\">\\"&lt;DB&gt;\\"</span>).collection(<span class=\\"hljs-string\\">\\"&lt;COLLECTION&gt;\\"</span>);\\n    ...</code></pre><p>しかし、これらを反映してもどうやっても最初のエラーが取れない。</p>\\n<p>いい加減、諦めかけていたのだけど、<strong>Connect with the Mongo Shell</strong>の中のサンプルを見ていて\\n指定すべきURIがMongo Shellのバージョンによって全然違うことに気づいた。\\n具体的には最新版(3.6 or later)だと、</p>\\n<pre><code>mongo &quot;mongodb+srv://&lt;CLUSTER&gt;.mongodb.net/test&quot; --username &lt;username&gt;\\n</code></pre>\\n<p>なのが、3.3 or earlierだとこうなる。</p>\\n<pre><code>mongo &quot;mongodb://&lt;CLUSTER&gt;-&lt;SHARD0&gt;.mongodb.net:xxx,&lt;CLUSTER&gt;-&lt;SHARD1&gt;.mongodb.net:xxx,&lt;CLUSTER&gt;-&lt;SHARD2&gt;.mongodb.net:xxx/test?...\\n</code></pre>\\n<p>問題の <code>srv</code> がないじゃん！</p>\\n<p>なので上のrustプログラムの2行目の<code>uri</code>の定義をこれと入れ替えたら、さっくり通ってしまった。</p>\\n<p>めでたし、めでたし。</p>\\n","dir":"article/.json/2019","base":"2019-05-31-connect-mongodb-atlas-from-rust.json","ext":".json","sourceBase":"2019-05-31-connect-mongodb-atlas-from-rust.md","sourceExt":".md"}')}}]);