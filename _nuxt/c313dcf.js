(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{605:function(n){n.exports=JSON.parse('{"title":"Nix flakeの作り方","subtitle":"さあ来いnix-2.4","date":"2021-03-16T00:00:00.000Z","tags":["NixOS"],"banner":"https://images.unsplash.com/photo-1482597869166-609e91429f40?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=2400","bodyContent":"**cover image: https://unsplash.com/photos/U2L0qbBw9Jo**\\n\\n2021-03-08にnixのベータ版？が三ヶ月ぶりに更新されて、ようやくnixを置き換えてもエラーなく使えるようになりました。\\nなので早速Splrで使ってみたのでいくつかメモ。\\n\\n## restricted modeとは\\n\\n`nix-env -u`でエラーはなくなったものの、flake.nixを作ろうとすると相変わらずrestricted modeではxxxxにアクセスできないというようなエラーが出る。これは`--impure`フラグを渡してやるといい。`nix --help`によると、\\n\\n> When the --expr option is given, all installables are interpreted as Nix expressions.\\n> You may need to specify --impure if the expression references impure inputs (such as <nixpkgs>).\\n\\nということで、多分12月頃からこうすればよかったようだ。\\n\\n```shell\\n$ nix flake init --impure\\n$ nix build --impure\\n```\\n\\n## flake.nixはどう書けばいいのか\\n\\n[Nix Wiki](https://nixos.wiki/wiki/Flakes)に出てくるのは以下の例\\n\\n```nix\\n{\\n  inputs = {\\n    home-manager.url = \\"github:nix-community/home-manager\\";\\n  };\\n}\\n```\\n\\n```nix\\n{\\n  outputs = { self, nixpkgs }: {\\n     # replace \'joes-desktop\' with your hostname here.\\n     nixosConfigurations.joes-desktop = nixpkgs.lib.nixosSystem {\\n       system = \\"x86_64-linux\\";\\n       modules = [ ./configuration.nix ];\\n     };\\n  };\\n}\\n```\\n\\nしかし、2020年5月の記事だけど[NIX FLAKES, PART 1: AN INTRODUCTION AND TUTORIAL](https://www.tweag.io/blog/2020-05-25-flakes/)の以下の例がまず足掛かり。\\n\\n```nix\\n{\\n  description = \\"A flake for building Hello World\\";\\n  inputs.nixpkgs.url = github:NixOS/nixpkgs/nixos-20.03;\\n  outputs = { self, nixpkgs }: {\\n    defaultPackage.x86_64-linux =\\n      # Notice the reference to nixpkgs here.\\n      with import nixpkgs { system = \\"x86_64-linux\\"; };\\n      stdenv.mkDerivation {\\n        name = \\"hello\\";\\n        src = self;\\n        buildPhase = \\"gcc -o hello ./hello.c\\";\\n        installPhase = \\"mkdir -p $out/bin; install -t $out/bin hello\\";\\n      };\\n  };\\n}\\n```\\n\\nこれを真似すればよさそうだが、この例ではsystemが `x86_64-linux` に限定されている。\\nいや `darwin` メインだし将来的には `aarch65` も期待したいのでもっとスマートな方法はないかと探すと、\\nNix Wikiで使われている[flake-utils](https://github.com/numtide/flake-utils)がよさそうである。このパッケージは\\n\\n```nix\\neachDefaultSystem -> (<system> -> attrs)\\n```\\n\\nを提供している。ええと、これは返値がないように見えるけどこういうこと：\\n\\n```haskell\\neachDefaultSystem :: (<system> -> attrs) -> attrs\\n```\\n\\nただし、使い方は微妙である。\\nよくわからないまま使うと、例えば`defaultPackege.x86-64-darwin`がエクスポートされていないというエラーが出てしまった。\\nでこれによく似た関数`eachSystem`の[サンプル](https://github.com/numtide/flake-utils#eachsystem---system---system---attrs)をよく見る：\\n\\n```nix\\neachSystem allSystems (system: { hello = 42; })\\n# => {\\n   hello.aarch64-darwin = 42,\\n   hello.aarch64-genode = 42,\\n}\\n```\\n\\n引数closureの中で`hello`を使うと最終的に`hello.${system}`にpopulateされるのだから、`defaultPackege.色々なシステム`をpopulateするにはclosureの中では`defaultPackage`にderivationを束縛すればいい。\\nということで\\n\\n```nix\\n{\\n  inputs.flake-utils.url = \\"github:numtide/flake-utils\\";\\n  outputs = { self, nixpkgs, flake-utils }:\\n    flake-utils.lib.eachDefaultSystem (system: {\\n      defaultPackage =\\n        with import nixpkgs { system = \\"${system}\\"; };\\n        stdenv.mkDerivation {...};\\n    });\\n}\\n```\\n\\nとするのが正解。\\n[実際のコード](https://github.com/shnarazk/splr/blob/f34a664f0f031a9ffe0c4c63558f33ab6b90eec1/flake.nix)はこれ:\\n\\n```nix\\n{\\n  description = \\"A modern SAT solver in Rust\\";\\n  inputs.flake-utils.url = \\"github:numtide/flake-utils\\";\\n  outputs = { self, nixpkgs, flake-utils }:\\n    flake-utils.lib.eachDefaultSystem (system: {\\n      defaultPackage =\\n        with import nixpkgs { system = \\"${system}\\"; };\\n        stdenv.mkDerivation {\\n          name = \\"splr\\";\\n          src = self;\\n          buildInputs = [ cargo rustc ];\\n          buildPhase = \\"cargo build --release\\";\\n          installPhase = \\"mkdir -p $out/bin; install -t $out/bin target/release/splr target/release/dmcr\\";\\n        }\\n      ;\\n    })\\n  ;\\n}\\n```\\n\\nこれでgit cloneしてnix buildでインストールできるようになりました。\\nうむ。簡単。\\nオーバレイでnixパッケージ化するよりもお手軽なので、[SAT-bench](https://github.com/shnarazk/SAT-bench)も乗り換えるかも。\\n\\n初めてFlakesを知ってから半年というか約1年。\\n長い道のりでした。\\n\\n### MacOSでRustのプログラムがコンパイルできない\\n\\n`framework Security`がないとか言われるなら、それはnixパッケージ化した時と同じような環境を作ってやらなければ。\\nということでwebまわりの機能を使うSAT-benchの場合は以下の修正が必要だった。\\n\\n```\\n1 file changed, 1 insertion(+), 1 deletion(-)\\nflake.nix | 2 +-\\n\\nmodified   flake.nix\\n@@ -8,7 +8,7 @@\\n         stdenv.mkDerivation {\\n           name = \\"SAT-bench\\";\\n           src = self;\\n-          buildInputs = [ cargo rustc ];\\n+          buildInputs = rustc.buildInputs ++ [ cargo rustc libiconv openssl pkgconfig ];\\n           buildPhase = \\"cargo build --release\\";\\n           installPhase = \\"mkdir -p $out/bin; install -t $out/bin target/release/sat-bench target/release/benchm\\";\\n         }\\n```","bodyHtml":"<p><strong>cover image: https://unsplash.com/photos/U2L0qbBw9Jo</strong></p>\\n<p>2021-03-08にnixのベータ版？が三ヶ月ぶりに更新されて、ようやくnixを置き換えてもエラーなく使えるようになりました。\\nなので早速Splrで使ってみたのでいくつかメモ。</p>\\n<h2>restricted modeとは</h2>\\n<p><code>nix-env -u</code>でエラーはなくなったものの、flake.nixを作ろうとすると相変わらずrestricted modeではxxxxにアクセスできないというようなエラーが出る。これは<code>--impure</code>フラグを渡してやるといい。<code>nix --help</code>によると、</p>\\n<blockquote>\\n<p>When the --expr option is given, all installables are interpreted as Nix expressions.\\nYou may need to specify --impure if the expression references impure inputs (such as &lt;nixpkgs&gt;).</p>\\n</blockquote>\\n<p>ということで、多分12月頃からこうすればよかったようだ。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">$</span><span class=\\"bash\\"> nix flake init --impure</span>\\n<span class=\\"hljs-meta\\">$</span><span class=\\"bash\\"> nix build --impure</span></code></pre><h2>flake.nixはどう書けばいいのか</h2>\\n<p><a href=\\"https://nixos.wiki/wiki/Flakes\\">Nix Wiki</a>に出てくるのは以下の例</p>\\n<pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">inputs</span> = {\\n    home-manager.<span class=\\"hljs-attr\\">url</span> = <span class=\\"hljs-string\\">&quot;github:nix-community/home-manager&quot;</span>;\\n  };\\n}</code></pre><pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">outputs</span> = { self, nixpkgs }: {\\n     <span class=\\"hljs-comment\\"># replace &#x27;joes-desktop&#x27; with your hostname here.</span>\\n     nixosConfigurations.<span class=\\"hljs-attr\\">joes-desktop</span> = nixpkgs.lib.nixosSystem {\\n       <span class=\\"hljs-attr\\">system</span> = <span class=\\"hljs-string\\">&quot;x86_64-linux&quot;</span>;\\n       <span class=\\"hljs-attr\\">modules</span> = [ ./configuration.nix ];\\n     };\\n  };\\n}</code></pre><p>しかし、2020年5月の記事だけど<a href=\\"https://www.tweag.io/blog/2020-05-25-flakes/\\">NIX FLAKES, PART 1: AN INTRODUCTION AND TUTORIAL</a>の以下の例がまず足掛かり。</p>\\n<pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">description</span> = <span class=\\"hljs-string\\">&quot;A flake for building Hello World&quot;</span>;\\n  inputs.nixpkgs.<span class=\\"hljs-attr\\">url</span> = github:NixOS/nixpkgs/nixos-<span class=\\"hljs-number\\">20.03</span>;\\n  <span class=\\"hljs-attr\\">outputs</span> = { self, nixpkgs }: {\\n    defaultPackage.<span class=\\"hljs-attr\\">x86_64-linux</span> =\\n      <span class=\\"hljs-comment\\"># Notice the reference to nixpkgs here.</span>\\n      <span class=\\"hljs-keyword\\">with</span> <span class=\\"hljs-built_in\\">import</span> nixpkgs { <span class=\\"hljs-attr\\">system</span> = <span class=\\"hljs-string\\">&quot;x86_64-linux&quot;</span>; };\\n      stdenv.mkDerivation {\\n        <span class=\\"hljs-attr\\">name</span> = <span class=\\"hljs-string\\">&quot;hello&quot;</span>;\\n        <span class=\\"hljs-attr\\">src</span> = self;\\n        <span class=\\"hljs-attr\\">buildPhase</span> = <span class=\\"hljs-string\\">&quot;gcc -o hello ./hello.c&quot;</span>;\\n        <span class=\\"hljs-attr\\">installPhase</span> = <span class=\\"hljs-string\\">&quot;mkdir -p $out/bin; install -t $out/bin hello&quot;</span>;\\n      };\\n  };\\n}</code></pre><p>これを真似すればよさそうだが、この例ではsystemが <code>x86_64-linux</code> に限定されている。\\nいや <code>darwin</code> メインだし将来的には <code>aarch65</code> も期待したいのでもっとスマートな方法はないかと探すと、\\nNix Wikiで使われている<a href=\\"https://github.com/numtide/flake-utils\\">flake-utils</a>がよさそうである。このパッケージは</p>\\n<pre><code class=\\"hljs\\">eachDefaultSystem -&gt; (&lt;system&gt; -&gt; attrs)</code></pre><p>を提供している。ええと、これは返値がないように見えるけどこういうこと：</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-title\\">eachDefaultSystem</span> :: (&lt;system&gt; -&gt; attrs) -&gt; attrs</code></pre><p>ただし、使い方は微妙である。\\nよくわからないまま使うと、例えば<code>defaultPackege.x86-64-darwin</code>がエクスポートされていないというエラーが出てしまった。\\nでこれによく似た関数<code>eachSystem</code>の<a href=\\"https://github.com/numtide/flake-utils#eachsystem---system---system---attrs\\">サンプル</a>をよく見る：</p>\\n<pre><code class=\\"hljs\\">eachSystem allSystems (system: { <span class=\\"hljs-attr\\">hello</span> = <span class=\\"hljs-number\\">42</span>; })\\n<span class=\\"hljs-comment\\"># =&gt; {</span>\\n   hello.<span class=\\"hljs-attr\\">aarch64-darwin</span> = <span class=\\"hljs-number\\">42</span>,\\n   hello.<span class=\\"hljs-attr\\">aarch64-genode</span> = <span class=\\"hljs-number\\">42</span>,\\n}</code></pre><p>引数closureの中で<code>hello</code>を使うと最終的に<code>hello.${system}</code>にpopulateされるのだから、<code>defaultPackege.色々なシステム</code>をpopulateするにはclosureの中では<code>defaultPackage</code>にderivationを束縛すればいい。\\nということで</p>\\n<pre><code class=\\"hljs\\">{\\n  inputs.flake-utils.<span class=\\"hljs-attr\\">url</span> = <span class=\\"hljs-string\\">&quot;github:numtide/flake-utils&quot;</span>;\\n  <span class=\\"hljs-attr\\">outputs</span> = { self, nixpkgs, flake-utils }:\\n    flake-utils.lib.eachDefaultSystem (system: {\\n      <span class=\\"hljs-attr\\">defaultPackage</span> =\\n        <span class=\\"hljs-keyword\\">with</span> <span class=\\"hljs-built_in\\">import</span> nixpkgs { <span class=\\"hljs-attr\\">system</span> = <span class=\\"hljs-string\\">&quot;<span class=\\"hljs-subst\\">${system}</span>&quot;</span>; };\\n        stdenv.mkDerivation {...};\\n    });\\n}</code></pre><p>とするのが正解。\\n<a href=\\"https://github.com/shnarazk/splr/blob/f34a664f0f031a9ffe0c4c63558f33ab6b90eec1/flake.nix\\">実際のコード</a>はこれ:</p>\\n<pre><code class=\\"hljs\\">{\\n  <span class=\\"hljs-attr\\">description</span> = <span class=\\"hljs-string\\">&quot;A modern SAT solver in Rust&quot;</span>;\\n  inputs.flake-utils.<span class=\\"hljs-attr\\">url</span> = <span class=\\"hljs-string\\">&quot;github:numtide/flake-utils&quot;</span>;\\n  <span class=\\"hljs-attr\\">outputs</span> = { self, nixpkgs, flake-utils }:\\n    flake-utils.lib.eachDefaultSystem (system: {\\n      <span class=\\"hljs-attr\\">defaultPackage</span> =\\n        <span class=\\"hljs-keyword\\">with</span> <span class=\\"hljs-built_in\\">import</span> nixpkgs { <span class=\\"hljs-attr\\">system</span> = <span class=\\"hljs-string\\">&quot;<span class=\\"hljs-subst\\">${system}</span>&quot;</span>; };\\n        stdenv.mkDerivation {\\n          <span class=\\"hljs-attr\\">name</span> = <span class=\\"hljs-string\\">&quot;splr&quot;</span>;\\n          <span class=\\"hljs-attr\\">src</span> = self;\\n          <span class=\\"hljs-attr\\">buildInputs</span> = [ cargo rustc ];\\n          <span class=\\"hljs-attr\\">buildPhase</span> = <span class=\\"hljs-string\\">&quot;cargo build --release&quot;</span>;\\n          <span class=\\"hljs-attr\\">installPhase</span> = <span class=\\"hljs-string\\">&quot;mkdir -p $out/bin; install -t $out/bin target/release/splr target/release/dmcr&quot;</span>;\\n        }\\n      ;\\n    })\\n  ;\\n}</code></pre><p>これでgit cloneしてnix buildでインストールできるようになりました。\\nうむ。簡単。\\nオーバレイでnixパッケージ化するよりもお手軽なので、<a href=\\"https://github.com/shnarazk/SAT-bench\\">SAT-bench</a>も乗り換えるかも。</p>\\n<p>初めてFlakesを知ってから半年というか約1年。\\n長い道のりでした。</p>\\n<h3>MacOSでRustのプログラムがコンパイルできない</h3>\\n<p><code>framework Security</code>がないとか言われるなら、それはnixパッケージ化した時と同じような環境を作ってやらなければ。\\nということでwebまわりの機能を使うSAT-benchの場合は以下の修正が必要だった。</p>\\n<pre><code>1 file changed, 1 insertion(+), 1 deletion(-)\\nflake.nix | 2 +-\\n\\nmodified   flake.nix\\n@@ -8,7 +8,7 @@\\n         stdenv.mkDerivation {\\n           name = &quot;SAT-bench&quot;;\\n           src = self;\\n-          buildInputs = [ cargo rustc ];\\n+          buildInputs = rustc.buildInputs ++ [ cargo rustc libiconv openssl pkgconfig ];\\n           buildPhase = &quot;cargo build --release&quot;;\\n           installPhase = &quot;mkdir -p $out/bin; install -t $out/bin target/release/sat-bench target/release/benchm&quot;;\\n         }\\n</code></pre>\\n","dir":"article/.json/2021","base":"2021-03-14-nix-flakes.json","ext":".json","sourceBase":"2021-03-14-nix-flakes.md","sourceExt":".md"}')}}]);