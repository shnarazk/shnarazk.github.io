__NUXT_JSONP__("/2021/2021-06-22-scope-of-vars-in-Scratch", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Scratchでの変数のスコープ",subtitle:null,date:"2021-06-22T00:00:00.000Z",tags:["Scratch"],banner:"\u002Fimg\u002F2021\u002F06-22-scratch\u002Fshared-var.png",bodyContent:"Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\nこれだとあまり変数の必要性を感じない。\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。\n\nで、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Fdefine-var.png)\n\nここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。\n\n## 結論\n\n- `すべてのスプライト用` -- 全てのスプライト、全てのクローンで共有。完全にglobal。\n- `このスプライトのみ` -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。\n\n従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、\n\n- 各スプライトの座標はスプライトローカル\n- 投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）\n- 呼び出し時に座標を引数として渡す\n\nということになる。\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc1.png)\n\nうーん。\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。\n\nコメント：ノンプリエンプティブならこれでOK。\n\n### 別案\n\nこの作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。\n\n```rust\nfn swap(a: &mut usize, b: &mut usize, mut c: &mut usize) {\n  *c = *a;\n  *a = *b;\n  *b = *c;\n}\n```\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc2.png)\n\nあ、代入文で選択できない！引数はimmutableに決定か。",bodyHtml:"\u003Cp\u003EScratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\nこれだとあまり変数の必要性を感じない。\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。\u003C\u002Fp\u003E\n\u003Cp\u003Eで、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Fdefine-var.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。\u003C\u002Fp\u003E\n\u003Ch2\u003E結論\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eすべてのスプライト用\u003C\u002Fcode\u003E -- 全てのスプライト、全てのクローンで共有。完全にglobal。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eこのスプライトのみ\u003C\u002Fcode\u003E -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E各スプライトの座標はスプライトローカル\u003C\u002Fli\u003E\n\u003Cli\u003E投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）\u003C\u002Fli\u003E\n\u003Cli\u003E呼び出し時に座標を引数として渡す\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eということになる。\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc1.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eうーん。\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。\u003C\u002Fp\u003E\n\u003Cp\u003Eコメント：ノンプリエンプティブならこれでOK。\u003C\u002Fp\u003E\n\u003Ch3\u003E別案\u003C\u002Fh3\u003E\n\u003Cp\u003Eこの作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eswap\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(a: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E, b: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E c: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E) {\n  *c = *a;\n  *a = *b;\n  *b = *c;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc2.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eあ、代入文で選択できない！引数はimmutableに決定か。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2021",base:"2021-06-22-scope-of-vars-in-Scratch.json",ext:".json",sourceBase:"2021-06-22-scope-of-vars-in-Scratch.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Scratchでの変数のスコープ"},subtitle:{writable:true,enumerable:true,value:null},date:{writable:true,enumerable:true,value:"2021-06-22T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Scratch"]},banner:{writable:true,enumerable:true,value:"\u002Fimg\u002F2021\u002F06-22-scratch\u002Fshared-var.png"},bodyContent:{writable:true,enumerable:true,value:"Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\nこれだとあまり変数の必要性を感じない。\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。\n\nで、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Fdefine-var.png)\n\nここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。\n\n## 結論\n\n- `すべてのスプライト用` -- 全てのスプライト、全てのクローンで共有。完全にglobal。\n- `このスプライトのみ` -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。\n\n従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、\n\n- 各スプライトの座標はスプライトローカル\n- 投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）\n- 呼び出し時に座標を引数として渡す\n\nということになる。\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc1.png)\n\nうーん。\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。\n\nコメント：ノンプリエンプティブならこれでOK。\n\n### 別案\n\nこの作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。\n\n```rust\nfn swap(a: &mut usize, b: &mut usize, mut c: &mut usize) {\n  *c = *a;\n  *a = *b;\n  *b = *c;\n}\n```\n\n![](\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc2.png)\n\nあ、代入文で選択できない！引数はimmutableに決定か。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003EScratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\nこれだとあまり変数の必要性を感じない。\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。\u003C\u002Fp\u003E\n\u003Cp\u003Eで、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Fdefine-var.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。\u003C\u002Fp\u003E\n\u003Ch2\u003E結論\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Eすべてのスプライト用\u003C\u002Fcode\u003E -- 全てのスプライト、全てのクローンで共有。完全にglobal。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eこのスプライトのみ\u003C\u002Fcode\u003E -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E各スプライトの座標はスプライトローカル\u003C\u002Fli\u003E\n\u003Cli\u003E投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）\u003C\u002Fli\u003E\n\u003Cli\u003E呼び出し時に座標を引数として渡す\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eということになる。\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc1.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eうーん。\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。\u003C\u002Fp\u003E\n\u003Cp\u003Eコメント：ノンプリエンプティブならこれでOK。\u003C\u002Fp\u003E\n\u003Ch3\u003E別案\u003C\u002Fh3\u003E\n\u003Cp\u003Eこの作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eswap\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(a: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E, b: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E c: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E) {\n  *c = *a;\n  *a = *b;\n  *b = *c;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2021\u002F06-22-scratch\u002Ffunc2.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eあ、代入文で選択できない！引数はimmutableに決定か。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2021"},base:{writable:true,enumerable:true,value:"2021-06-22-scope-of-vars-in-Scratch.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2021-06-22-scope-of-vars-in-Scratch.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});