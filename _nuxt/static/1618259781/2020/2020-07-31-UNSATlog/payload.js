__NUXT_JSONP__("/2020/2020-07-31-UNSATlog", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"UNSAT LOG, 2020, Jul.",subtitle:"Vol.1, No.7.",date:"2020-07-31T00:00:00.000Z",tags:["SAT","splr","unsatlog"],banner:"\u002Fimg\u002F2020\u002F07-31\u002Fbanner.jpg",bodyContent:"# UNSATlog\n\n## 今月のキーワード\n* Debugging Vivification\n* Restricted Stabilization\n* Maximum LBD of Dependency Graph\n* Duplicated Bin-clause Checking\n* Change of Restart Point\n\n## Vivification update\n 先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。\n\n## 節の重複検査\nその修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。\n\n## Fixed or Solved -\u003E Asserted\nvivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。\n\n## Restart revised\nvivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。\n\n## 節サイズ4バイト減\nその話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。\n\n## リスタートIF作り替え\nSplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。\n\n## Rephase to the best\nstabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。\n\n## Stabilizationのバリエーション\n何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを\n\n* 同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）\n* そうでなければリスタートを抑制\n\nに変えてもよさそうに思える。さらに言えば\n\n* stabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）\n* そうでなければ浅い矛盾を見つけるため従来法\n\nとしてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。\n\n## おわりに\n\nおまけにもう一つ。[今年のSATの国際会議](https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F)の[予稿集](https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4)がいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。\n\n## Links\n\n* https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsplr\u002Fpull\u002F56\n* https:\u002F\u002Fsat2020.idea-researchlab.org\u002Fcompetitions\u002F\n* https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\n* https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4",bodyHtml:"\u003Ch1\u003EUNSATlog\u003C\u002Fh1\u003E\n\u003Ch2\u003E今月のキーワード\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003EDebugging Vivification\u003C\u002Fli\u003E\n\u003Cli\u003ERestricted Stabilization\u003C\u002Fli\u003E\n\u003Cli\u003EMaximum LBD of Dependency Graph\u003C\u002Fli\u003E\n\u003Cli\u003EDuplicated Bin-clause Checking\u003C\u002Fli\u003E\n\u003Cli\u003EChange of Restart Point\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003EVivification update\u003C\u002Fh2\u003E\n\u003Cp\u003E先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。\u003C\u002Fp\u003E\n\u003Ch2\u003E節の重複検査\u003C\u002Fh2\u003E\n\u003Cp\u003Eその修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。\u003C\u002Fp\u003E\n\u003Ch2\u003EFixed or Solved -&gt; Asserted\u003C\u002Fh2\u003E\n\u003Cp\u003Evivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。\u003C\u002Fp\u003E\n\u003Ch2\u003ERestart revised\u003C\u002Fh2\u003E\n\u003Cp\u003Evivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。\u003C\u002Fp\u003E\n\u003Ch2\u003E節サイズ4バイト減\u003C\u002Fh2\u003E\n\u003Cp\u003Eその話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。\u003C\u002Fp\u003E\n\u003Ch2\u003EリスタートIF作り替え\u003C\u002Fh2\u003E\n\u003Cp\u003ESplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。\u003C\u002Fp\u003E\n\u003Ch2\u003ERephase to the best\u003C\u002Fh2\u003E\n\u003Cp\u003Estabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。\u003C\u002Fp\u003E\n\u003Ch2\u003EStabilizationのバリエーション\u003C\u002Fh2\u003E\n\u003Cp\u003E何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）\u003C\u002Fli\u003E\n\u003Cli\u003Eそうでなければリスタートを抑制\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eに変えてもよさそうに思える。さらに言えば\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Estabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）\u003C\u002Fli\u003E\n\u003Cli\u003Eそうでなければ浅い矛盾を見つけるため従来法\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eとしてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。\u003C\u002Fp\u003E\n\u003Ch2\u003Eおわりに\u003C\u002Fh2\u003E\n\u003Cp\u003Eおまけにもう一つ。\u003Ca href=\"https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\"\u003E今年のSATの国際会議\u003C\u002Fa\u003Eの\u003Ca href=\"https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4\"\u003E予稿集\u003C\u002Fa\u003EがいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。\u003C\u002Fp\u003E\n\u003Ch2\u003ELinks\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsplr\u002Fpull\u002F56\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fsat2020.idea-researchlab.org\u002Fcompetitions\u002F\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-07-31-UNSATlog.json",ext:".json",sourceBase:"2020-07-31-UNSATlog.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"UNSAT LOG, 2020, Jul."},subtitle:{writable:true,enumerable:true,value:"Vol.1, No.7."},date:{writable:true,enumerable:true,value:"2020-07-31T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","splr","unsatlog"]},banner:{writable:true,enumerable:true,value:"\u002Fimg\u002F2020\u002F07-31\u002Fbanner.jpg"},bodyContent:{writable:true,enumerable:true,value:"# UNSATlog\n\n## 今月のキーワード\n* Debugging Vivification\n* Restricted Stabilization\n* Maximum LBD of Dependency Graph\n* Duplicated Bin-clause Checking\n* Change of Restart Point\n\n## Vivification update\n 先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。\n\n## 節の重複検査\nその修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。\n\n## Fixed or Solved -\u003E Asserted\nvivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。\n\n## Restart revised\nvivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。\n\n## 節サイズ4バイト減\nその話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。\n\n## リスタートIF作り替え\nSplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。\n\n## Rephase to the best\nstabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。\n\n## Stabilizationのバリエーション\n何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを\n\n* 同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）\n* そうでなければリスタートを抑制\n\nに変えてもよさそうに思える。さらに言えば\n\n* stabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）\n* そうでなければ浅い矛盾を見つけるため従来法\n\nとしてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。\n\n## おわりに\n\nおまけにもう一つ。[今年のSATの国際会議](https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F)の[予稿集](https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4)がいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。\n\n## Links\n\n* https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsplr\u002Fpull\u002F56\n* https:\u002F\u002Fsat2020.idea-researchlab.org\u002Fcompetitions\u002F\n* https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\n* https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch1\u003EUNSATlog\u003C\u002Fh1\u003E\n\u003Ch2\u003E今月のキーワード\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003EDebugging Vivification\u003C\u002Fli\u003E\n\u003Cli\u003ERestricted Stabilization\u003C\u002Fli\u003E\n\u003Cli\u003EMaximum LBD of Dependency Graph\u003C\u002Fli\u003E\n\u003Cli\u003EDuplicated Bin-clause Checking\u003C\u002Fli\u003E\n\u003Cli\u003EChange of Restart Point\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003EVivification update\u003C\u002Fh2\u003E\n\u003Cp\u003E先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。\u003C\u002Fp\u003E\n\u003Ch2\u003E節の重複検査\u003C\u002Fh2\u003E\n\u003Cp\u003Eその修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。\u003C\u002Fp\u003E\n\u003Ch2\u003EFixed or Solved -&gt; Asserted\u003C\u002Fh2\u003E\n\u003Cp\u003Evivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。\u003C\u002Fp\u003E\n\u003Ch2\u003ERestart revised\u003C\u002Fh2\u003E\n\u003Cp\u003Evivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。\u003C\u002Fp\u003E\n\u003Ch2\u003E節サイズ4バイト減\u003C\u002Fh2\u003E\n\u003Cp\u003Eその話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。\u003C\u002Fp\u003E\n\u003Ch2\u003EリスタートIF作り替え\u003C\u002Fh2\u003E\n\u003Cp\u003ESplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。\u003C\u002Fp\u003E\n\u003Ch2\u003ERephase to the best\u003C\u002Fh2\u003E\n\u003Cp\u003Estabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。\u003C\u002Fp\u003E\n\u003Ch2\u003EStabilizationのバリエーション\u003C\u002Fh2\u003E\n\u003Cp\u003E何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）\u003C\u002Fli\u003E\n\u003Cli\u003Eそうでなければリスタートを抑制\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eに変えてもよさそうに思える。さらに言えば\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Estabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）\u003C\u002Fli\u003E\n\u003Cli\u003Eそうでなければ浅い矛盾を見つけるため従来法\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eとしてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。\u003C\u002Fp\u003E\n\u003Ch2\u003Eおわりに\u003C\u002Fh2\u003E\n\u003Cp\u003Eおまけにもう一つ。\u003Ca href=\"https:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\"\u003E今年のSATの国際会議\u003C\u002Fa\u003Eの\u003Ca href=\"https:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4\"\u003E予稿集\u003C\u002Fa\u003EがいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。\u003C\u002Fp\u003E\n\u003Ch2\u003ELinks\u003C\u002Fh2\u003E\n\u003Cul\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsplr\u002Fpull\u002F56\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fsat2020.idea-researchlab.org\u002Fcompetitions\u002F\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Fsatcompetition.github.io\u002F2020\u002F\u003C\u002Fli\u003E\n\u003Cli\u003Ehttps:\u002F\u002Flink.springer.com\u002Fbook\u002F10.1007\u002F978-3-319-24318-4\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-07-31-UNSATlog.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-07-31-UNSATlog.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});