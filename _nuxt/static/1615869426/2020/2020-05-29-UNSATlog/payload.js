__NUXT_JSONP__("/2020/2020-05-29-UNSATlog", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"UNSAT LOG, 2020, May.",subtitle:"Vol.1, No.5.",date:"2020-05-29T00:00:00.000Z",tags:["SAT","splr","unsatlog"],banner:"\u002Fimg\u002F2020\u002F05-29\u002Fbanner.jpg",bodyContent:"## Splr-0.4.1リリースの5月\n今月たてたissue及びブランチは以下の通り：\n\n* No restart for LR and Stabilization\n* 20200514-incremental\n* 20200524-handle\n* 20200502-new-select\n* 20200503-litpointer-on-0.3.1\n* 20200509-new-rephrase\n* 20200510-restart-for-lr\n* 20200514-incremental\n* 20200516-no-restart\n* 20200518-tuning\n* 20200524-dead\n* 20200524-handle\n\nSplr-0.4.0以降の分をまとめると\n\n* incremental SATソルバの実装\n* stabilizationの解釈と変数選択機構の実装\n* リスタートの必要性\n\nといったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。\n\n## Incremental SATソルバ\n\n初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。\n\n結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを `SatSolverIF` に追加して完成です。\n高レベルなIFとしてイテレータも追加したので、\n\n```rust\nfor ans in Certificate::try_from(...).unwrap().iter() { ... }\n```\n\nと書くだけで全解探索処理ができるのはなかなかいいな。\n\nまたWASM環境に対応しました。\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\nのつもりだったけど、実はコンパイルできるのだけれども `std::time` が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。\n\n![](https:\u002F\u002Fuser-images.githubusercontent.com\u002F997855\u002F83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png)\n\nこの件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\nちなみにWASMだとSplrのコードは140KBくらい。\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。\n\nこの修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには\n\n```\ncargo install —force —path . —features cli\n```\n\nとすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\ncontinuationかyieldあたりでsearchの中断できないかな。\n\n# Stabilizationの解釈と変数選択機能の実装\n\nSplr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。\n\n## リスタートの必要性\n\n一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-20-LR-needs-something\u002F\n\n* StabilizationはSAT問題に対してうまくいくという話でこれはわかる。\n* 逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。\n* どちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。\n* 一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？\n* VSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-19-two-heuristics\u002F\n\nこのあたりの整理は必要ではないかと。\n\n出てきた（極端な）アイデアの一つがexploit&exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\nただ極端な設定の割にはそれほど悪くないのよねえ。\n\nここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。\n\n## おわりに\n\n現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。\n\n![](\u002Fimg\u002F2020\u002F05-29\u002FSplr-0.4.1-benchmark.png)\n\n間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\nうーん、何ができるのか戦略的に考えなければ。\n勝負の6月だ。",bodyHtml:"\u003Ch2\u003ESplr-0.4.1リリースの5月\u003C\u002Fh2\u003E\n\u003Cp\u003E今月たてたissue及びブランチは以下の通り：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ENo restart for LR and Stabilization\u003C\u002Fli\u003E\n\u003Cli\u003E20200514-incremental\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-handle\u003C\u002Fli\u003E\n\u003Cli\u003E20200502-new-select\u003C\u002Fli\u003E\n\u003Cli\u003E20200503-litpointer-on-0.3.1\u003C\u002Fli\u003E\n\u003Cli\u003E20200509-new-rephrase\u003C\u002Fli\u003E\n\u003Cli\u003E20200510-restart-for-lr\u003C\u002Fli\u003E\n\u003Cli\u003E20200514-incremental\u003C\u002Fli\u003E\n\u003Cli\u003E20200516-no-restart\u003C\u002Fli\u003E\n\u003Cli\u003E20200518-tuning\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-dead\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-handle\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003ESplr-0.4.0以降の分をまとめると\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eincremental SATソルバの実装\u003C\u002Fli\u003E\n\u003Cli\u003Estabilizationの解釈と変数選択機構の実装\u003C\u002Fli\u003E\n\u003Cli\u003Eリスタートの必要性\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eといったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。\u003C\u002Fp\u003E\n\u003Ch2\u003EIncremental SATソルバ\u003C\u002Fh2\u003E\n\u003Cp\u003E初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。\u003C\u002Fp\u003E\n\u003Cp\u003E結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを \u003Ccode\u003ESatSolverIF\u003C\u002Fcode\u003E に追加して完成です。\n高レベルなIFとしてイテレータも追加したので、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ans \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E Certificate::try_from(...).unwrap().iter() { ... }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eと書くだけで全解探索処理ができるのはなかなかいいな。\u003C\u002Fp\u003E\n\u003Cp\u003EまたWASM環境に対応しました。\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\nのつもりだったけど、実はコンパイルできるのだけれども \u003Ccode\u003Estd::time\u003C\u002Fcode\u003E が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fuser-images.githubusercontent.com\u002F997855\u002F83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eこの件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\nちなみにWASMだとSplrのコードは140KBくらい。\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。\u003C\u002Fp\u003E\n\u003Cp\u003Eこの修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ecargo install —force —path . —features cli\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eとすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\ncontinuationかyieldあたりでsearchの中断できないかな。\u003C\u002Fp\u003E\n\u003Ch1\u003EStabilizationの解釈と変数選択機能の実装\u003C\u002Fh1\u003E\n\u003Cp\u003ESplr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。\u003C\u002Fp\u003E\n\u003Ch2\u003Eリスタートの必要性\u003C\u002Fh2\u003E\n\u003Cp\u003E一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-20-LR-needs-something\u002F\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EStabilizationはSAT問題に対してうまくいくという話でこれはわかる。\u003C\u002Fli\u003E\n\u003Cli\u003E逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。\u003C\u002Fli\u003E\n\u003Cli\u003Eどちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。\u003C\u002Fli\u003E\n\u003Cli\u003E一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？\u003C\u002Fli\u003E\n\u003Cli\u003EVSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-19-two-heuristics\u002F\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eこのあたりの整理は必要ではないかと。\u003C\u002Fp\u003E\n\u003Cp\u003E出てきた（極端な）アイデアの一つがexploit&amp;exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\nただ極端な設定の割にはそれほど悪くないのよねえ。\u003C\u002Fp\u003E\n\u003Cp\u003Eここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。\u003C\u002Fp\u003E\n\u003Ch2\u003Eおわりに\u003C\u002Fh2\u003E\n\u003Cp\u003E現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F05-29\u002FSplr-0.4.1-benchmark.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\nうーん、何ができるのか戦略的に考えなければ。\n勝負の6月だ。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-05-29-UNSATlog.json",ext:".json",sourceBase:"2020-05-29-UNSATlog.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"UNSAT LOG, 2020, May."},subtitle:{writable:true,enumerable:true,value:"Vol.1, No.5."},date:{writable:true,enumerable:true,value:"2020-05-29T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","splr","unsatlog"]},banner:{writable:true,enumerable:true,value:"\u002Fimg\u002F2020\u002F05-29\u002Fbanner.jpg"},bodyContent:{writable:true,enumerable:true,value:"## Splr-0.4.1リリースの5月\n今月たてたissue及びブランチは以下の通り：\n\n* No restart for LR and Stabilization\n* 20200514-incremental\n* 20200524-handle\n* 20200502-new-select\n* 20200503-litpointer-on-0.3.1\n* 20200509-new-rephrase\n* 20200510-restart-for-lr\n* 20200514-incremental\n* 20200516-no-restart\n* 20200518-tuning\n* 20200524-dead\n* 20200524-handle\n\nSplr-0.4.0以降の分をまとめると\n\n* incremental SATソルバの実装\n* stabilizationの解釈と変数選択機構の実装\n* リスタートの必要性\n\nといったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。\n\n## Incremental SATソルバ\n\n初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。\n\n結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを `SatSolverIF` に追加して完成です。\n高レベルなIFとしてイテレータも追加したので、\n\n```rust\nfor ans in Certificate::try_from(...).unwrap().iter() { ... }\n```\n\nと書くだけで全解探索処理ができるのはなかなかいいな。\n\nまたWASM環境に対応しました。\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\nのつもりだったけど、実はコンパイルできるのだけれども `std::time` が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。\n\n![](https:\u002F\u002Fuser-images.githubusercontent.com\u002F997855\u002F83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png)\n\nこの件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\nちなみにWASMだとSplrのコードは140KBくらい。\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。\n\nこの修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには\n\n```\ncargo install —force —path . —features cli\n```\n\nとすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\ncontinuationかyieldあたりでsearchの中断できないかな。\n\n# Stabilizationの解釈と変数選択機能の実装\n\nSplr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。\n\n## リスタートの必要性\n\n一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-20-LR-needs-something\u002F\n\n* StabilizationはSAT問題に対してうまくいくという話でこれはわかる。\n* 逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。\n* どちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。\n* 一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？\n* VSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-19-two-heuristics\u002F\n\nこのあたりの整理は必要ではないかと。\n\n出てきた（極端な）アイデアの一つがexploit&exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\nただ極端な設定の割にはそれほど悪くないのよねえ。\n\nここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。\n\n## おわりに\n\n現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。\n\n![](\u002Fimg\u002F2020\u002F05-29\u002FSplr-0.4.1-benchmark.png)\n\n間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\nうーん、何ができるのか戦略的に考えなければ。\n勝負の6月だ。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch2\u003ESplr-0.4.1リリースの5月\u003C\u002Fh2\u003E\n\u003Cp\u003E今月たてたissue及びブランチは以下の通り：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ENo restart for LR and Stabilization\u003C\u002Fli\u003E\n\u003Cli\u003E20200514-incremental\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-handle\u003C\u002Fli\u003E\n\u003Cli\u003E20200502-new-select\u003C\u002Fli\u003E\n\u003Cli\u003E20200503-litpointer-on-0.3.1\u003C\u002Fli\u003E\n\u003Cli\u003E20200509-new-rephrase\u003C\u002Fli\u003E\n\u003Cli\u003E20200510-restart-for-lr\u003C\u002Fli\u003E\n\u003Cli\u003E20200514-incremental\u003C\u002Fli\u003E\n\u003Cli\u003E20200516-no-restart\u003C\u002Fli\u003E\n\u003Cli\u003E20200518-tuning\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-dead\u003C\u002Fli\u003E\n\u003Cli\u003E20200524-handle\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003ESplr-0.4.0以降の分をまとめると\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eincremental SATソルバの実装\u003C\u002Fli\u003E\n\u003Cli\u003Estabilizationの解釈と変数選択機構の実装\u003C\u002Fli\u003E\n\u003Cli\u003Eリスタートの必要性\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eといったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。\u003C\u002Fp\u003E\n\u003Ch2\u003EIncremental SATソルバ\u003C\u002Fh2\u003E\n\u003Cp\u003E初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。\u003C\u002Fp\u003E\n\u003Cp\u003E結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを \u003Ccode\u003ESatSolverIF\u003C\u002Fcode\u003E に追加して完成です。\n高レベルなIFとしてイテレータも追加したので、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ans \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E Certificate::try_from(...).unwrap().iter() { ... }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eと書くだけで全解探索処理ができるのはなかなかいいな。\u003C\u002Fp\u003E\n\u003Cp\u003EまたWASM環境に対応しました。\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\nのつもりだったけど、実はコンパイルできるのだけれども \u003Ccode\u003Estd::time\u003C\u002Fcode\u003E が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fuser-images.githubusercontent.com\u002F997855\u002F83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003Eこの件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\nちなみにWASMだとSplrのコードは140KBくらい。\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。\u003C\u002Fp\u003E\n\u003Cp\u003Eこの修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ecargo install —force —path . —features cli\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eとすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\ncontinuationかyieldあたりでsearchの中断できないかな。\u003C\u002Fp\u003E\n\u003Ch1\u003EStabilizationの解釈と変数選択機能の実装\u003C\u002Fh1\u003E\n\u003Cp\u003ESplr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。\u003C\u002Fp\u003E\n\u003Ch2\u003Eリスタートの必要性\u003C\u002Fh2\u003E\n\u003Cp\u003E一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-20-LR-needs-something\u002F\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EStabilizationはSAT問題に対してうまくいくという話でこれはわかる。\u003C\u002Fli\u003E\n\u003Cli\u003E逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。\u003C\u002Fli\u003E\n\u003Cli\u003Eどちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。\u003C\u002Fli\u003E\n\u003Cli\u003E一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？\u003C\u002Fli\u003E\n\u003Cli\u003EVSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-05-19-two-heuristics\u002F\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eこのあたりの整理は必要ではないかと。\u003C\u002Fp\u003E\n\u003Cp\u003E出てきた（極端な）アイデアの一つがexploit&amp;exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\nただ極端な設定の割にはそれほど悪くないのよねえ。\u003C\u002Fp\u003E\n\u003Cp\u003Eここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。\u003C\u002Fp\u003E\n\u003Ch2\u003Eおわりに\u003C\u002Fh2\u003E\n\u003Cp\u003E現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F05-29\u002FSplr-0.4.1-benchmark.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\nうーん、何ができるのか戦略的に考えなければ。\n勝負の6月だ。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-05-29-UNSATlog.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-05-29-UNSATlog.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});