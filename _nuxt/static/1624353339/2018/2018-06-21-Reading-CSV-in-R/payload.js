__NUXT_JSONP__("/2018/2018-06-21-Reading-CSV-in-R", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Reading a CSV file into R",subtitle:"RでのCSVファイルの操作",date:"2018-06-21T00:00:00.000Z",tags:["R"],bodyContent:"## 関数read.csvを使ってCSVファイルを読む\n\n```\ndf = read.csv(...)\n```\n\n引数\n\n- ファイル名 :: 文字列\n- `header` :: Bool -- コラム名として使われるヘッダー行を持つか\n- `comment` :: 文字列 -- コメント行の開始文字\n\n\u003C!--more--\u003E\n例\n\n以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。\n\n```\n# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\nsolver, num, target, time\n\"mios-f69b8b8 0.4-2C2L@12-15\", 1, \"SR2015subset1\u002F38bits_10.dimacs.cnf\",  4.12\n\"mios-f69b8b8 0.4-2C2L@12-15\", 2, \"SR2015subset1\u002F40bits_10.dimacs.cnf\",  1256.82\n...\n```\n\nこのファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。\n\n```\ndf = read.csv(\"result.csv\", header=T, comment=\"#\")\n```\n\n---\n\n### 1. 行や列を指定して部分データを取り出す\n\n1. まず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。\n1. 次に対象行や対象列の要素全てに対する計算のやり方を考えます。\n1. 次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。\n1. 最後に条件を使った計算式についてループにより処理する方法を見ます。\n\n#### 1.1 行添字、列添字による部分データの取り出し\n\nデータフレームの一部を取り出すには、**[, 列指定添字]**、**[行指定添字, ]** を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\n添字はスカラー値でもよいし、ベクターでもよい。\n\n例\n\n```R\ndf[, 1]\ndf[, 1:2]\ndf[2, ]\ndf[1:4, ]\n```\n\n#### 1.2 列名による取り出し\n\nヘッダーを持つデータフレームの列は **[列名]** でindexingできます。列名は文字列型。従って文字列型の変数も使える。\n\n```R\ndf = ... # データフレーム変数\n\ndf[\"target\"]\n\n# または\nc = \"target\"\ndf[c]\n```\n\n#### 1.3 条件式による行の取り出し\n\n```R\nd1 = subset(df, p1==1)\n```\n\n### 2. 対象行（列）の要素全てに対する計算\n\n多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。\n\n例\n\n```R\ndf = ... # データフレーム型変数\n\ndf[1] + df[2]    # 1行目と2行目の要素それぞれを加算\n```",bodyHtml:"\u003Ch2\u003E関数read.csvを使ってCSVファイルを読む\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode\u003Edf = read.csv(...)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E引数\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eファイル名 :: 文字列\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eheader\u003C\u002Fcode\u003E :: Bool -- コラム名として使われるヘッダー行を持つか\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ecomment\u003C\u002Fcode\u003E :: 文字列 -- コメント行の開始文字\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E&lt;!--more--&gt;\n例\u003C\u002Fp\u003E\n\u003Cp\u003E以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\nsolver, num, target, time\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 1, &quot;SR2015subset1\u002F38bits_10.dimacs.cnf&quot;,  4.12\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 2, &quot;SR2015subset1\u002F40bits_10.dimacs.cnf&quot;,  1256.82\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eこのファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Edf = read.csv(&quot;result.csv&quot;, header=T, comment=&quot;#&quot;)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Chr\u003E\n\u003Ch3\u003E1. 行や列を指定して部分データを取り出す\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003Eまず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。\u003C\u002Fli\u003E\n\u003Cli\u003E次に対象行や対象列の要素全てに対する計算のやり方を考えます。\u003C\u002Fli\u003E\n\u003Cli\u003E次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。\u003C\u002Fli\u003E\n\u003Cli\u003E最後に条件を使った計算式についてループにより処理する方法を見ます。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E1.1 行添字、列添字による部分データの取り出し\u003C\u002Fh4\u003E\n\u003Cp\u003Eデータフレームの一部を取り出すには、\u003Cstrong\u003E[, 列指定添字]\u003C\u002Fstrong\u003E、\u003Cstrong\u003E[行指定添字, ]\u003C\u002Fstrong\u003E を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\n添字はスカラー値でもよいし、ベクターでもよい。\u003C\u002Fp\u003E\n\u003Cp\u003E例\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf[, 1]\ndf[, 1:2]\ndf[2, ]\ndf[1:4, ]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003E1.2 列名による取り出し\u003C\u002Fh4\u003E\n\u003Cp\u003Eヘッダーを持つデータフレームの列は \u003Cstrong\u003E[列名]\u003C\u002Fstrong\u003E でindexingできます。列名は文字列型。従って文字列型の変数も使える。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf = ... \u003Cspan class=\"hljs-comment\"\u003E# データフレーム変数\u003C\u002Fspan\u003E\n\ndf[\u003Cspan class=\"hljs-string\"\u003E&quot;target&quot;\u003C\u002Fspan\u003E]\n\n\u003Cspan class=\"hljs-comment\"\u003E# または\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-built_in\"\u003Ec\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;target&quot;\u003C\u002Fspan\u003E\ndf[\u003Cspan class=\"hljs-built_in\"\u003Ec\u003C\u002Fspan\u003E]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003E1.3 条件式による行の取り出し\u003C\u002Fh4\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Ed1 = subset(df, p1==1)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2. 対象行（列）の要素全てに対する計算\u003C\u002Fh3\u003E\n\u003Cp\u003E多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。\u003C\u002Fp\u003E\n\u003Cp\u003E例\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf = ... \u003Cspan class=\"hljs-comment\"\u003E# データフレーム型変数\u003C\u002Fspan\u003E\n\ndf[\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E] + df[\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E]    \u003Cspan class=\"hljs-comment\"\u003E# 1行目と2行目の要素それぞれを加算\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E",dir:"article\u002F.json\u002F2018",base:"2018-06-21-Reading-CSV-in-R.json",ext:".json",sourceBase:"2018-06-21-Reading-CSV-in-R.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Reading a CSV file into R"},subtitle:{writable:true,enumerable:true,value:"RでのCSVファイルの操作"},date:{writable:true,enumerable:true,value:"2018-06-21T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["R"]},bodyContent:{writable:true,enumerable:true,value:"## 関数read.csvを使ってCSVファイルを読む\n\n```\ndf = read.csv(...)\n```\n\n引数\n\n- ファイル名 :: 文字列\n- `header` :: Bool -- コラム名として使われるヘッダー行を持つか\n- `comment` :: 文字列 -- コメント行の開始文字\n\n\u003C!--more--\u003E\n例\n\n以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。\n\n```\n# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\nsolver, num, target, time\n\"mios-f69b8b8 0.4-2C2L@12-15\", 1, \"SR2015subset1\u002F38bits_10.dimacs.cnf\",  4.12\n\"mios-f69b8b8 0.4-2C2L@12-15\", 2, \"SR2015subset1\u002F40bits_10.dimacs.cnf\",  1256.82\n...\n```\n\nこのファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。\n\n```\ndf = read.csv(\"result.csv\", header=T, comment=\"#\")\n```\n\n---\n\n### 1. 行や列を指定して部分データを取り出す\n\n1. まず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。\n1. 次に対象行や対象列の要素全てに対する計算のやり方を考えます。\n1. 次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。\n1. 最後に条件を使った計算式についてループにより処理する方法を見ます。\n\n#### 1.1 行添字、列添字による部分データの取り出し\n\nデータフレームの一部を取り出すには、**[, 列指定添字]**、**[行指定添字, ]** を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\n添字はスカラー値でもよいし、ベクターでもよい。\n\n例\n\n```R\ndf[, 1]\ndf[, 1:2]\ndf[2, ]\ndf[1:4, ]\n```\n\n#### 1.2 列名による取り出し\n\nヘッダーを持つデータフレームの列は **[列名]** でindexingできます。列名は文字列型。従って文字列型の変数も使える。\n\n```R\ndf = ... # データフレーム変数\n\ndf[\"target\"]\n\n# または\nc = \"target\"\ndf[c]\n```\n\n#### 1.3 条件式による行の取り出し\n\n```R\nd1 = subset(df, p1==1)\n```\n\n### 2. 対象行（列）の要素全てに対する計算\n\n多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。\n\n例\n\n```R\ndf = ... # データフレーム型変数\n\ndf[1] + df[2]    # 1行目と2行目の要素それぞれを加算\n```"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch2\u003E関数read.csvを使ってCSVファイルを読む\u003C\u002Fh2\u003E\n\u003Cpre\u003E\u003Ccode\u003Edf = read.csv(...)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E引数\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eファイル名 :: 文字列\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Eheader\u003C\u002Fcode\u003E :: Bool -- コラム名として使われるヘッダー行を持つか\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003Ecomment\u003C\u002Fcode\u003E :: 文字列 -- コメント行の開始文字\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E&lt;!--more--&gt;\n例\u003C\u002Fp\u003E\n\u003Cp\u003E以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\nsolver, num, target, time\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 1, &quot;SR2015subset1\u002F38bits_10.dimacs.cnf&quot;,  4.12\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 2, &quot;SR2015subset1\u002F40bits_10.dimacs.cnf&quot;,  1256.82\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eこのファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Edf = read.csv(&quot;result.csv&quot;, header=T, comment=&quot;#&quot;)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Chr\u003E\n\u003Ch3\u003E1. 行や列を指定して部分データを取り出す\u003C\u002Fh3\u003E\n\u003Col\u003E\n\u003Cli\u003Eまず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。\u003C\u002Fli\u003E\n\u003Cli\u003E次に対象行や対象列の要素全てに対する計算のやり方を考えます。\u003C\u002Fli\u003E\n\u003Cli\u003E次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。\u003C\u002Fli\u003E\n\u003Cli\u003E最後に条件を使った計算式についてループにより処理する方法を見ます。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch4\u003E1.1 行添字、列添字による部分データの取り出し\u003C\u002Fh4\u003E\n\u003Cp\u003Eデータフレームの一部を取り出すには、\u003Cstrong\u003E[, 列指定添字]\u003C\u002Fstrong\u003E、\u003Cstrong\u003E[行指定添字, ]\u003C\u002Fstrong\u003E を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\n添字はスカラー値でもよいし、ベクターでもよい。\u003C\u002Fp\u003E\n\u003Cp\u003E例\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf[, 1]\ndf[, 1:2]\ndf[2, ]\ndf[1:4, ]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003E1.2 列名による取り出し\u003C\u002Fh4\u003E\n\u003Cp\u003Eヘッダーを持つデータフレームの列は \u003Cstrong\u003E[列名]\u003C\u002Fstrong\u003E でindexingできます。列名は文字列型。従って文字列型の変数も使える。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf = ... \u003Cspan class=\"hljs-comment\"\u003E# データフレーム変数\u003C\u002Fspan\u003E\n\ndf[\u003Cspan class=\"hljs-string\"\u003E&quot;target&quot;\u003C\u002Fspan\u003E]\n\n\u003Cspan class=\"hljs-comment\"\u003E# または\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-built_in\"\u003Ec\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;target&quot;\u003C\u002Fspan\u003E\ndf[\u003Cspan class=\"hljs-built_in\"\u003Ec\u003C\u002Fspan\u003E]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003E1.3 条件式による行の取り出し\u003C\u002Fh4\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Ed1 = subset(df, p1==1)\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2. 対象行（列）の要素全てに対する計算\u003C\u002Fh3\u003E\n\u003Cp\u003E多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。\u003C\u002Fp\u003E\n\u003Cp\u003E例\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Edf = ... \u003Cspan class=\"hljs-comment\"\u003E# データフレーム型変数\u003C\u002Fspan\u003E\n\ndf[\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E] + df[\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E]    \u003Cspan class=\"hljs-comment\"\u003E# 1行目と2行目の要素それぞれを加算\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2018"},base:{writable:true,enumerable:true,value:"2018-06-21-Reading-CSV-in-R.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2018-06-21-Reading-CSV-in-R.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});