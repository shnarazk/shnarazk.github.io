__NUXT_JSONP__("/2020/2020-08-19-sudoku25", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Rust製の「SATソルバーで25x25のナンプレが解けるだろうか」",subtitle:"頑張れSplr",date:"2020-11-25T00:00:00.000Z",tags:["splr","sudoku"],bodyContent:"何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。\nhttp:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520.html\n\n```text\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|\n| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  .  .|\n| .  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  .  .|\n| .  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  .|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5  .|\n| .  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  .|\n| .  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| . 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  .  .|\n| . 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  .|\n| . 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  .|\n| .  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6  .|\n| .  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  .|\n| .  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  .  .|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  .  .|\n| .  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  .  .|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n| .  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  .  .|\n| .  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  .|\n|11  .  .  .  9| .  .  .  .  .| .  .  .  .  .| .  .  .  .  .| .  .  . 19  .|\n+--------------+--------------+--------------+--------------+--------------+\n```\n\nこの問題をSATで解く（正確には、他の人に解いてもらう）という話です。\n\n\u003E さて、制約充足問題というと、すぐに思いつくのがSATであろう。ということで調べると、SATでパズルを解く研究をしている神戸大学情報基盤センターが直ぐに見つかる。\n\n「SATでパズルを解く研究をしている」という表現はどうなのかと思わないでもないけどもそれは置いといて、田村先生によって[20秒で解かれてしまった](http:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520-1.html)そうだ。\n\nさて、Splrだとどうだろうか。面白そうなのでやってみました。\n\n# Sudokuの符号化(part 1)\n\nSudokuのルールは以下の4つ。\n\n1. セルには一つの数を割り当てる（単一制約）\n1. 行には全ての数をそれぞれ一回のみ割り当てる（行制約）\n1. 列には全ての数をそれぞれ一回のみ割り当てる（列制約）\n1. ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\n\n既に何度か符号化しているものの、以前作ったものがサイズ25に対応できてなかったことがわかったのでもう一度[What's Miracle Sudoku?](2020\u002F2020-05-26-MiracleSudoku\u002F)で導入した、第１象限限定の幾何構造体`Pos`、その上の状態保持構造体`Cell`をそのまま利用して作り直し。例えばこんな感じで簡単に書ける。\n\n```rust\nfor i in 1..9 {\n  for j in 1..9 {\n     let p = Pos::at(i, j);\n     for jj in j + 1..9; \n         let q = Pos::at(i, jj);\n         for d in 1..9 {\n             rules.add(p.state(d, true).requires(q.state(d, false)));\n         }\n     }\n  }\n}\n```\n\nそして上の問題の設定は、件のブログではverbatimで与えられていたのでコピペして`&str`として取り込み、スライスをうまく作ってparseするのが現実的（解くのが数秒で問題入力が1時間ではちょっとね）。\n\n```rust\nconst dim: usize = 25;\n\nconst S25: &str = \"\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n...\n\";\n\nfn parse() -\u003E Vec\u003C(Pos, usize)\u003E {\n  let block_len = (dim as f64).sqrt() as usize;\n  let mut i = 0;\n  for (ii, l) in S25.lines().skip(1).enumerate() {\n     if ii % (block_len + 1) == 0 {\n         continue;\n     }\n     i += 1;\n     ...\n  } \n```\n\nでやってみたところ、全然だめ。いろいろ補助的なルールを追加しても5000秒でもだめ。\n\n### 2020-10-13\n\nCaDiCaLが8000秒掛かっても解けないじゃん！！こんなん解けねーよ！\n\n### 2020-11-02\n\n先月は10040あたりでピタリと停滞していたのが10150あたりまで伸びるようになってきた。\n\n### 2020-11-06\n\n10040とか10150とか言っていたのはasserted varsの個数だけど、eliminated varsのことを考えてないので正確ではない。\n大体残り5080くらいということ。\n\n### 2020-11-07\n\nCaDiCaLで実行すると数時間掛かった。残りが減れば加速するかと思っていたけど、CaDiCaLですら残り4000台は淡々としか減っていかない。\n残り3000の前半くらいからやっと終わりが見えてくる。\nうーむ、4000台への突入ではなく3000台を通り過ごさなければならないのか。これは長い。\n\n### 2020-11-18\n\n[新しい実装](\u002F2020\u002F2020-11-07-LubyStabilization)で5000秒で残り5081とか10000秒で4991くらい。\nこれはブレークスルーであるが、一方でコアがなかなか小さくならない（1100程度）ので時間を掛けても解けるかどうか自信がない。\n\n```text\n$ splr -t 10000 sudoku25.cnf\nsudoku25.cnf                                   15625,970146 |time: 10000.10\n #conflict:  108320000, #decision:    151987030, #propagate:     7602488160 \n  Assignment|#rem:     4991, #ass:    10205, #elm:      429, prg%:  68.0576 \n      Clause|Remv:    27129, LBD2:      291, Binc:  1020680, Perm:  1057443 \n     Restart|#BLK:    44811, #RST:   383671, span:     8192, shft:    16382 \n         EMA|tLBD:   1.6215, tASG:   0.9990, core:     1196, \u002Fdpc:     1.40 \n    Conflict|eLBD:    32.07, cnfl:    44.64, bjmp:    43.51, \u002Fppc:    70.19 \n        misc|elim:       42, cviv:       16, #vbv:        0, \u002Fcpr:   282.31 \n    Strategy|mode: HighSuccessiveConflict (long decision chains)\n      Result|file: .\u002F.ans_sudoku25.cnf\ns UNKNOWN (TimeOut): sudoku25.cnf\n```\n\n### 2020-11-21\n\n三連休は数独三昧になりそうだ。\n\n- 202011-21T11:23 (Online TeXを見ながら) 5000秒で4800台とか。\n- 202011-22T22:00 2000秒台で4800台突入。\n\n### 2020-11-24\n\nあー、あるルールを追加してなかったなあと思って[生成プログラムを変更](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e)したらCaDiCaLが一瞬で解くようになった。\nもしかしてと思ってやってみたら、\n\n```text\n$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,972021 |time:    15.03\n #conflict:        324, #decision:         2920, #propagate:         101930 \n  Assignment|#rem:     2507, #ass:    13118, #elm:        0, prg%:  83.9552 \n      Clause|Remv:      229, LBD2:       35, Binc:   922556, Perm:   924329 \n     Restart|#BLK:        8, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  38.8489, tASG:  52.9797, core:        0, \u002Fdpc:     9.01 \n    Conflict|eLBD:     4.22, cnfl:     1.17, bjmp:     0.76, \u002Fppc:   314.60 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:     8.31 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n$ dmcr sudoku25.cnf \nA valid assignment set for sudoku25.cnf is found in .ans_sudoku25.cnf\n```\n\nぎょえーーーーー、なんだったんだこの一ヶ月の電気代！！！！！！\n\nとりあえず証拠の品を部分公開。\n\n```text\n+--------------+--------------+--------------+--------------+--------------+\n| 8 12 11 10 18|14 25  4 16 24|20 17  1  9 21|19  5 15  6  2|22 23  7  3 13|\n| 2  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  . 21|\n| 9  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  2|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  . 19|\n|14  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  4|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  . 12|\n|22  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  7|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5 18|\n|17  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  9|\n| 6  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  . 23|\n+--------------+--------------+--------------+--------------+--------------+\n| 3  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| 5 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  . 16|\n|18 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  3|\n|24 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  1|\n|21  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6 20|\n|12  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  5|\n|15  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  . 24|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  . 25|\n|20  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  . 17|\n+--------------+--------------+--------------+--------------+--------------+\n| 4  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  . 14|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n|25  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  . 22|\n| 1  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  6|\n|11  6 14  3  9| 5 22 17 20  8|13  7 16  1 10| 2  4 23 12 18|24 21 25 19 15|\n+--------------+--------------+--------------+--------------+--------------+\n```\n\n# Sudokuの符号化(part 2)\n\nSudokuのルールは以下の4つ（これは再掲）：\n\n1. セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\n1. 行には全ての数をそれぞれ一回のみ割り当てる（行制約）\n1. 列には全ての数をそれぞれ一回のみ割り当てる（列制約）\n1. ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\n\nここで、2から4は以下のように解釈すべきである：\n\n1. 行、列、ブロックなどのグループはあるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない（[拡大最多単一制約](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F2f73c7205b7658658b154e1dfe2a54a48e054538)）\n1. 行、列、ブロックなどのグループは全ての数をそれぞれ少なくとも1回割り当てる（[拡大最少単一制約](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e)）\n\nこの2番目が最初のプログラムにはなかった（negative assertionsからpositive assertionへの導出がなかったので、そりゃ探索空間が小さくならないわ）。\n行制約の単純な解釈だと抜け落ちてしまう。\nそれでもN=9, 16くらいだと問題にならないので、ブログなどでは出てこなくても当然かもしれない。\n\nこれが色々なソルバーの説明で出てくるXOR gateの話に繋がるのだろうか。\n\n### 2020-11-25\n\n上の説明とコードを見比べていて、無駄なルールを生成していたことに気づいたので、削除するとさらに速くなりました。\n\n```text\n$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,925146 |time:     0.50\n #conflict:        314, #decision:         3452, #propagate:         110839 \n  Assignment|#rem:     3967, #ass:    11658, #elm:        0, prg%:  74.6112 \n      Clause|Remv:      243, LBD2:       27, Binc:   922541, Perm:   924411 \n     Restart|#BLK:        7, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  41.1487, tASG:  52.2173, core:        0, \u002Fdpc:    10.99 \n    Conflict|eLBD:     5.74, cnfl:     1.63, bjmp:     1.14, \u002Fppc:   352.99 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:    10.47 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n```\n\n# Sudokuの符号化(part 3)\n\nSudokuのルールは以下の2つである：\n\n1. セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\n1. 行、列、ブロックなどのグループには全ての数をそれぞれ{多くとも,少なくとも}一回のみ割り当てる（拡大最多・最少単一制約）\n\n2のルールから実行時に以下が自動的に導出される：\n\n1. グループにおいて、あるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない(positive to negative implication)\n1. グループにおいて、N-1セルにある数が割り当てられる可能性がなくなったら、残りセルにその数が割り当てられる(negatives to positive implication)\n\nこれにより探索空間が単調に減少する。",bodyHtml:"\u003Cp\u003E何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。\nhttp:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520.html\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|\n| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  .  .|\n| .  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  .  .|\n| .  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  .|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5  .|\n| .  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  .|\n| .  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| . 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  .  .|\n| . 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  .|\n| . 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  .|\n| .  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6  .|\n| .  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  .|\n| .  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  .  .|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  .  .|\n| .  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  .  .|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n| .  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  .  .|\n| .  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  .|\n|11  .  .  .  9| .  .  .  .  .| .  .  .  .  .| .  .  .  .  .| .  .  . 19  .|\n+--------------+--------------+--------------+--------------+--------------+\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこの問題をSATで解く（正確には、他の人に解いてもらう）という話です。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003Eさて、制約充足問題というと、すぐに思いつくのがSATであろう。ということで調べると、SATでパズルを解く研究をしている神戸大学情報基盤センターが直ぐに見つかる。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E「SATでパズルを解く研究をしている」という表現はどうなのかと思わないでもないけどもそれは置いといて、田村先生によって\u003Ca href=\"http:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520-1.html\"\u003E20秒で解かれてしまった\u003C\u002Fa\u003Eそうだ。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、Splrだとどうだろうか。面白そうなのでやってみました。\u003C\u002Fp\u003E\n\u003Ch1\u003ESudokuの符号化(part 1)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の4つ。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには一つの数を割り当てる（単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行には全ての数をそれぞれ一回のみ割り当てる（行制約）\u003C\u002Fli\u003E\n\u003Cli\u003E列には全ての数をそれぞれ一回のみ割り当てる（列制約）\u003C\u002Fli\u003E\n\u003Cli\u003Eブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E既に何度か符号化しているものの、以前作ったものがサイズ25に対応できてなかったことがわかったのでもう一度\u003Ca href=\"2020\u002F2020-05-26-MiracleSudoku\u002F\"\u003EWhat's Miracle Sudoku?\u003C\u002Fa\u003Eで導入した、第１象限限定の幾何構造体\u003Ccode\u003EPos\u003C\u002Fcode\u003E、その上の状態保持構造体\u003Ccode\u003ECell\u003C\u002Fcode\u003Eをそのまま利用して作り直し。例えばこんな感じで簡単に書ける。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E j \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n     \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E p = Pos::at(i, j);\n     \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E jj \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E j + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E; \n         \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E q = Pos::at(i, jj);\n         \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E d \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n             rules.add(p.state(d, \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E).requires(q.state(d, \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E)));\n         }\n     }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eそして上の問題の設定は、件のブログではverbatimで与えられていたのでコピペして\u003Ccode\u003E&amp;str\u003C\u002Fcode\u003Eとして取り込み、スライスをうまく作ってparseするのが現実的（解くのが数秒で問題入力が1時間ではちょっとね）。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E dim: \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E S25: &amp;\u003Cspan class=\"hljs-built_in\"\u003Estr\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n...\n&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eparse\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E() -&gt; \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;(Pos, \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E)&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E block_len = (dim \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ef64\u003C\u002Fspan\u003E).sqrt() \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E i = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (ii, l) \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E S25.lines().skip(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E).enumerate() {\n     \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E ii % (block_len + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E) == \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E {\n         \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E;\n     }\n     i += \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E;\n     ...\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでやってみたところ、全然だめ。いろいろ補助的なルールを追加しても5000秒でもだめ。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-10-13\u003C\u002Fh3\u003E\n\u003Cp\u003ECaDiCaLが8000秒掛かっても解けないじゃん！！こんなん解けねーよ！\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-02\u003C\u002Fh3\u003E\n\u003Cp\u003E先月は10040あたりでピタリと停滞していたのが10150あたりまで伸びるようになってきた。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-06\u003C\u002Fh3\u003E\n\u003Cp\u003E10040とか10150とか言っていたのはasserted varsの個数だけど、eliminated varsのことを考えてないので正確ではない。\n大体残り5080くらいということ。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-07\u003C\u002Fh3\u003E\n\u003Cp\u003ECaDiCaLで実行すると数時間掛かった。残りが減れば加速するかと思っていたけど、CaDiCaLですら残り4000台は淡々としか減っていかない。\n残り3000の前半くらいからやっと終わりが見えてくる。\nうーむ、4000台への突入ではなく3000台を通り過ごさなければならないのか。これは長い。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-18\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ca href=\"\u002F2020\u002F2020-11-07-LubyStabilization\"\u003E新しい実装\u003C\u002Fa\u003Eで5000秒で残り5081とか10000秒で4991くらい。\nこれはブレークスルーであるが、一方でコアがなかなか小さくならない（1100程度）ので時間を掛けても解けるかどうか自信がない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr -t 10000 sudoku25.cnf\nsudoku25.cnf                                   15625,970146 |time: 10000.10\n #conflict:  108320000, #decision:    151987030, #propagate:     7602488160 \n  Assignment|#rem:     4991, #ass:    10205, #elm:      429, prg%:  68.0576 \n      Clause|Remv:    27129, LBD2:      291, Binc:  1020680, Perm:  1057443 \n     Restart|#BLK:    44811, #RST:   383671, span:     8192, shft:    16382 \n         EMA|tLBD:   1.6215, tASG:   0.9990, core:     1196, \u002Fdpc:     1.40 \n    Conflict|eLBD:    32.07, cnfl:    44.64, bjmp:    43.51, \u002Fppc:    70.19 \n        misc|elim:       42, cviv:       16, #vbv:        0, \u002Fcpr:   282.31 \n    Strategy|mode: HighSuccessiveConflict (long decision chains)\n      Result|file: .\u002F.ans_sudoku25.cnf\ns UNKNOWN (TimeOut): sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-11-21\u003C\u002Fh3\u003E\n\u003Cp\u003E三連休は数独三昧になりそうだ。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E202011-21T11:23 (Online TeXを見ながら) 5000秒で4800台とか。\u003C\u002Fli\u003E\n\u003Cli\u003E202011-22T22:00 2000秒台で4800台突入。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E2020-11-24\u003C\u002Fh3\u003E\n\u003Cp\u003Eあー、あるルールを追加してなかったなあと思って\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e\"\u003E生成プログラムを変更\u003C\u002Fa\u003EしたらCaDiCaLが一瞬で解くようになった。\nもしかしてと思ってやってみたら、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,972021 |time:    15.03\n #conflict:        324, #decision:         2920, #propagate:         101930 \n  Assignment|#rem:     2507, #ass:    13118, #elm:        0, prg%:  83.9552 \n      Clause|Remv:      229, LBD2:       35, Binc:   922556, Perm:   924329 \n     Restart|#BLK:        8, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  38.8489, tASG:  52.9797, core:        0, \u002Fdpc:     9.01 \n    Conflict|eLBD:     4.22, cnfl:     1.17, bjmp:     0.76, \u002Fppc:   314.60 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:     8.31 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n$ dmcr sudoku25.cnf \nA valid assignment set for sudoku25.cnf is found in .ans_sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eぎょえーーーーー、なんだったんだこの一ヶ月の電気代！！！！！！\u003C\u002Fp\u003E\n\u003Cp\u003Eとりあえず証拠の品を部分公開。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E+--------------+--------------+--------------+--------------+--------------+\n| 8 12 11 10 18|14 25  4 16 24|20 17  1  9 21|19  5 15  6  2|22 23  7  3 13|\n| 2  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  . 21|\n| 9  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  2|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  . 19|\n|14  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  4|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  . 12|\n|22  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  7|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5 18|\n|17  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  9|\n| 6  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  . 23|\n+--------------+--------------+--------------+--------------+--------------+\n| 3  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| 5 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  . 16|\n|18 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  3|\n|24 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  1|\n|21  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6 20|\n|12  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  5|\n|15  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  . 24|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  . 25|\n|20  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  . 17|\n+--------------+--------------+--------------+--------------+--------------+\n| 4  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  . 14|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n|25  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  . 22|\n| 1  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  6|\n|11  6 14  3  9| 5 22 17 20  8|13  7 16  1 10| 2  4 23 12 18|24 21 25 19 15|\n+--------------+--------------+--------------+--------------+--------------+\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003ESudokuの符号化(part 2)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の4つ（これは再掲）：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行には全ての数をそれぞれ一回のみ割り当てる（行制約）\u003C\u002Fli\u003E\n\u003Cli\u003E列には全ての数をそれぞれ一回のみ割り当てる（列制約）\u003C\u002Fli\u003E\n\u003Cli\u003Eブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eここで、2から4は以下のように解釈すべきである：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E行、列、ブロックなどのグループはあるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない（\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F2f73c7205b7658658b154e1dfe2a54a48e054538\"\u003E拡大最多単一制約\u003C\u002Fa\u003E）\u003C\u002Fli\u003E\n\u003Cli\u003E行、列、ブロックなどのグループは全ての数をそれぞれ少なくとも1回割り当てる（\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e\"\u003E拡大最少単一制約\u003C\u002Fa\u003E）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eこの2番目が最初のプログラムにはなかった（negative assertionsからpositive assertionへの導出がなかったので、そりゃ探索空間が小さくならないわ）。\n行制約の単純な解釈だと抜け落ちてしまう。\nそれでもN=9, 16くらいだと問題にならないので、ブログなどでは出てこなくても当然かもしれない。\u003C\u002Fp\u003E\n\u003Cp\u003Eこれが色々なソルバーの説明で出てくるXOR gateの話に繋がるのだろうか。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-25\u003C\u002Fh3\u003E\n\u003Cp\u003E上の説明とコードを見比べていて、無駄なルールを生成していたことに気づいたので、削除するとさらに速くなりました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,925146 |time:     0.50\n #conflict:        314, #decision:         3452, #propagate:         110839 \n  Assignment|#rem:     3967, #ass:    11658, #elm:        0, prg%:  74.6112 \n      Clause|Remv:      243, LBD2:       27, Binc:   922541, Perm:   924411 \n     Restart|#BLK:        7, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  41.1487, tASG:  52.2173, core:        0, \u002Fdpc:    10.99 \n    Conflict|eLBD:     5.74, cnfl:     1.63, bjmp:     1.14, \u002Fppc:   352.99 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:    10.47 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003ESudokuの符号化(part 3)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の2つである：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行、列、ブロックなどのグループには全ての数をそれぞれ{多くとも,少なくとも}一回のみ割り当てる（拡大最多・最少単一制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E2のルールから実行時に以下が自動的に導出される：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eグループにおいて、あるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない(positive to negative implication)\u003C\u002Fli\u003E\n\u003Cli\u003Eグループにおいて、N-1セルにある数が割り当てられる可能性がなくなったら、残りセルにその数が割り当てられる(negatives to positive implication)\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eこれにより探索空間が単調に減少する。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-08-19-sudoku25.json",ext:".json",sourceBase:"2020-08-19-sudoku25.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Rust製の「SATソルバーで25x25のナンプレが解けるだろうか」"},subtitle:{writable:true,enumerable:true,value:"頑張れSplr"},date:{writable:true,enumerable:true,value:"2020-11-25T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["splr","sudoku"]},bodyContent:{writable:true,enumerable:true,value:"何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。\nhttp:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520.html\n\n```text\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|\n| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  .  .|\n| .  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  .  .|\n| .  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  .|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5  .|\n| .  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  .|\n| .  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| . 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  .  .|\n| . 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  .|\n| . 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  .|\n| .  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6  .|\n| .  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  .|\n| .  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  .  .|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  .  .|\n| .  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  .  .|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n| .  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  .  .|\n| .  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  .|\n|11  .  .  .  9| .  .  .  .  .| .  .  .  .  .| .  .  .  .  .| .  .  . 19  .|\n+--------------+--------------+--------------+--------------+--------------+\n```\n\nこの問題をSATで解く（正確には、他の人に解いてもらう）という話です。\n\n\u003E さて、制約充足問題というと、すぐに思いつくのがSATであろう。ということで調べると、SATでパズルを解く研究をしている神戸大学情報基盤センターが直ぐに見つかる。\n\n「SATでパズルを解く研究をしている」という表現はどうなのかと思わないでもないけどもそれは置いといて、田村先生によって[20秒で解かれてしまった](http:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520-1.html)そうだ。\n\nさて、Splrだとどうだろうか。面白そうなのでやってみました。\n\n# Sudokuの符号化(part 1)\n\nSudokuのルールは以下の4つ。\n\n1. セルには一つの数を割り当てる（単一制約）\n1. 行には全ての数をそれぞれ一回のみ割り当てる（行制約）\n1. 列には全ての数をそれぞれ一回のみ割り当てる（列制約）\n1. ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\n\n既に何度か符号化しているものの、以前作ったものがサイズ25に対応できてなかったことがわかったのでもう一度[What's Miracle Sudoku?](2020\u002F2020-05-26-MiracleSudoku\u002F)で導入した、第１象限限定の幾何構造体`Pos`、その上の状態保持構造体`Cell`をそのまま利用して作り直し。例えばこんな感じで簡単に書ける。\n\n```rust\nfor i in 1..9 {\n  for j in 1..9 {\n     let p = Pos::at(i, j);\n     for jj in j + 1..9; \n         let q = Pos::at(i, jj);\n         for d in 1..9 {\n             rules.add(p.state(d, true).requires(q.state(d, false)));\n         }\n     }\n  }\n}\n```\n\nそして上の問題の設定は、件のブログではverbatimで与えられていたのでコピペして`&str`として取り込み、スライスをうまく作ってparseするのが現実的（解くのが数秒で問題入力が1時間ではちょっとね）。\n\n```rust\nconst dim: usize = 25;\n\nconst S25: &str = \"\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n...\n\";\n\nfn parse() -\u003E Vec\u003C(Pos, usize)\u003E {\n  let block_len = (dim as f64).sqrt() as usize;\n  let mut i = 0;\n  for (ii, l) in S25.lines().skip(1).enumerate() {\n     if ii % (block_len + 1) == 0 {\n         continue;\n     }\n     i += 1;\n     ...\n  } \n```\n\nでやってみたところ、全然だめ。いろいろ補助的なルールを追加しても5000秒でもだめ。\n\n### 2020-10-13\n\nCaDiCaLが8000秒掛かっても解けないじゃん！！こんなん解けねーよ！\n\n### 2020-11-02\n\n先月は10040あたりでピタリと停滞していたのが10150あたりまで伸びるようになってきた。\n\n### 2020-11-06\n\n10040とか10150とか言っていたのはasserted varsの個数だけど、eliminated varsのことを考えてないので正確ではない。\n大体残り5080くらいということ。\n\n### 2020-11-07\n\nCaDiCaLで実行すると数時間掛かった。残りが減れば加速するかと思っていたけど、CaDiCaLですら残り4000台は淡々としか減っていかない。\n残り3000の前半くらいからやっと終わりが見えてくる。\nうーむ、4000台への突入ではなく3000台を通り過ごさなければならないのか。これは長い。\n\n### 2020-11-18\n\n[新しい実装](\u002F2020\u002F2020-11-07-LubyStabilization)で5000秒で残り5081とか10000秒で4991くらい。\nこれはブレークスルーであるが、一方でコアがなかなか小さくならない（1100程度）ので時間を掛けても解けるかどうか自信がない。\n\n```text\n$ splr -t 10000 sudoku25.cnf\nsudoku25.cnf                                   15625,970146 |time: 10000.10\n #conflict:  108320000, #decision:    151987030, #propagate:     7602488160 \n  Assignment|#rem:     4991, #ass:    10205, #elm:      429, prg%:  68.0576 \n      Clause|Remv:    27129, LBD2:      291, Binc:  1020680, Perm:  1057443 \n     Restart|#BLK:    44811, #RST:   383671, span:     8192, shft:    16382 \n         EMA|tLBD:   1.6215, tASG:   0.9990, core:     1196, \u002Fdpc:     1.40 \n    Conflict|eLBD:    32.07, cnfl:    44.64, bjmp:    43.51, \u002Fppc:    70.19 \n        misc|elim:       42, cviv:       16, #vbv:        0, \u002Fcpr:   282.31 \n    Strategy|mode: HighSuccessiveConflict (long decision chains)\n      Result|file: .\u002F.ans_sudoku25.cnf\ns UNKNOWN (TimeOut): sudoku25.cnf\n```\n\n### 2020-11-21\n\n三連休は数独三昧になりそうだ。\n\n- 202011-21T11:23 (Online TeXを見ながら) 5000秒で4800台とか。\n- 202011-22T22:00 2000秒台で4800台突入。\n\n### 2020-11-24\n\nあー、あるルールを追加してなかったなあと思って[生成プログラムを変更](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e)したらCaDiCaLが一瞬で解くようになった。\nもしかしてと思ってやってみたら、\n\n```text\n$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,972021 |time:    15.03\n #conflict:        324, #decision:         2920, #propagate:         101930 \n  Assignment|#rem:     2507, #ass:    13118, #elm:        0, prg%:  83.9552 \n      Clause|Remv:      229, LBD2:       35, Binc:   922556, Perm:   924329 \n     Restart|#BLK:        8, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  38.8489, tASG:  52.9797, core:        0, \u002Fdpc:     9.01 \n    Conflict|eLBD:     4.22, cnfl:     1.17, bjmp:     0.76, \u002Fppc:   314.60 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:     8.31 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n$ dmcr sudoku25.cnf \nA valid assignment set for sudoku25.cnf is found in .ans_sudoku25.cnf\n```\n\nぎょえーーーーー、なんだったんだこの一ヶ月の電気代！！！！！！\n\nとりあえず証拠の品を部分公開。\n\n```text\n+--------------+--------------+--------------+--------------+--------------+\n| 8 12 11 10 18|14 25  4 16 24|20 17  1  9 21|19  5 15  6  2|22 23  7  3 13|\n| 2  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  . 21|\n| 9  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  2|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  . 19|\n|14  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  4|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  . 12|\n|22  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  7|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5 18|\n|17  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  9|\n| 6  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  . 23|\n+--------------+--------------+--------------+--------------+--------------+\n| 3  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| 5 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  . 16|\n|18 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  3|\n|24 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  1|\n|21  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6 20|\n|12  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  5|\n|15  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  . 24|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  . 25|\n|20  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  . 17|\n+--------------+--------------+--------------+--------------+--------------+\n| 4  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  . 14|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n|25  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  . 22|\n| 1  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  6|\n|11  6 14  3  9| 5 22 17 20  8|13  7 16  1 10| 2  4 23 12 18|24 21 25 19 15|\n+--------------+--------------+--------------+--------------+--------------+\n```\n\n# Sudokuの符号化(part 2)\n\nSudokuのルールは以下の4つ（これは再掲）：\n\n1. セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\n1. 行には全ての数をそれぞれ一回のみ割り当てる（行制約）\n1. 列には全ての数をそれぞれ一回のみ割り当てる（列制約）\n1. ブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\n\nここで、2から4は以下のように解釈すべきである：\n\n1. 行、列、ブロックなどのグループはあるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない（[拡大最多単一制約](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F2f73c7205b7658658b154e1dfe2a54a48e054538)）\n1. 行、列、ブロックなどのグループは全ての数をそれぞれ少なくとも1回割り当てる（[拡大最少単一制約](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e)）\n\nこの2番目が最初のプログラムにはなかった（negative assertionsからpositive assertionへの導出がなかったので、そりゃ探索空間が小さくならないわ）。\n行制約の単純な解釈だと抜け落ちてしまう。\nそれでもN=9, 16くらいだと問題にならないので、ブログなどでは出てこなくても当然かもしれない。\n\nこれが色々なソルバーの説明で出てくるXOR gateの話に繋がるのだろうか。\n\n### 2020-11-25\n\n上の説明とコードを見比べていて、無駄なルールを生成していたことに気づいたので、削除するとさらに速くなりました。\n\n```text\n$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,925146 |time:     0.50\n #conflict:        314, #decision:         3452, #propagate:         110839 \n  Assignment|#rem:     3967, #ass:    11658, #elm:        0, prg%:  74.6112 \n      Clause|Remv:      243, LBD2:       27, Binc:   922541, Perm:   924411 \n     Restart|#BLK:        7, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  41.1487, tASG:  52.2173, core:        0, \u002Fdpc:    10.99 \n    Conflict|eLBD:     5.74, cnfl:     1.63, bjmp:     1.14, \u002Fppc:   352.99 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:    10.47 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n```\n\n# Sudokuの符号化(part 3)\n\nSudokuのルールは以下の2つである：\n\n1. セルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\n1. 行、列、ブロックなどのグループには全ての数をそれぞれ{多くとも,少なくとも}一回のみ割り当てる（拡大最多・最少単一制約）\n\n2のルールから実行時に以下が自動的に導出される：\n\n1. グループにおいて、あるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない(positive to negative implication)\n1. グループにおいて、N-1セルにある数が割り当てられる可能性がなくなったら、残りセルにその数が割り当てられる(negatives to positive implication)\n\nこれにより探索空間が単調に減少する。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003E何の調べ物をしていたのか忘れましたが、偶然こんなものを見つけました。\nhttp:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520.html\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n| .  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  .  .|\n| .  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  .|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  .  .|\n| .  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  .  .|\n| .  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  .|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5  .|\n| .  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  .|\n| .  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| . 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  .  .|\n| . 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  .|\n| . 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  .|\n| .  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6  .|\n| .  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  .|\n| .  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  .  .|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  .  .|\n| .  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  .  .|\n+--------------+--------------+--------------+--------------+--------------+\n| .  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  .  .|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n| .  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  .  .|\n| .  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  .|\n|11  .  .  .  9| .  .  .  .  .| .  .  .  .  .| .  .  .  .  .| .  .  . 19  .|\n+--------------+--------------+--------------+--------------+--------------+\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこの問題をSATで解く（正確には、他の人に解いてもらう）という話です。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003Eさて、制約充足問題というと、すぐに思いつくのがSATであろう。ということで調べると、SATでパズルを解く研究をしている神戸大学情報基盤センターが直ぐに見つかる。\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E「SATでパズルを解く研究をしている」という表現はどうなのかと思わないでもないけどもそれは置いといて、田村先生によって\u003Ca href=\"http:\u002F\u002Flabs.timedia.co.jp\u002F2017\u002F07\u002Fsat25x2520-1.html\"\u003E20秒で解かれてしまった\u003C\u002Fa\u003Eそうだ。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、Splrだとどうだろうか。面白そうなのでやってみました。\u003C\u002Fp\u003E\n\u003Ch1\u003ESudokuの符号化(part 1)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の4つ。\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには一つの数を割り当てる（単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行には全ての数をそれぞれ一回のみ割り当てる（行制約）\u003C\u002Fli\u003E\n\u003Cli\u003E列には全ての数をそれぞれ一回のみ割り当てる（列制約）\u003C\u002Fli\u003E\n\u003Cli\u003Eブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E既に何度か符号化しているものの、以前作ったものがサイズ25に対応できてなかったことがわかったのでもう一度\u003Ca href=\"2020\u002F2020-05-26-MiracleSudoku\u002F\"\u003EWhat's Miracle Sudoku?\u003C\u002Fa\u003Eで導入した、第１象限限定の幾何構造体\u003Ccode\u003EPos\u003C\u002Fcode\u003E、その上の状態保持構造体\u003Ccode\u003ECell\u003C\u002Fcode\u003Eをそのまま利用して作り直し。例えばこんな感じで簡単に書ける。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E j \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n     \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E p = Pos::at(i, j);\n     \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E jj \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E j + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E; \n         \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E q = Pos::at(i, jj);\n         \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E d \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E..\u003Cspan class=\"hljs-number\"\u003E9\u003C\u002Fspan\u003E {\n             rules.add(p.state(d, \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E).requires(q.state(d, \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E)));\n         }\n     }\n  }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eそして上の問題の設定は、件のブログではverbatimで与えられていたのでコピペして\u003Ccode\u003E&amp;str\u003C\u002Fcode\u003Eとして取り込み、スライスをうまく作ってparseするのが現実的（解くのが数秒で問題入力が1時間ではちょっとね）。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E dim: \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-number\"\u003E25\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E S25: &amp;\u003Cspan class=\"hljs-built_in\"\u003Estr\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;\n+--------------+--------------+--------------+--------------+--------------+\n| . 12  .  .  .| .  .  .  .  .| .  .  .  9  .| .  . 15  .  .|22  .  .  .  .|\n...\n&quot;\u003C\u002Fspan\u003E;\n\n\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eparse\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E() -&gt; \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;(Pos, \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E)&gt; {\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E block_len = (dim \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Ef64\u003C\u002Fspan\u003E).sqrt() \u003Cspan class=\"hljs-keyword\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-built_in\"\u003Eusize\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E i = \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (ii, l) \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E S25.lines().skip(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E).enumerate() {\n     \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E ii % (block_len + \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E) == \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E {\n         \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E;\n     }\n     i += \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E;\n     ...\n  }\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでやってみたところ、全然だめ。いろいろ補助的なルールを追加しても5000秒でもだめ。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-10-13\u003C\u002Fh3\u003E\n\u003Cp\u003ECaDiCaLが8000秒掛かっても解けないじゃん！！こんなん解けねーよ！\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-02\u003C\u002Fh3\u003E\n\u003Cp\u003E先月は10040あたりでピタリと停滞していたのが10150あたりまで伸びるようになってきた。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-06\u003C\u002Fh3\u003E\n\u003Cp\u003E10040とか10150とか言っていたのはasserted varsの個数だけど、eliminated varsのことを考えてないので正確ではない。\n大体残り5080くらいということ。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-07\u003C\u002Fh3\u003E\n\u003Cp\u003ECaDiCaLで実行すると数時間掛かった。残りが減れば加速するかと思っていたけど、CaDiCaLですら残り4000台は淡々としか減っていかない。\n残り3000の前半くらいからやっと終わりが見えてくる。\nうーむ、4000台への突入ではなく3000台を通り過ごさなければならないのか。これは長い。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-18\u003C\u002Fh3\u003E\n\u003Cp\u003E\u003Ca href=\"\u002F2020\u002F2020-11-07-LubyStabilization\"\u003E新しい実装\u003C\u002Fa\u003Eで5000秒で残り5081とか10000秒で4991くらい。\nこれはブレークスルーであるが、一方でコアがなかなか小さくならない（1100程度）ので時間を掛けても解けるかどうか自信がない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr -t 10000 sudoku25.cnf\nsudoku25.cnf                                   15625,970146 |time: 10000.10\n #conflict:  108320000, #decision:    151987030, #propagate:     7602488160 \n  Assignment|#rem:     4991, #ass:    10205, #elm:      429, prg%:  68.0576 \n      Clause|Remv:    27129, LBD2:      291, Binc:  1020680, Perm:  1057443 \n     Restart|#BLK:    44811, #RST:   383671, span:     8192, shft:    16382 \n         EMA|tLBD:   1.6215, tASG:   0.9990, core:     1196, \u002Fdpc:     1.40 \n    Conflict|eLBD:    32.07, cnfl:    44.64, bjmp:    43.51, \u002Fppc:    70.19 \n        misc|elim:       42, cviv:       16, #vbv:        0, \u002Fcpr:   282.31 \n    Strategy|mode: HighSuccessiveConflict (long decision chains)\n      Result|file: .\u002F.ans_sudoku25.cnf\ns UNKNOWN (TimeOut): sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-11-21\u003C\u002Fh3\u003E\n\u003Cp\u003E三連休は数独三昧になりそうだ。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E202011-21T11:23 (Online TeXを見ながら) 5000秒で4800台とか。\u003C\u002Fli\u003E\n\u003Cli\u003E202011-22T22:00 2000秒台で4800台突入。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E2020-11-24\u003C\u002Fh3\u003E\n\u003Cp\u003Eあー、あるルールを追加してなかったなあと思って\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e\"\u003E生成プログラムを変更\u003C\u002Fa\u003EしたらCaDiCaLが一瞬で解くようになった。\nもしかしてと思ってやってみたら、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,972021 |time:    15.03\n #conflict:        324, #decision:         2920, #propagate:         101930 \n  Assignment|#rem:     2507, #ass:    13118, #elm:        0, prg%:  83.9552 \n      Clause|Remv:      229, LBD2:       35, Binc:   922556, Perm:   924329 \n     Restart|#BLK:        8, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  38.8489, tASG:  52.9797, core:        0, \u002Fdpc:     9.01 \n    Conflict|eLBD:     4.22, cnfl:     1.17, bjmp:     0.76, \u002Fppc:   314.60 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:     8.31 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\n$ dmcr sudoku25.cnf \nA valid assignment set for sudoku25.cnf is found in .ans_sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eぎょえーーーーー、なんだったんだこの一ヶ月の電気代！！！！！！\u003C\u002Fp\u003E\n\u003Cp\u003Eとりあえず証拠の品を部分公開。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E+--------------+--------------+--------------+--------------+--------------+\n| 8 12 11 10 18|14 25  4 16 24|20 17  1  9 21|19  5 15  6  2|22 23  7  3 13|\n| 2  .  .  .  .| .  9  . 19  .| .  . 10 11  .| .  .  .  .  .| .  .  .  . 21|\n| 9  4  . 22  .| .  .  .  .  .| .  .  .  .  .| .  . 12  .  .|20 15  1  .  2|\n|16  1 20 15  .| .  .  .  .  .| .  .  .  .  .|14  .  4  . 22|12 25  .  . 19|\n|14  .  .  .  .| .  7  2 11  .|23  . 19  8  .| .  .  . 13  .| .  .  .  .  4|\n+--------------+--------------+--------------+--------------+--------------+\n|13  .  8  .  2| .  .  .  .  .| .  .  7 23  6| .  9  . 19 11| .  .  .  . 12|\n|22  .  .  . 23| .  .  .  . 16| .  .  .  .  .| .  .  .  .  .| 1  .  .  .  7|\n| 7  .  .  . 10| 3  .  .  .  .| .  .  9 19  .| . 13  . 23  .| .  .  .  5 18|\n|17  .  .  .  .|15  .  .  . 22| .  .  .  .  .| .  .  .  .  .|25 20  .  .  9|\n| 6  .  .  .  .|12  . 14  1 25| .  .  .  .  .| .  .  3  .  .|16  4 15  . 23|\n+--------------+--------------+--------------+--------------+--------------+\n| 3  .  .  .  .| . 19  9  .  .| .  . 13  7  .| .  .  .  5  .| .  .  . 23 10|\n| 5 22  . 25 17| .  .  .  .  .| .  .  .  .  .|12  . 20  .  .| .  .  .  . 16|\n|18 20 12 16  .| .  .  .  .  .| .  .  .  . 14|15 22  1  . 25| .  .  .  .  3|\n|24 15  .  .  .| . 11  .  .  .| .  .  .  .  .| .  . 16  .  .| .  .  .  9  1|\n|21  .  .  1  .| . 10  . 23  .| .  .  .  . 18| .  .  .  .  .| .  .  .  .  8|\n+--------------+--------------+--------------+--------------+--------------+\n|10  .  .  .  8| . 13  .  5  .| .  .  .  .  .| . 19  . 11 23| .  .  .  6 20|\n|12  .  . 17  7| .  .  .  .  .| .  .  .  .  1| .  .  .  .  .| 4 22  .  .  5|\n|15  .  .  . 11| . 23  .  .  .| .  .  .  . 20| .  .  .  2  .|14  .  .  . 24|\n|19  . 23  .  5| .  8  .  9  .| . 21  .  .  .| . 10  .  7  .| .  .  .  . 25|\n|20  3  .  .  .| .  .  .  .  .|25  4  .  . 12| .  .  .  .  .|15  1 16  . 17|\n+--------------+--------------+--------------+--------------+--------------+\n| 4  .  .  .  .| .  .  .  . 15| . 12  .  . 25| 1  . 22  .  .| 3  .  .  . 14|\n|23  .  .  . 19| .  2  .  .  .| .  .  .  .  .| .  .  . 10  .| .  .  .  7 11|\n|25  .  . 18  .| .  .  .  .  .| . 20  .  .  .| .  .  .  .  .| .  .  .  . 22|\n| 1  .  .  .  .| .  .  .  .  4|14 15  .  . 22| .  .  .  .  .| .  .  . 10  6|\n|11  6 14  3  9| 5 22 17 20  8|13  7 16  1 10| 2  4 23 12 18|24 21 25 19 15|\n+--------------+--------------+--------------+--------------+--------------+\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003ESudokuの符号化(part 2)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の4つ（これは再掲）：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行には全ての数をそれぞれ一回のみ割り当てる（行制約）\u003C\u002Fli\u003E\n\u003Cli\u003E列には全ての数をそれぞれ一回のみ割り当てる（列制約）\u003C\u002Fli\u003E\n\u003Cli\u003Eブロックには全ての数をそれぞれ一回のみ割り当てる（ブロック制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eここで、2から4は以下のように解釈すべきである：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003E行、列、ブロックなどのグループはあるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない（\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F2f73c7205b7658658b154e1dfe2a54a48e054538\"\u003E拡大最多単一制約\u003C\u002Fa\u003E）\u003C\u002Fli\u003E\n\u003Cli\u003E行、列、ブロックなどのグループは全ての数をそれぞれ少なくとも1回割り当てる（\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002Fsudoku_sat\u002Fcommit\u002F1e41b14aecd58d02cb1a2087d3c239f661b67e5e\"\u003E拡大最少単一制約\u003C\u002Fa\u003E）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eこの2番目が最初のプログラムにはなかった（negative assertionsからpositive assertionへの導出がなかったので、そりゃ探索空間が小さくならないわ）。\n行制約の単純な解釈だと抜け落ちてしまう。\nそれでもN=9, 16くらいだと問題にならないので、ブログなどでは出てこなくても当然かもしれない。\u003C\u002Fp\u003E\n\u003Cp\u003Eこれが色々なソルバーの説明で出てくるXOR gateの話に繋がるのだろうか。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-11-25\u003C\u002Fh3\u003E\n\u003Cp\u003E上の説明とコードを見比べていて、無駄なルールを生成していたことに気づいたので、削除するとさらに速くなりました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr sudoku25.cnf\nsudoku25.cnf                                   15625,925146 |time:     0.50\n #conflict:        314, #decision:         3452, #propagate:         110839 \n  Assignment|#rem:     3967, #ass:    11658, #elm:        0, prg%:  74.6112 \n      Clause|Remv:      243, LBD2:       27, Binc:   922541, Perm:   924411 \n     Restart|#BLK:        7, #RST:        0, span:        1, shft:        0 \n         EMA|tLBD:  41.1487, tASG:  52.2173, core:        0, \u002Fdpc:    10.99 \n    Conflict|eLBD:     5.74, cnfl:     1.63, bjmp:     1.14, \u002Fppc:   352.99 \n        misc|elim:        2, cviv:        0, #vbv:        0, \u002Fcpr:    10.47 \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku25.cnf\ns SATISFIABLE: sudoku25.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch1\u003ESudokuの符号化(part 3)\u003C\u002Fh1\u003E\n\u003Cp\u003ESudokuのルールは以下の2つである：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eセルには{多くとも,少なくとも}一つの数を割り当てる（最多・最少単一制約）\u003C\u002Fli\u003E\n\u003Cli\u003E行、列、ブロックなどのグループには全ての数をそれぞれ{多くとも,少なくとも}一回のみ割り当てる（拡大最多・最少単一制約）\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003E2のルールから実行時に以下が自動的に導出される：\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eグループにおいて、あるセルに一つの数が割り当てられたら、他のセルにはその数は割り当てられない(positive to negative implication)\u003C\u002Fli\u003E\n\u003Cli\u003Eグループにおいて、N-1セルにある数が割り当てられる可能性がなくなったら、残りセルにその数が割り当てられる(negatives to positive implication)\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eこれにより探索空間が単調に減少する。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-08-19-sudoku25.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-08-19-sudoku25.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});