__NUXT_JSONP__("/2020/2020-04-22-UNSATlog", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"UNSAT LOG, 2020, Apr.",subtitle:"Vol.1, No.4.",date:"2020-04-22T00:00:00.000Z",tags:["SAT","cadical","splr","unsatlog"],bodyContent:"# 0.3.3まだまだ\n\n非常事態宣言が発出されて外を出歩かなくなってしまったのでカバーに使えるような写真のストックがなくなっ\nてきました。プログラミングの時間は増えてそれなりに進展あり。\n\n# CaDiCaLにおける重要技術の絞り込み\n\n[CaDiCaL](https:\u002F\u002Fgithub.com\u002Farminbiere\u002Fcadical)の何がいいのかを調べるため[sat-bench](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench)でオプションを切り替えながら3SATを実行してみました。詳細な結果は[Importance of modern techniques in SAT solvers](\u002F2020\u002F2020-04-08-modern-techniques-of-SAT-solver\u002F) に書きました。\n\n結論として、今のSplrにないものをまとめると、\n\n* *walk* — ランダムウォークしてるんだ。\n* *stabilize* — モードを切り替えて'deep searc'hのようなことをやっているようだ。\n* *rephase* — なんだこれは？\n\nといったところ。なのでこれらの理解・検討を始めることにしました。\n\n# Issue 1: propagation pointerの導入\n\nその前にもっと低レベルな実装上の改善を発見。propagate関数内の最適化として、節ごとに監視リテラルを見つけるのにどこまでリテラルを辿ったかを覚えておいて次回の新監視リテラル探索時の無駄な検査を減らすというものがある。CaDiCaLのコメントでは、節ごとに4バイト増えるとあるので導入するのはリテラルへのポインタ（インデックス）だけのはず。簡単な変更なので導入してみた。確かに速くなりそうなのだが全然計算量の差が現れない。なんだかよく分からなくて一旦お手上げ。その後、CaDiCaLのソース中の別のコメントを読んで理解した。当初はバックトラック時にどこから探せばよいかを計算する（クリアする）ようにしていたが、もっと簡単に前回の検出インデックスからサイクリックに一周辿ればいいだけだった。この方針で実装し直してみると、この1年くらいで最大の高速化が実現できたようだ。\n\n![](\u002Fimg\u002F2020\u002F04-22\u002FCactus-2020-04-22-7.46.20.png)\n\n\n言われてみればなぜこんな簡単なことを思いつかなかったのだろうと反省しきり。監視リテラル対のような実装レベルでの改良はまだまだあったのだなあ。この時点で0.3.3をリリースする価値がでた。\n\n# Issue 2: Stabilizationの導入\n\nヒューリスティックレベルの高速化技法に話を戻します。ランダムウォークの導入は僕にとって全くの新技術なので後回しにして分かりやすそうなstabilizationに手をつけることにしました。どうも最良の割り当てを（部分的に？）再利用する枠組みのよう。コメントを読むと等比数列的にリスタートを止めているようなのでdeep search系の技術のようだ。とても簡単なのでProgressEvaluatorとして実装してみた。\n\nしかし、うーん、これまた微妙な結果。ついでにstabilizephaseにも手を出してみたけど同じく微妙。3SAT UF250では全然改善の兆しは見られないし、ベンチマーク問題で解ける問題のカテゴリが広がりそうなんだけどもそうも家なさそう。ずっとパラメータチューニングをやっているけども、なぜこんなに微妙なのだろうか。現在苦戦中です。\n\nさて、stabilizing modeを持ち込むとvar decayなんかのパラメータも再調整した方がいいかも。exploreとexploitの両方を一つのパラメータでカバーしなくてよくなるはずだよなあ。うーん、マルチエージェント化すべきだろうか。。。\n\n# NixOSでのCaDiCaLのパッケージング🎉\n\n余談だけど、すごくいい結果を出しているのでCaDiCaLをnixOSに取り込んでもらえるようにpull requestを投げてみました。大量に修正が必要だったけど取り込んでもらえました。リリースが遅れている20.03には入っています。ちなみにArch LinuxではAURに入っている。ということでNixOSコントリビューターデビューです。そのうちgratgenとgratchk-smlのpull requestも作ってみよう。\n\n# 今後の展望\n\n現在開発ブランチで3000行近いdiffになっているのでせめてdev-0.3.3にマージしたいのだけど性能が上がらぬことにはどうしようもない。せめて劣化しないところまで早急に持っていきたいと思う。最終的にはpropagation pointerのおかげで次バージョンのリリースは実験の結果待ちまで来たので時間の問題。ただし大改造が（また）入ったので0.4シリーズにしようと思う。\nひと段落ついたら、stabilizeは二つのソルバーを切り替える実装にすべきだと今強く思っているので、bidirectional searchのようなコンテキスト切り替えを可能にするフレームワーク、モジュラリティの導入がやりたい。その上でいろいろ実験したいと思っている。しかしそうすると今年のSAT Cometition 2020にも間に合わなさそうな。うーん頭痛い。",bodyHtml:"\u003Ch1\u003E0.3.3まだまだ\u003C\u002Fh1\u003E\n\u003Cp\u003E非常事態宣言が発出されて外を出歩かなくなってしまったのでカバーに使えるような写真のストックがなくなっ\nてきました。プログラミングの時間は増えてそれなりに進展あり。\u003C\u002Fp\u003E\n\u003Ch1\u003ECaDiCaLにおける重要技術の絞り込み\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Farminbiere\u002Fcadical\"\u003ECaDiCaL\u003C\u002Fa\u003Eの何がいいのかを調べるため\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench\"\u003Esat-bench\u003C\u002Fa\u003Eでオプションを切り替えながら3SATを実行してみました。詳細な結果は\u003Ca href=\"\u002F2020\u002F2020-04-08-modern-techniques-of-SAT-solver\u002F\"\u003EImportance of modern techniques in SAT solvers\u003C\u002Fa\u003E に書きました。\u003C\u002Fp\u003E\n\u003Cp\u003E結論として、今のSplrにないものをまとめると、\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cem\u003Ewalk\u003C\u002Fem\u003E — ランダムウォークしてるんだ。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003Estabilize\u003C\u002Fem\u003E — モードを切り替えて'deep searc'hのようなことをやっているようだ。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003Erephase\u003C\u002Fem\u003E — なんだこれは？\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eといったところ。なのでこれらの理解・検討を始めることにしました。\u003C\u002Fp\u003E\n\u003Ch1\u003EIssue 1: propagation pointerの導入\u003C\u002Fh1\u003E\n\u003Cp\u003Eその前にもっと低レベルな実装上の改善を発見。propagate関数内の最適化として、節ごとに監視リテラルを見つけるのにどこまでリテラルを辿ったかを覚えておいて次回の新監視リテラル探索時の無駄な検査を減らすというものがある。CaDiCaLのコメントでは、節ごとに4バイト増えるとあるので導入するのはリテラルへのポインタ（インデックス）だけのはず。簡単な変更なので導入してみた。確かに速くなりそうなのだが全然計算量の差が現れない。なんだかよく分からなくて一旦お手上げ。その後、CaDiCaLのソース中の別のコメントを読んで理解した。当初はバックトラック時にどこから探せばよいかを計算する（クリアする）ようにしていたが、もっと簡単に前回の検出インデックスからサイクリックに一周辿ればいいだけだった。この方針で実装し直してみると、この1年くらいで最大の高速化が実現できたようだ。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F04-22\u002FCactus-2020-04-22-7.46.20.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E言われてみればなぜこんな簡単なことを思いつかなかったのだろうと反省しきり。監視リテラル対のような実装レベルでの改良はまだまだあったのだなあ。この時点で0.3.3をリリースする価値がでた。\u003C\u002Fp\u003E\n\u003Ch1\u003EIssue 2: Stabilizationの導入\u003C\u002Fh1\u003E\n\u003Cp\u003Eヒューリスティックレベルの高速化技法に話を戻します。ランダムウォークの導入は僕にとって全くの新技術なので後回しにして分かりやすそうなstabilizationに手をつけることにしました。どうも最良の割り当てを（部分的に？）再利用する枠組みのよう。コメントを読むと等比数列的にリスタートを止めているようなのでdeep search系の技術のようだ。とても簡単なのでProgressEvaluatorとして実装してみた。\u003C\u002Fp\u003E\n\u003Cp\u003Eしかし、うーん、これまた微妙な結果。ついでにstabilizephaseにも手を出してみたけど同じく微妙。3SAT UF250では全然改善の兆しは見られないし、ベンチマーク問題で解ける問題のカテゴリが広がりそうなんだけどもそうも家なさそう。ずっとパラメータチューニングをやっているけども、なぜこんなに微妙なのだろうか。現在苦戦中です。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、stabilizing modeを持ち込むとvar decayなんかのパラメータも再調整した方がいいかも。exploreとexploitの両方を一つのパラメータでカバーしなくてよくなるはずだよなあ。うーん、マルチエージェント化すべきだろうか。。。\u003C\u002Fp\u003E\n\u003Ch1\u003ENixOSでのCaDiCaLのパッケージング🎉\u003C\u002Fh1\u003E\n\u003Cp\u003E余談だけど、すごくいい結果を出しているのでCaDiCaLをnixOSに取り込んでもらえるようにpull requestを投げてみました。大量に修正が必要だったけど取り込んでもらえました。リリースが遅れている20.03には入っています。ちなみにArch LinuxではAURに入っている。ということでNixOSコントリビューターデビューです。そのうちgratgenとgratchk-smlのpull requestも作ってみよう。\u003C\u002Fp\u003E\n\u003Ch1\u003E今後の展望\u003C\u002Fh1\u003E\n\u003Cp\u003E現在開発ブランチで3000行近いdiffになっているのでせめてdev-0.3.3にマージしたいのだけど性能が上がらぬことにはどうしようもない。せめて劣化しないところまで早急に持っていきたいと思う。最終的にはpropagation pointerのおかげで次バージョンのリリースは実験の結果待ちまで来たので時間の問題。ただし大改造が（また）入ったので0.4シリーズにしようと思う。\nひと段落ついたら、stabilizeは二つのソルバーを切り替える実装にすべきだと今強く思っているので、bidirectional searchのようなコンテキスト切り替えを可能にするフレームワーク、モジュラリティの導入がやりたい。その上でいろいろ実験したいと思っている。しかしそうすると今年のSAT Cometition 2020にも間に合わなさそうな。うーん頭痛い。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-04-22-UNSATlog.json",ext:".json",sourceBase:"2020-04-22-UNSATlog.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"UNSAT LOG, 2020, Apr."},subtitle:{writable:true,enumerable:true,value:"Vol.1, No.4."},date:{writable:true,enumerable:true,value:"2020-04-22T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","cadical","splr","unsatlog"]},bodyContent:{writable:true,enumerable:true,value:"# 0.3.3まだまだ\n\n非常事態宣言が発出されて外を出歩かなくなってしまったのでカバーに使えるような写真のストックがなくなっ\nてきました。プログラミングの時間は増えてそれなりに進展あり。\n\n# CaDiCaLにおける重要技術の絞り込み\n\n[CaDiCaL](https:\u002F\u002Fgithub.com\u002Farminbiere\u002Fcadical)の何がいいのかを調べるため[sat-bench](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench)でオプションを切り替えながら3SATを実行してみました。詳細な結果は[Importance of modern techniques in SAT solvers](\u002F2020\u002F2020-04-08-modern-techniques-of-SAT-solver\u002F) に書きました。\n\n結論として、今のSplrにないものをまとめると、\n\n* *walk* — ランダムウォークしてるんだ。\n* *stabilize* — モードを切り替えて'deep searc'hのようなことをやっているようだ。\n* *rephase* — なんだこれは？\n\nといったところ。なのでこれらの理解・検討を始めることにしました。\n\n# Issue 1: propagation pointerの導入\n\nその前にもっと低レベルな実装上の改善を発見。propagate関数内の最適化として、節ごとに監視リテラルを見つけるのにどこまでリテラルを辿ったかを覚えておいて次回の新監視リテラル探索時の無駄な検査を減らすというものがある。CaDiCaLのコメントでは、節ごとに4バイト増えるとあるので導入するのはリテラルへのポインタ（インデックス）だけのはず。簡単な変更なので導入してみた。確かに速くなりそうなのだが全然計算量の差が現れない。なんだかよく分からなくて一旦お手上げ。その後、CaDiCaLのソース中の別のコメントを読んで理解した。当初はバックトラック時にどこから探せばよいかを計算する（クリアする）ようにしていたが、もっと簡単に前回の検出インデックスからサイクリックに一周辿ればいいだけだった。この方針で実装し直してみると、この1年くらいで最大の高速化が実現できたようだ。\n\n![](\u002Fimg\u002F2020\u002F04-22\u002FCactus-2020-04-22-7.46.20.png)\n\n\n言われてみればなぜこんな簡単なことを思いつかなかったのだろうと反省しきり。監視リテラル対のような実装レベルでの改良はまだまだあったのだなあ。この時点で0.3.3をリリースする価値がでた。\n\n# Issue 2: Stabilizationの導入\n\nヒューリスティックレベルの高速化技法に話を戻します。ランダムウォークの導入は僕にとって全くの新技術なので後回しにして分かりやすそうなstabilizationに手をつけることにしました。どうも最良の割り当てを（部分的に？）再利用する枠組みのよう。コメントを読むと等比数列的にリスタートを止めているようなのでdeep search系の技術のようだ。とても簡単なのでProgressEvaluatorとして実装してみた。\n\nしかし、うーん、これまた微妙な結果。ついでにstabilizephaseにも手を出してみたけど同じく微妙。3SAT UF250では全然改善の兆しは見られないし、ベンチマーク問題で解ける問題のカテゴリが広がりそうなんだけどもそうも家なさそう。ずっとパラメータチューニングをやっているけども、なぜこんなに微妙なのだろうか。現在苦戦中です。\n\nさて、stabilizing modeを持ち込むとvar decayなんかのパラメータも再調整した方がいいかも。exploreとexploitの両方を一つのパラメータでカバーしなくてよくなるはずだよなあ。うーん、マルチエージェント化すべきだろうか。。。\n\n# NixOSでのCaDiCaLのパッケージング🎉\n\n余談だけど、すごくいい結果を出しているのでCaDiCaLをnixOSに取り込んでもらえるようにpull requestを投げてみました。大量に修正が必要だったけど取り込んでもらえました。リリースが遅れている20.03には入っています。ちなみにArch LinuxではAURに入っている。ということでNixOSコントリビューターデビューです。そのうちgratgenとgratchk-smlのpull requestも作ってみよう。\n\n# 今後の展望\n\n現在開発ブランチで3000行近いdiffになっているのでせめてdev-0.3.3にマージしたいのだけど性能が上がらぬことにはどうしようもない。せめて劣化しないところまで早急に持っていきたいと思う。最終的にはpropagation pointerのおかげで次バージョンのリリースは実験の結果待ちまで来たので時間の問題。ただし大改造が（また）入ったので0.4シリーズにしようと思う。\nひと段落ついたら、stabilizeは二つのソルバーを切り替える実装にすべきだと今強く思っているので、bidirectional searchのようなコンテキスト切り替えを可能にするフレームワーク、モジュラリティの導入がやりたい。その上でいろいろ実験したいと思っている。しかしそうすると今年のSAT Cometition 2020にも間に合わなさそうな。うーん頭痛い。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch1\u003E0.3.3まだまだ\u003C\u002Fh1\u003E\n\u003Cp\u003E非常事態宣言が発出されて外を出歩かなくなってしまったのでカバーに使えるような写真のストックがなくなっ\nてきました。プログラミングの時間は増えてそれなりに進展あり。\u003C\u002Fp\u003E\n\u003Ch1\u003ECaDiCaLにおける重要技術の絞り込み\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Farminbiere\u002Fcadical\"\u003ECaDiCaL\u003C\u002Fa\u003Eの何がいいのかを調べるため\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench\"\u003Esat-bench\u003C\u002Fa\u003Eでオプションを切り替えながら3SATを実行してみました。詳細な結果は\u003Ca href=\"\u002F2020\u002F2020-04-08-modern-techniques-of-SAT-solver\u002F\"\u003EImportance of modern techniques in SAT solvers\u003C\u002Fa\u003E に書きました。\u003C\u002Fp\u003E\n\u003Cp\u003E結論として、今のSplrにないものをまとめると、\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cem\u003Ewalk\u003C\u002Fem\u003E — ランダムウォークしてるんだ。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003Estabilize\u003C\u002Fem\u003E — モードを切り替えて'deep searc'hのようなことをやっているようだ。\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003Erephase\u003C\u002Fem\u003E — なんだこれは？\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eといったところ。なのでこれらの理解・検討を始めることにしました。\u003C\u002Fp\u003E\n\u003Ch1\u003EIssue 1: propagation pointerの導入\u003C\u002Fh1\u003E\n\u003Cp\u003Eその前にもっと低レベルな実装上の改善を発見。propagate関数内の最適化として、節ごとに監視リテラルを見つけるのにどこまでリテラルを辿ったかを覚えておいて次回の新監視リテラル探索時の無駄な検査を減らすというものがある。CaDiCaLのコメントでは、節ごとに4バイト増えるとあるので導入するのはリテラルへのポインタ（インデックス）だけのはず。簡単な変更なので導入してみた。確かに速くなりそうなのだが全然計算量の差が現れない。なんだかよく分からなくて一旦お手上げ。その後、CaDiCaLのソース中の別のコメントを読んで理解した。当初はバックトラック時にどこから探せばよいかを計算する（クリアする）ようにしていたが、もっと簡単に前回の検出インデックスからサイクリックに一周辿ればいいだけだった。この方針で実装し直してみると、この1年くらいで最大の高速化が実現できたようだ。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F04-22\u002FCactus-2020-04-22-7.46.20.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E言われてみればなぜこんな簡単なことを思いつかなかったのだろうと反省しきり。監視リテラル対のような実装レベルでの改良はまだまだあったのだなあ。この時点で0.3.3をリリースする価値がでた。\u003C\u002Fp\u003E\n\u003Ch1\u003EIssue 2: Stabilizationの導入\u003C\u002Fh1\u003E\n\u003Cp\u003Eヒューリスティックレベルの高速化技法に話を戻します。ランダムウォークの導入は僕にとって全くの新技術なので後回しにして分かりやすそうなstabilizationに手をつけることにしました。どうも最良の割り当てを（部分的に？）再利用する枠組みのよう。コメントを読むと等比数列的にリスタートを止めているようなのでdeep search系の技術のようだ。とても簡単なのでProgressEvaluatorとして実装してみた。\u003C\u002Fp\u003E\n\u003Cp\u003Eしかし、うーん、これまた微妙な結果。ついでにstabilizephaseにも手を出してみたけど同じく微妙。3SAT UF250では全然改善の兆しは見られないし、ベンチマーク問題で解ける問題のカテゴリが広がりそうなんだけどもそうも家なさそう。ずっとパラメータチューニングをやっているけども、なぜこんなに微妙なのだろうか。現在苦戦中です。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、stabilizing modeを持ち込むとvar decayなんかのパラメータも再調整した方がいいかも。exploreとexploitの両方を一つのパラメータでカバーしなくてよくなるはずだよなあ。うーん、マルチエージェント化すべきだろうか。。。\u003C\u002Fp\u003E\n\u003Ch1\u003ENixOSでのCaDiCaLのパッケージング🎉\u003C\u002Fh1\u003E\n\u003Cp\u003E余談だけど、すごくいい結果を出しているのでCaDiCaLをnixOSに取り込んでもらえるようにpull requestを投げてみました。大量に修正が必要だったけど取り込んでもらえました。リリースが遅れている20.03には入っています。ちなみにArch LinuxではAURに入っている。ということでNixOSコントリビューターデビューです。そのうちgratgenとgratchk-smlのpull requestも作ってみよう。\u003C\u002Fp\u003E\n\u003Ch1\u003E今後の展望\u003C\u002Fh1\u003E\n\u003Cp\u003E現在開発ブランチで3000行近いdiffになっているのでせめてdev-0.3.3にマージしたいのだけど性能が上がらぬことにはどうしようもない。せめて劣化しないところまで早急に持っていきたいと思う。最終的にはpropagation pointerのおかげで次バージョンのリリースは実験の結果待ちまで来たので時間の問題。ただし大改造が（また）入ったので0.4シリーズにしようと思う。\nひと段落ついたら、stabilizeは二つのソルバーを切り替える実装にすべきだと今強く思っているので、bidirectional searchのようなコンテキスト切り替えを可能にするフレームワーク、モジュラリティの導入がやりたい。その上でいろいろ実験したいと思っている。しかしそうすると今年のSAT Cometition 2020にも間に合わなさそうな。うーん頭痛い。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-04-22-UNSATlog.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-04-22-UNSATlog.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});