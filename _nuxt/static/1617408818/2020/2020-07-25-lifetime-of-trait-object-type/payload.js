__NUXT_JSONP__("/2020/2020-07-25-lifetime-of-trait-object-type", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"まとめて借用",subtitle:"in Rust",date:"2020-08-05T00:00:00.000Z",tags:["Rust"],bodyContent:"オブジェクトからフィールドを借用したい。\n借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。\nよくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。\n\n### Box\n\n困った時は一旦スタックに持っていく、そのために `Box` を使う、という定石を使ってみるとこうなる。\n\n```rust\npub trait Export\u003C'a, T\u003E {\n    fn exports(&'a self) -\u003E Box\u003CT\u003E;\n}\n\nimpl\u003C'a\u003E Export\u003C'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E for Restarter {\n    fn exports(&'a self) -\u003E Box\u003C(&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E {\n        Box::from((&self.asg.ema, &self.lbd.ema, &self.mld.ema, &self.mva.ema))\n    }\n}\n```\n\n問題なくコンパイルできる。使うときは一回derefする。\n\n```rust\n    let (rst_asg, rst_lbd, _, _) = *rst.exports();\n```\n\n### タプル\n\nタプルに置き換えても問題ない。\n\n```rust\npub trait Export\u003C'a, T\u003E {\n    fn exports(&'a self) -\u003E T;\n}\n\nimpl\u003C'a\u003E Export\u003C'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E for Restarter {\n    fn exports(&'a self) -\u003E (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2) {\n\t    (&self.asg.ema, &self.lbd.ema, &self.mld.ema, &self.mva.ema)\n    }\n}\n```\n\n### CoWs in tuple\n\nさらに一般化して定数データもコピーなしで返すために[CoW](https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fborrow\u002Fenum.Cow.html)でくるんでも全然問題ない。\n\n```rust\nuse std::borrow::Cow;\n\ntrait Export\u003C'a\u003E {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E);\n}\n\nimpl\u003C'a\u003E Export\u003C'a\u003E for Restarter {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E) {\n        (Cow::Owned(&self.asg.ema), Cow::Owned(&self.lbd.ema))\n    }\n}\n```\n\nただし、これは2要素タプルに特定してしまっている。\n\n一般化した問題に戻して、\n\n```rust\ntrait Export\u003C'a, T\u003E {\n    fn export(&'a self) -\u003E T;\n}\n```\n\nとするなら、\n\n```rust\nimpl\u003C'a\u003E Export\u003C'a, (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E)\u003E for Restarter {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E) {\n        (Cow::Owned(&self.asg.ema), Cow::Owned(&self.lbd.ema))\n    }\n}\n```\n\nとすればいい。どれも全く同じことだった。\n\n# エンバグ\n\nなお、これを\n\n```rust\nimpl\u003C'a\u003E Export\u003C'a, (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E)\u003E for Restarter\n```\n\nなどとして、ライフタイム制約が不十分なものに（うっかり）してしまうと、\n\n```\nerror[E0308]: method not compatible with trait\n   --\u003E src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&'a self) -\u003E (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &types::Ema2\u003E, std::borrow::Cow\u003C'_, _\u003E)`\n               found fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &'a types::Ema2\u003E, std::borrow::Cow\u003C'_, _\u003E)`\n```\n\nだとか、\n\n```\nerror[E0308]: method not compatible with trait\n   --\u003E src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &types::Ema2\u003E, std::borrow::Cow\u003C'_, &types::Ema2\u003E)`\n               found fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &'a types::Ema2\u003E, std::borrow::Cow\u003C'_, &'a types::Ema2\u003E)`\nnote: the lifetime `'_` as defined on the impl at 832:33...\n```\n\nと言われてしまうが、まあそりゃ当たり前のことである。\n\n以下は単なる文法間違いがもたらしたエラー。\n\n```\nerror: lifetime in trait object type must be followed by `+`\n  --\u003E src\u002Ftypes.rs:32:38\n   |\n32 |     fn exports(&'a self) -\u003E (CoW('a, Ema), CoW('a, Ema));\n   |                                  ^^\n```\n\nちゃんとライフタイム制約まで目を配りましょうというだけのことでした。",bodyHtml:"\u003Cp\u003Eオブジェクトからフィールドを借用したい。\n借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。\nよくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。\u003C\u002Fp\u003E\n\u003Ch3\u003EBox\u003C\u002Fh3\u003E\n\u003Cp\u003E困った時は一旦スタックに持っていく、そのために \u003Ccode\u003EBox\u003C\u002Fcode\u003E を使う、という定石を使ってみるとこうなる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E&lt;T&gt;;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E&lt;(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; {\n        \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E::from((&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mld.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mva.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E問題なくコンパイルできる。使うときは一回derefする。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E (rst_asg, rst_lbd, _, _) = *rst.exports();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eタプル\u003C\u002Fh3\u003E\n\u003Cp\u003Eタプルに置き換えても問題ない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; T;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2) {\n\t    (&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mld.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mva.ema)\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003ECoWs in tuple\u003C\u002Fh3\u003E\n\u003Cp\u003Eさらに一般化して定数データもコピーなしで返すために\u003Ca href=\"https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fborrow\u002Fenum.Cow.html\"\u003ECoW\u003C\u002Fa\u003Eでくるんでも全然問題ない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Euse\u003C\u002Fspan\u003E std::borrow::Cow;\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;);\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;) {\n        (Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema), Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eただし、これは2要素タプルに特定してしまっている。\u003C\u002Fp\u003E\n\u003Cp\u003E一般化した問題に戻して、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; T;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eとするなら、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;) {\n        (Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema), Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eとすればいい。どれも全く同じことだった。\u003C\u002Fp\u003E\n\u003Ch1\u003Eエンバグ\u003C\u002Fh1\u003E\n\u003Cp\u003Eなお、これを\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eなどとして、ライフタイム制約が不十分なものに（うっかり）してしまうと、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror[E0308]: method not compatible with trait\n   --&gt; src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&amp;'a self) -&gt; (Cow&lt;'a, &amp;'a Ema2&gt;, Cow&lt;'a, &amp;'a Ema2&gt;) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;, std::borrow::Cow&lt;'_, _&gt;)`\n               found fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;, std::borrow::Cow&lt;'_, _&gt;)`\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eだとか、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror[E0308]: method not compatible with trait\n   --&gt; src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&amp;'a self) -&gt; (Cow&lt;'a, &amp;Ema2&gt;, Cow&lt;'a, &amp;Ema2&gt;) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;, std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;)`\n               found fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;, std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;)`\nnote: the lifetime `'_` as defined on the impl at 832:33...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eと言われてしまうが、まあそりゃ当たり前のことである。\u003C\u002Fp\u003E\n\u003Cp\u003E以下は単なる文法間違いがもたらしたエラー。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror: lifetime in trait object type must be followed by `+`\n  --&gt; src\u002Ftypes.rs:32:38\n   |\n32 |     fn exports(&amp;'a self) -&gt; (CoW('a, Ema), CoW('a, Ema));\n   |                                  ^^\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eちゃんとライフタイム制約まで目を配りましょうというだけのことでした。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-07-25-lifetime-of-trait-object-type.json",ext:".json",sourceBase:"2020-07-25-lifetime-of-trait-object-type.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"まとめて借用"},subtitle:{writable:true,enumerable:true,value:"in Rust"},date:{writable:true,enumerable:true,value:"2020-08-05T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Rust"]},bodyContent:{writable:true,enumerable:true,value:"オブジェクトからフィールドを借用したい。\n借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。\nよくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。\n\n### Box\n\n困った時は一旦スタックに持っていく、そのために `Box` を使う、という定石を使ってみるとこうなる。\n\n```rust\npub trait Export\u003C'a, T\u003E {\n    fn exports(&'a self) -\u003E Box\u003CT\u003E;\n}\n\nimpl\u003C'a\u003E Export\u003C'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E for Restarter {\n    fn exports(&'a self) -\u003E Box\u003C(&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E {\n        Box::from((&self.asg.ema, &self.lbd.ema, &self.mld.ema, &self.mva.ema))\n    }\n}\n```\n\n問題なくコンパイルできる。使うときは一回derefする。\n\n```rust\n    let (rst_asg, rst_lbd, _, _) = *rst.exports();\n```\n\n### タプル\n\nタプルに置き換えても問題ない。\n\n```rust\npub trait Export\u003C'a, T\u003E {\n    fn exports(&'a self) -\u003E T;\n}\n\nimpl\u003C'a\u003E Export\u003C'a, (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2)\u003E for Restarter {\n    fn exports(&'a self) -\u003E (&'a Ema2, &'a Ema2, &'a Ema2, &'a Ema2) {\n\t    (&self.asg.ema, &self.lbd.ema, &self.mld.ema, &self.mva.ema)\n    }\n}\n```\n\n### CoWs in tuple\n\nさらに一般化して定数データもコピーなしで返すために[CoW](https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fborrow\u002Fenum.Cow.html)でくるんでも全然問題ない。\n\n```rust\nuse std::borrow::Cow;\n\ntrait Export\u003C'a\u003E {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E);\n}\n\nimpl\u003C'a\u003E Export\u003C'a\u003E for Restarter {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E) {\n        (Cow::Owned(&self.asg.ema), Cow::Owned(&self.lbd.ema))\n    }\n}\n```\n\nただし、これは2要素タプルに特定してしまっている。\n\n一般化した問題に戻して、\n\n```rust\ntrait Export\u003C'a, T\u003E {\n    fn export(&'a self) -\u003E T;\n}\n```\n\nとするなら、\n\n```rust\nimpl\u003C'a\u003E Export\u003C'a, (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E)\u003E for Restarter {\n    fn export(&'a self) -\u003E (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E) {\n        (Cow::Owned(&self.asg.ema), Cow::Owned(&self.lbd.ema))\n    }\n}\n```\n\nとすればいい。どれも全く同じことだった。\n\n# エンバグ\n\nなお、これを\n\n```rust\nimpl\u003C'a\u003E Export\u003C'a, (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E)\u003E for Restarter\n```\n\nなどとして、ライフタイム制約が不十分なものに（うっかり）してしまうと、\n\n```\nerror[E0308]: method not compatible with trait\n   --\u003E src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&'a self) -\u003E (Cow\u003C'a, &'a Ema2\u003E, Cow\u003C'a, &'a Ema2\u003E) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &types::Ema2\u003E, std::borrow::Cow\u003C'_, _\u003E)`\n               found fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &'a types::Ema2\u003E, std::borrow::Cow\u003C'_, _\u003E)`\n```\n\nだとか、\n\n```\nerror[E0308]: method not compatible with trait\n   --\u003E src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&'a self) -\u003E (Cow\u003C'a, &Ema2\u003E, Cow\u003C'a, &Ema2\u003E) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &types::Ema2\u003E, std::borrow::Cow\u003C'_, &types::Ema2\u003E)`\n               found fn pointer `fn(&'a solver::restart::Restarter) -\u003E (std::borrow::Cow\u003C'_, &'a types::Ema2\u003E, std::borrow::Cow\u003C'_, &'a types::Ema2\u003E)`\nnote: the lifetime `'_` as defined on the impl at 832:33...\n```\n\nと言われてしまうが、まあそりゃ当たり前のことである。\n\n以下は単なる文法間違いがもたらしたエラー。\n\n```\nerror: lifetime in trait object type must be followed by `+`\n  --\u003E src\u002Ftypes.rs:32:38\n   |\n32 |     fn exports(&'a self) -\u003E (CoW('a, Ema), CoW('a, Ema));\n   |                                  ^^\n```\n\nちゃんとライフタイム制約まで目を配りましょうというだけのことでした。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003Eオブジェクトからフィールドを借用したい。\n借用したいオブジェクトの型がいくつもあり、型ごとに借用したい個数が違うので、できるだけgenericなtrait化が望ましい。\nよくわかってないとこの程度のことでもつまづいてしまうのでメモしておく。\u003C\u002Fp\u003E\n\u003Ch3\u003EBox\u003C\u002Fh3\u003E\n\u003Cp\u003E困った時は一旦スタックに持っていく、そのために \u003Ccode\u003EBox\u003C\u002Fcode\u003E を使う、という定石を使ってみるとこうなる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E&lt;T&gt;;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E&lt;(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; {\n        \u003Cspan class=\"hljs-built_in\"\u003EBox\u003C\u002Fspan\u003E::from((&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mld.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mva.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E問題なくコンパイルできる。使うときは一回derefする。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E (rst_asg, rst_lbd, _, _) = *rst.exports();\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eタプル\u003C\u002Fh3\u003E\n\u003Cp\u003Eタプルに置き換えても問題ない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; T;\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexports\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2) {\n\t    (&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mld.ema, &amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.mva.ema)\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003ECoWs in tuple\u003C\u002Fh3\u003E\n\u003Cp\u003Eさらに一般化して定数データもコピーなしで返すために\u003Ca href=\"https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fborrow\u002Fenum.Cow.html\"\u003ECoW\u003C\u002Fa\u003Eでくるんでも全然問題ない。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Euse\u003C\u002Fspan\u003E std::borrow::Cow;\n\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;);\n}\n\n\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;) {\n        (Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema), Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eただし、これは2要素タプルに特定してしまっている。\u003C\u002Fp\u003E\n\u003Cp\u003E一般化した問題に戻して、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Etrait\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EExport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, T&gt; {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; T;\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eとするなら、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter {\n    \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Eexport\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(&amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E) -&gt; (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E Ema2&gt;) {\n        (Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.asg.ema), Cow::Owned(&amp;\u003Cspan class=\"hljs-keyword\"\u003Eself\u003C\u002Fspan\u003E.lbd.ema))\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eとすればいい。どれも全く同じことだった。\u003C\u002Fp\u003E\n\u003Ch1\u003Eエンバグ\u003C\u002Fh1\u003E\n\u003Cp\u003Eなお、これを\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eimpl\u003C\u002Fspan\u003E&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E&gt; Export&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, (Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;, Cow&lt;\u003Cspan class=\"hljs-symbol\"\u003E&#x27;a\u003C\u002Fspan\u003E, &amp;Ema2&gt;)&gt; \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E Restarter\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eなどとして、ライフタイム制約が不十分なものに（うっかり）してしまうと、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror[E0308]: method not compatible with trait\n   --&gt; src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&amp;'a self) -&gt; (Cow&lt;'a, &amp;'a Ema2&gt;, Cow&lt;'a, &amp;'a Ema2&gt;) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;, std::borrow::Cow&lt;'_, _&gt;)`\n               found fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;, std::borrow::Cow&lt;'_, _&gt;)`\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eだとか、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror[E0308]: method not compatible with trait\n   --&gt; src\u002Fsolver\u002Frestart.rs:833:5\n    |\n833 |     fn export(&amp;'a self) -&gt; (Cow&lt;'a, &amp;Ema2&gt;, Cow&lt;'a, &amp;Ema2&gt;) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;, std::borrow::Cow&lt;'_, &amp;types::Ema2&gt;)`\n               found fn pointer `fn(&amp;'a solver::restart::Restarter) -&gt; (std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;, std::borrow::Cow&lt;'_, &amp;'a types::Ema2&gt;)`\nnote: the lifetime `'_` as defined on the impl at 832:33...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eと言われてしまうが、まあそりゃ当たり前のことである。\u003C\u002Fp\u003E\n\u003Cp\u003E以下は単なる文法間違いがもたらしたエラー。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Eerror: lifetime in trait object type must be followed by `+`\n  --&gt; src\u002Ftypes.rs:32:38\n   |\n32 |     fn exports(&amp;'a self) -&gt; (CoW('a, Ema), CoW('a, Ema));\n   |                                  ^^\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eちゃんとライフタイム制約まで目を配りましょうというだけのことでした。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-07-25-lifetime-of-trait-object-type.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-07-25-lifetime-of-trait-object-type.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});