__NUXT_JSONP__("/2019/2019-03-22-rust-program-with-resources-on-nixos", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Install Rust programs with resources on NixOS",subtitle:"リソース付きRustプログラムのNixOSへのインストール",date:"2019-03-22T00:00:00.000Z",tags:["NixOS","Rust"],bodyContent:"## 目標\n\n同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。\n\n## 方法\n\n1. build.rsで頑張る →試してません\n1. 最終保存場所をソースに書き込む\n\nここでは2番目の手法についてメモしておきます。\n\n\n## 前提条件\n\nrustPlatform.buildRustProgramを使っている\n\n## 実現手段\n\n1. patchPhaseでsedで`$out`をソースに埋め込む\n2. PostInstallで同梱ファイルを`$out`にコピーする\n\n# 実例\n\n[sat-bench](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench)はSATソルバーのベンチマークをするためのユーティリティなので、\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\nそのためにコンパイル時にpwdを`env!(\"PWD\")`で埋め込んでいるが、一方コマンドラインからディレクトリを指定す\nるためのコマンドオプションも用意した。\n\nしかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\nディレクトリを指定しているのは以下の`Config::lib_dir`のデフォルト値。\n\n```rust\n#[structopt(name = \"sat-bench\", about = \"Run simple SAT benchmarks\")]\nstruct Config {\n    ...\n    \u002F\u002F\u002F directory holding instances\n    #[structopt(long = \"lib\", default_value = \"\")]\n    lib_dir: String,\n```\n\n（別件だが、ここで`default_value = env!(\"PWD\")`とか書きたいのだが、\nそうするとコンパイルエラーになってしまう。残念。）\n\nなのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは`$out\u002Flib`とした。\n\n```nix\n  satbench = super.rustPlatform.buildRustPackage rec {\n    ...\n    patchPhase = ''\n      sed -i \"s|long = \\\"lib\\\", default_value = \\\"\\\"|long = \\\"lib\\\", default_value = \\\"$out\u002Flib\\\"|\" src\u002Fbin\u002Fsat-bench.rs\n    '';\n```\n\nコンパイルやインストールの挙動はいじらないように`postInstall`フックを使って、\nインストール後の処理としてファイルをターゲットディレクトリ`$out\u002Flib`にコピー。\n\n```nix\n    postInstall = ''\n      mkdir -p $out\u002Flib\n      cp -r 3-SAT SAT09 SR2015 $out\u002Flib\u002F\n    '';\n```\n\nこのようなnix式を評価してパッケージをインストールすると、\n以下のように適切なデフォルト値が埋め込まれているのがわかる。\n\n```\n$ sat-bench --help\n...\n\nOPTIONS:\n    -K, --aux-key \u003Caux_key\u003E   [default: ]\n    -H, --header \u003Cheader\u003E     [default: ]\n        --lib \u003Clib_dir\u003E       [default: \u002Fnix\u002Fstore\u002F63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4\u002Flib]\n    -M, --message \u003Cmessage\u003E   [default: ]\n...  \n```\n\nめでたし。",bodyHtml:"\u003Ch2\u003E目標\u003C\u002Fh2\u003E\n\u003Cp\u003E同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。\u003C\u002Fp\u003E\n\u003Ch2\u003E方法\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003Ebuild.rsで頑張る →試してません\u003C\u002Fli\u003E\n\u003Cli\u003E最終保存場所をソースに書き込む\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eここでは2番目の手法についてメモしておきます。\u003C\u002Fp\u003E\n\u003Ch2\u003E前提条件\u003C\u002Fh2\u003E\n\u003Cp\u003ErustPlatform.buildRustProgramを使っている\u003C\u002Fp\u003E\n\u003Ch2\u003E実現手段\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003EpatchPhaseでsedで\u003Ccode\u003E$out\u003C\u002Fcode\u003Eをソースに埋め込む\u003C\u002Fli\u003E\n\u003Cli\u003EPostInstallで同梱ファイルを\u003Ccode\u003E$out\u003C\u002Fcode\u003Eにコピーする\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch1\u003E実例\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench\"\u003Esat-bench\u003C\u002Fa\u003EはSATソルバーのベンチマークをするためのユーティリティなので、\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\nそのためにコンパイル時にpwdを\u003Ccode\u003Eenv!(&quot;PWD&quot;)\u003C\u002Fcode\u003Eで埋め込んでいるが、一方コマンドラインからディレクトリを指定す\nるためのコマンドオプションも用意した。\u003C\u002Fp\u003E\n\u003Cp\u003Eしかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\nディレクトリを指定しているのは以下の\u003Ccode\u003EConfig::lib_dir\u003C\u002Fcode\u003Eのデフォルト値。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[structopt(name = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;sat-bench&quot;\u003C\u002Fspan\u003E, about = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;Run simple SAT benchmarks&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EConfig\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n    ...\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F\u002F directory holding instances\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E#[structopt(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;lib&quot;\u003C\u002Fspan\u003E, default_value = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n    lib_dir: \u003Cspan class=\"hljs-built_in\"\u003EString\u003C\u002Fspan\u003E,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E（別件だが、ここで\u003Ccode\u003Edefault_value = env!(&quot;PWD&quot;)\u003C\u002Fcode\u003Eとか書きたいのだが、\nそうするとコンパイルエラーになってしまう。残念。）\u003C\u002Fp\u003E\n\u003Cp\u003Eなのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは\u003Ccode\u003E$out\u002Flib\u003C\u002Fcode\u003Eとした。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003Esatbench\u003C\u002Fspan\u003E = super.rustPlatform.buildRustPackage \u003Cspan class=\"hljs-keyword\"\u003Erec\u003C\u002Fspan\u003E {\n    ...\n    \u003Cspan class=\"hljs-attr\"\u003EpatchPhase\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n      sed -i &quot;s|long = \\&quot;lib\\&quot;, default_value = \\&quot;\\&quot;|long = \\&quot;lib\\&quot;, default_value = \\&quot;$out\u002Flib\\&quot;|&quot; src\u002Fbin\u002Fsat-bench.rs\n    &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eコンパイルやインストールの挙動はいじらないように\u003Ccode\u003EpostInstall\u003C\u002Fcode\u003Eフックを使って、\nインストール後の処理としてファイルをターゲットディレクトリ\u003Ccode\u003E$out\u002Flib\u003C\u002Fcode\u003Eにコピー。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003EpostInstall\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n      mkdir -p $out\u002Flib\n      cp -r 3-SAT SAT09 SR2015 $out\u002Flib\u002F\n    &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこのようなnix式を評価してパッケージをインストールすると、\n以下のように適切なデフォルト値が埋め込まれているのがわかる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E$ sat-bench --help\n...\n\nOPTIONS:\n    -K, --aux-key &lt;aux_key&gt;   [default: ]\n    -H, --header &lt;header&gt;     [default: ]\n        --lib &lt;lib_dir&gt;       [default: \u002Fnix\u002Fstore\u002F63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4\u002Flib]\n    -M, --message &lt;message&gt;   [default: ]\n...  \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eめでたし。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2019",base:"2019-03-22-rust-program-with-resources-on-nixos.json",ext:".json",sourceBase:"2019-03-22-rust-program-with-resources-on-nixos.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Install Rust programs with resources on NixOS"},subtitle:{writable:true,enumerable:true,value:"リソース付きRustプログラムのNixOSへのインストール"},date:{writable:true,enumerable:true,value:"2019-03-22T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["NixOS","Rust"]},bodyContent:{writable:true,enumerable:true,value:"## 目標\n\n同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。\n\n## 方法\n\n1. build.rsで頑張る →試してません\n1. 最終保存場所をソースに書き込む\n\nここでは2番目の手法についてメモしておきます。\n\n\n## 前提条件\n\nrustPlatform.buildRustProgramを使っている\n\n## 実現手段\n\n1. patchPhaseでsedで`$out`をソースに埋め込む\n2. PostInstallで同梱ファイルを`$out`にコピーする\n\n# 実例\n\n[sat-bench](https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench)はSATソルバーのベンチマークをするためのユーティリティなので、\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\nそのためにコンパイル時にpwdを`env!(\"PWD\")`で埋め込んでいるが、一方コマンドラインからディレクトリを指定す\nるためのコマンドオプションも用意した。\n\nしかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\nディレクトリを指定しているのは以下の`Config::lib_dir`のデフォルト値。\n\n```rust\n#[structopt(name = \"sat-bench\", about = \"Run simple SAT benchmarks\")]\nstruct Config {\n    ...\n    \u002F\u002F\u002F directory holding instances\n    #[structopt(long = \"lib\", default_value = \"\")]\n    lib_dir: String,\n```\n\n（別件だが、ここで`default_value = env!(\"PWD\")`とか書きたいのだが、\nそうするとコンパイルエラーになってしまう。残念。）\n\nなのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは`$out\u002Flib`とした。\n\n```nix\n  satbench = super.rustPlatform.buildRustPackage rec {\n    ...\n    patchPhase = ''\n      sed -i \"s|long = \\\"lib\\\", default_value = \\\"\\\"|long = \\\"lib\\\", default_value = \\\"$out\u002Flib\\\"|\" src\u002Fbin\u002Fsat-bench.rs\n    '';\n```\n\nコンパイルやインストールの挙動はいじらないように`postInstall`フックを使って、\nインストール後の処理としてファイルをターゲットディレクトリ`$out\u002Flib`にコピー。\n\n```nix\n    postInstall = ''\n      mkdir -p $out\u002Flib\n      cp -r 3-SAT SAT09 SR2015 $out\u002Flib\u002F\n    '';\n```\n\nこのようなnix式を評価してパッケージをインストールすると、\n以下のように適切なデフォルト値が埋め込まれているのがわかる。\n\n```\n$ sat-bench --help\n...\n\nOPTIONS:\n    -K, --aux-key \u003Caux_key\u003E   [default: ]\n    -H, --header \u003Cheader\u003E     [default: ]\n        --lib \u003Clib_dir\u003E       [default: \u002Fnix\u002Fstore\u002F63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4\u002Flib]\n    -M, --message \u003Cmessage\u003E   [default: ]\n...  \n```\n\nめでたし。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch2\u003E目標\u003C\u002Fh2\u003E\n\u003Cp\u003E同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。\u003C\u002Fp\u003E\n\u003Ch2\u003E方法\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003Ebuild.rsで頑張る →試してません\u003C\u002Fli\u003E\n\u003Cli\u003E最終保存場所をソースに書き込む\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cp\u003Eここでは2番目の手法についてメモしておきます。\u003C\u002Fp\u003E\n\u003Ch2\u003E前提条件\u003C\u002Fh2\u003E\n\u003Cp\u003ErustPlatform.buildRustProgramを使っている\u003C\u002Fp\u003E\n\u003Ch2\u003E実現手段\u003C\u002Fh2\u003E\n\u003Col\u003E\n\u003Cli\u003EpatchPhaseでsedで\u003Ccode\u003E$out\u003C\u002Fcode\u003Eをソースに埋め込む\u003C\u002Fli\u003E\n\u003Cli\u003EPostInstallで同梱ファイルを\u003Ccode\u003E$out\u003C\u002Fcode\u003Eにコピーする\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch1\u003E実例\u003C\u002Fh1\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshnarazk\u002FSAT-bench\"\u003Esat-bench\u003C\u002Fa\u003EはSATソルバーのベンチマークをするためのユーティリティなので、\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\nそのためにコンパイル時にpwdを\u003Ccode\u003Eenv!(&quot;PWD&quot;)\u003C\u002Fcode\u003Eで埋め込んでいるが、一方コマンドラインからディレクトリを指定す\nるためのコマンドオプションも用意した。\u003C\u002Fp\u003E\n\u003Cp\u003Eしかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\nディレクトリを指定しているのは以下の\u003Ccode\u003EConfig::lib_dir\u003C\u002Fcode\u003Eのデフォルト値。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[structopt(name = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;sat-bench&quot;\u003C\u002Fspan\u003E, about = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;Run simple SAT benchmarks&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003EConfig\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E {\n    ...\n    \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F\u002F directory holding instances\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-meta\"\u003E#[structopt(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;lib&quot;\u003C\u002Fspan\u003E, default_value = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n    lib_dir: \u003Cspan class=\"hljs-built_in\"\u003EString\u003C\u002Fspan\u003E,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E（別件だが、ここで\u003Ccode\u003Edefault_value = env!(&quot;PWD&quot;)\u003C\u002Fcode\u003Eとか書きたいのだが、\nそうするとコンパイルエラーになってしまう。残念。）\u003C\u002Fp\u003E\n\u003Cp\u003Eなのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは\u003Ccode\u003E$out\u002Flib\u003C\u002Fcode\u003Eとした。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003Esatbench\u003C\u002Fspan\u003E = super.rustPlatform.buildRustPackage \u003Cspan class=\"hljs-keyword\"\u003Erec\u003C\u002Fspan\u003E {\n    ...\n    \u003Cspan class=\"hljs-attr\"\u003EpatchPhase\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n      sed -i &quot;s|long = \\&quot;lib\\&quot;, default_value = \\&quot;\\&quot;|long = \\&quot;lib\\&quot;, default_value = \\&quot;$out\u002Flib\\&quot;|&quot; src\u002Fbin\u002Fsat-bench.rs\n    &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eコンパイルやインストールの挙動はいじらないように\u003Ccode\u003EpostInstall\u003C\u002Fcode\u003Eフックを使って、\nインストール後の処理としてファイルをターゲットディレクトリ\u003Ccode\u003E$out\u002Flib\u003C\u002Fcode\u003Eにコピー。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003EpostInstall\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n      mkdir -p $out\u002Flib\n      cp -r 3-SAT SAT09 SR2015 $out\u002Flib\u002F\n    &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこのようなnix式を評価してパッケージをインストールすると、\n以下のように適切なデフォルト値が埋め込まれているのがわかる。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E$ sat-bench --help\n...\n\nOPTIONS:\n    -K, --aux-key &lt;aux_key&gt;   [default: ]\n    -H, --header &lt;header&gt;     [default: ]\n        --lib &lt;lib_dir&gt;       [default: \u002Fnix\u002Fstore\u002F63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4\u002Flib]\n    -M, --message &lt;message&gt;   [default: ]\n...  \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eめでたし。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2019"},base:{writable:true,enumerable:true,value:"2019-03-22-rust-program-with-resources-on-nixos.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2019-03-22-rust-program-with-resources-on-nixos.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});