__NUXT_JSONP__("/2020/2020-06-07-cargo-instruments", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"How to compile cargo-instruments",subtitle:"on NixOS on MacOS",date:"2020-06-07T00:00:00.000Z",tags:["Rust","macOS","nixOS"],banner:"\u002Fimg\u002F2020\u002F06-07\u002Fbanner.jpg",bodyContent:"## Rustでプロファイリングしたいんじゃあ\n\nvalgrindは動くけど、perfはない、massive-visualizerもない。\nLinuxに比べてmacOSはRustのプロファイリングが不自由だなあ。\nそれでも、まともなLinuxマシンが手元にないのでなんとかmac上でプロファイリングしなければならない。\n何かインストールしなければ。\nいくつか調べてみて（そもそも検索でヒットするページが意外なほど少ないのだけど）[cargo-instruments](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fcargo-instruments)というのがよさそうだということがわかりました。\n残念だけど、opensshのバージョン問題で単に`cargo install`とするだけではコンパイルできないようです。\nbrewを使っているのが前提になっているのだろうか。\nうーん、これはいつものパターンだな。\n\n## nix-shellでコンパイルしよう\n\nsat-benchでの経験を基に、nix-shellで環境作ってcargoを呼び出す方法で、一つ一つ問題を潰していくと、こうなった。\n\n```shell\n$ nix-shell -p openssl pkg-config libiconv darwin.apple_sdk.frameworks.Security libcurl\n$ cargo install cargo-instruments\n```\n\nこれはコンパイルは最後まで走るのだけど、最後の最後のリンクフェーズで`_CFURLSetResourcePropertyForKey`が見つからないエラーで失敗する。\nどうもこれはnixOS上のrustのコンパイルでよく知られた問題のようで、とあるrust関連のnix expressionにはコメントで出てきて、dirty hackで対応だ、みたいなことが書いてある。\n-- `\u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-geiger\u002F`\n\n```nix\n  # FIXME: Use impure version of CoreFoundation because of missing symbols.\n  # CFURLSetResourcePropertyForKey is defined in the headers but there's no\n  # corresponding implementation in the sources from opensource.apple.com.\n  preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''\n    export NIX_CFLAGS_COMPILE=\"-F${CoreFoundation}\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE\"\n  '';\n```\n\nだったら、derivation を作るしかないか。\n\n# That works!\n\nということで色々nix expressionを見ながら作ったのがこちら。\n\n### 1. \u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments\u002Fdefault.nix\n\n```nix\n{ stdenv, runCommand, fetchFromGitHub, rustPlatform, Security, CoreFoundation, openssl, pkg-config, libiconv, curl }:\n\nrustPlatform.buildRustPackage rec {\n  pname = \"cargo-instruments\";\n  version = \"0.3.1\";\n\n  src = fetchFromGitHub {\n    owner = \"cmyr\";\n    repo = \"cargo-instruments\";\n    rev = \"7201328c3556b9d2872308869ac917b4b9d9b352\";\n    hash = \"sha256:1dgp38bgdk4pnrph21zygi4xjcmj449h0m4shapy0nabqwd5l3yz\";\n  };\n\n  nativeBuildInputs = [ pkg-config ];\n  buildInputs = [ openssl libiconv curl Security ];\n  cargoSha256 = \"sha256:18m9gk2i798vbj48gv60f19fpd6qvk3jrpljp5ai4mzjirhbscxs\";\n  doCheck = false;\n  preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''\n    export NIX_CFLAGS_COMPILE=\"-F${CoreFoundation}\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE\"\n  '';\n\n  meta = with stdenv.lib; {\n    descriptin = \"A cargo plugin to generate Xcode Instruments trace files\";\n    homepage = \"https:\u002F\u002Fgithub.com\u002Fcmyr\u002Fcargo-instruments\";\n    license = licenses.mit;\n    maintainers = with maintainers; [ shnarazk ];\n    platforms = platforms.darwin;\n  };\n}\n```\n\n### 2. \u002Fpkgs\u002Ftop-level\u002Fall-packages.nix\n\n```diff\nmodified   pkgs\u002Ftop-level\u002Fall-packages.nix\n@@ -9205,6 +9205,10 @@ in\n   cargo-inspect = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-inspect {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n+  cargo-instruments = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments {\n+    inherit (darwin) libiconv;\n+    inherit (darwin.apple_sdk.frameworks) Security CoreFoundation;\n+  };\n   cargo-make = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-make {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n```\n\nちゃんと動いているので、nixpkgs に入れてもらおうかな。",bodyHtml:"\u003Ch2\u003ERustでプロファイリングしたいんじゃあ\u003C\u002Fh2\u003E\n\u003Cp\u003Evalgrindは動くけど、perfはない、massive-visualizerもない。\nLinuxに比べてmacOSはRustのプロファイリングが不自由だなあ。\nそれでも、まともなLinuxマシンが手元にないのでなんとかmac上でプロファイリングしなければならない。\n何かインストールしなければ。\nいくつか調べてみて（そもそも検索でヒットするページが意外なほど少ないのだけど）\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fcargo-instruments\"\u003Ecargo-instruments\u003C\u002Fa\u003Eというのがよさそうだということがわかりました。\n残念だけど、opensshのバージョン問題で単に\u003Ccode\u003Ecargo install\u003C\u002Fcode\u003Eとするだけではコンパイルできないようです。\nbrewを使っているのが前提になっているのだろうか。\nうーん、これはいつものパターンだな。\u003C\u002Fp\u003E\n\u003Ch2\u003Enix-shellでコンパイルしよう\u003C\u002Fh2\u003E\n\u003Cp\u003Esat-benchでの経験を基に、nix-shellで環境作ってcargoを呼び出す方法で、一つ一つ問題を潰していくと、こうなった。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E$\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E nix-shell -p openssl pkg-config libiconv darwin.apple_sdk.frameworks.Security libcurl\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E$\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E cargo install cargo-instruments\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれはコンパイルは最後まで走るのだけど、最後の最後のリンクフェーズで\u003Ccode\u003E_CFURLSetResourcePropertyForKey\u003C\u002Fcode\u003Eが見つからないエラーで失敗する。\nどうもこれはnixOS上のrustのコンパイルでよく知られた問題のようで、とあるrust関連のnix expressionにはコメントで出てきて、dirty hackで対応だ、みたいなことが書いてある。\n-- \u003Ccode\u003E\u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-geiger\u002F\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E# \u003Cspan class=\"hljs-doctag\"\u003EFIXME:\u003C\u002Fspan\u003E Use impure version of CoreFoundation because of missing symbols.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# CFURLSetResourcePropertyForKey is defined in the headers but there&#x27;s no\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# corresponding implementation in the sources from opensource.apple.com.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003EpreConfigure\u003C\u002Fspan\u003E = stdenv.lib.optionalString stdenv.isDarwin \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n    export NIX_CFLAGS_COMPILE=&quot;-F\u003Cspan class=\"hljs-subst\"\u003E${CoreFoundation}\u003C\u002Fspan\u003E\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE&quot;\n  &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eだったら、derivation を作るしかないか。\u003C\u002Fp\u003E\n\u003Ch1\u003EThat works!\u003C\u002Fh1\u003E\n\u003Cp\u003Eということで色々nix expressionを見ながら作ったのがこちら。\u003C\u002Fp\u003E\n\u003Ch3\u003E1. \u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments\u002Fdefault.nix\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E{ stdenv, runCommand, fetchFromGitHub, rustPlatform, Security, CoreFoundation, openssl, pkg-config, libiconv, curl }:\n\nrustPlatform.buildRustPackage \u003Cspan class=\"hljs-keyword\"\u003Erec\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Epname\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cargo-instruments&quot;\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003Eversion\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;0.3.1&quot;\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E = fetchFromGitHub {\n    \u003Cspan class=\"hljs-attr\"\u003Eowner\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cmyr&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Erepo\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cargo-instruments&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Erev\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;7201328c3556b9d2872308869ac917b4b9d9b352&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ehash\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;sha256:1dgp38bgdk4pnrph21zygi4xjcmj449h0m4shapy0nabqwd5l3yz&quot;\u003C\u002Fspan\u003E;\n  };\n\n  \u003Cspan class=\"hljs-attr\"\u003EnativeBuildInputs\u003C\u002Fspan\u003E = [ pkg-config ];\n  \u003Cspan class=\"hljs-attr\"\u003EbuildInputs\u003C\u002Fspan\u003E = [ openssl libiconv curl Security ];\n  \u003Cspan class=\"hljs-attr\"\u003EcargoSha256\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;sha256:18m9gk2i798vbj48gv60f19fpd6qvk3jrpljp5ai4mzjirhbscxs&quot;\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003EdoCheck\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003EpreConfigure\u003C\u002Fspan\u003E = stdenv.lib.optionalString stdenv.isDarwin \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n    export NIX_CFLAGS_COMPILE=&quot;-F\u003Cspan class=\"hljs-subst\"\u003E${CoreFoundation}\u003C\u002Fspan\u003E\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE&quot;\n  &#x27;&#x27;\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-attr\"\u003Emeta\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Ewith\u003C\u002Fspan\u003E stdenv.lib; {\n    \u003Cspan class=\"hljs-attr\"\u003Edescriptin\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;A cargo plugin to generate Xcode Instruments trace files&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ehomepage\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;https:\u002F\u002Fgithub.com\u002Fcmyr\u002Fcargo-instruments&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Elicense\u003C\u002Fspan\u003E = licenses.mit;\n    \u003Cspan class=\"hljs-attr\"\u003Emaintainers\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Ewith\u003C\u002Fspan\u003E maintainers; [ shnarazk ];\n    \u003Cspan class=\"hljs-attr\"\u003Eplatforms\u003C\u002Fspan\u003E = platforms.darwin;\n  };\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2. \u002Fpkgs\u002Ftop-level\u002Fall-packages.nix\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Emodified   pkgs\u002Ftop-level\u002Fall-packages.nix\n\u003Cspan class=\"hljs-meta\"\u003E@@ -9205,6 +9205,10 @@\u003C\u002Fspan\u003E in\n   cargo-inspect = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-inspect {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n\u003Cspan class=\"hljs-addition\"\u003E+  cargo-instruments = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments {\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    inherit (darwin) libiconv;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    inherit (darwin.apple_sdk.frameworks) Security CoreFoundation;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  };\u003C\u002Fspan\u003E\n   cargo-make = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-make {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eちゃんと動いているので、nixpkgs に入れてもらおうかな。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-06-07-cargo-instruments.json",ext:".json",sourceBase:"2020-06-07-cargo-instruments.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"How to compile cargo-instruments"},subtitle:{writable:true,enumerable:true,value:"on NixOS on MacOS"},date:{writable:true,enumerable:true,value:"2020-06-07T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Rust","macOS","nixOS"]},banner:{writable:true,enumerable:true,value:"\u002Fimg\u002F2020\u002F06-07\u002Fbanner.jpg"},bodyContent:{writable:true,enumerable:true,value:"## Rustでプロファイリングしたいんじゃあ\n\nvalgrindは動くけど、perfはない、massive-visualizerもない。\nLinuxに比べてmacOSはRustのプロファイリングが不自由だなあ。\nそれでも、まともなLinuxマシンが手元にないのでなんとかmac上でプロファイリングしなければならない。\n何かインストールしなければ。\nいくつか調べてみて（そもそも検索でヒットするページが意外なほど少ないのだけど）[cargo-instruments](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fcargo-instruments)というのがよさそうだということがわかりました。\n残念だけど、opensshのバージョン問題で単に`cargo install`とするだけではコンパイルできないようです。\nbrewを使っているのが前提になっているのだろうか。\nうーん、これはいつものパターンだな。\n\n## nix-shellでコンパイルしよう\n\nsat-benchでの経験を基に、nix-shellで環境作ってcargoを呼び出す方法で、一つ一つ問題を潰していくと、こうなった。\n\n```shell\n$ nix-shell -p openssl pkg-config libiconv darwin.apple_sdk.frameworks.Security libcurl\n$ cargo install cargo-instruments\n```\n\nこれはコンパイルは最後まで走るのだけど、最後の最後のリンクフェーズで`_CFURLSetResourcePropertyForKey`が見つからないエラーで失敗する。\nどうもこれはnixOS上のrustのコンパイルでよく知られた問題のようで、とあるrust関連のnix expressionにはコメントで出てきて、dirty hackで対応だ、みたいなことが書いてある。\n-- `\u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-geiger\u002F`\n\n```nix\n  # FIXME: Use impure version of CoreFoundation because of missing symbols.\n  # CFURLSetResourcePropertyForKey is defined in the headers but there's no\n  # corresponding implementation in the sources from opensource.apple.com.\n  preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''\n    export NIX_CFLAGS_COMPILE=\"-F${CoreFoundation}\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE\"\n  '';\n```\n\nだったら、derivation を作るしかないか。\n\n# That works!\n\nということで色々nix expressionを見ながら作ったのがこちら。\n\n### 1. \u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments\u002Fdefault.nix\n\n```nix\n{ stdenv, runCommand, fetchFromGitHub, rustPlatform, Security, CoreFoundation, openssl, pkg-config, libiconv, curl }:\n\nrustPlatform.buildRustPackage rec {\n  pname = \"cargo-instruments\";\n  version = \"0.3.1\";\n\n  src = fetchFromGitHub {\n    owner = \"cmyr\";\n    repo = \"cargo-instruments\";\n    rev = \"7201328c3556b9d2872308869ac917b4b9d9b352\";\n    hash = \"sha256:1dgp38bgdk4pnrph21zygi4xjcmj449h0m4shapy0nabqwd5l3yz\";\n  };\n\n  nativeBuildInputs = [ pkg-config ];\n  buildInputs = [ openssl libiconv curl Security ];\n  cargoSha256 = \"sha256:18m9gk2i798vbj48gv60f19fpd6qvk3jrpljp5ai4mzjirhbscxs\";\n  doCheck = false;\n  preConfigure = stdenv.lib.optionalString stdenv.isDarwin ''\n    export NIX_CFLAGS_COMPILE=\"-F${CoreFoundation}\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE\"\n  '';\n\n  meta = with stdenv.lib; {\n    descriptin = \"A cargo plugin to generate Xcode Instruments trace files\";\n    homepage = \"https:\u002F\u002Fgithub.com\u002Fcmyr\u002Fcargo-instruments\";\n    license = licenses.mit;\n    maintainers = with maintainers; [ shnarazk ];\n    platforms = platforms.darwin;\n  };\n}\n```\n\n### 2. \u002Fpkgs\u002Ftop-level\u002Fall-packages.nix\n\n```diff\nmodified   pkgs\u002Ftop-level\u002Fall-packages.nix\n@@ -9205,6 +9205,10 @@ in\n   cargo-inspect = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-inspect {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n+  cargo-instruments = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments {\n+    inherit (darwin) libiconv;\n+    inherit (darwin.apple_sdk.frameworks) Security CoreFoundation;\n+  };\n   cargo-make = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-make {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n```\n\nちゃんと動いているので、nixpkgs に入れてもらおうかな。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch2\u003ERustでプロファイリングしたいんじゃあ\u003C\u002Fh2\u003E\n\u003Cp\u003Evalgrindは動くけど、perfはない、massive-visualizerもない。\nLinuxに比べてmacOSはRustのプロファイリングが不自由だなあ。\nそれでも、まともなLinuxマシンが手元にないのでなんとかmac上でプロファイリングしなければならない。\n何かインストールしなければ。\nいくつか調べてみて（そもそも検索でヒットするページが意外なほど少ないのだけど）\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fcargo-instruments\"\u003Ecargo-instruments\u003C\u002Fa\u003Eというのがよさそうだということがわかりました。\n残念だけど、opensshのバージョン問題で単に\u003Ccode\u003Ecargo install\u003C\u002Fcode\u003Eとするだけではコンパイルできないようです。\nbrewを使っているのが前提になっているのだろうか。\nうーん、これはいつものパターンだな。\u003C\u002Fp\u003E\n\u003Ch2\u003Enix-shellでコンパイルしよう\u003C\u002Fh2\u003E\n\u003Cp\u003Esat-benchでの経験を基に、nix-shellで環境作ってcargoを呼び出す方法で、一つ一つ問題を潰していくと、こうなった。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E$\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E nix-shell -p openssl pkg-config libiconv darwin.apple_sdk.frameworks.Security libcurl\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E$\u003C\u002Fspan\u003E\u003Cspan class=\"bash\"\u003E cargo install cargo-instruments\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれはコンパイルは最後まで走るのだけど、最後の最後のリンクフェーズで\u003Ccode\u003E_CFURLSetResourcePropertyForKey\u003C\u002Fcode\u003Eが見つからないエラーで失敗する。\nどうもこれはnixOS上のrustのコンパイルでよく知られた問題のようで、とあるrust関連のnix expressionにはコメントで出てきて、dirty hackで対応だ、みたいなことが書いてある。\n-- \u003Ccode\u003E\u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-geiger\u002F\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E# \u003Cspan class=\"hljs-doctag\"\u003EFIXME:\u003C\u002Fspan\u003E Use impure version of CoreFoundation because of missing symbols.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# CFURLSetResourcePropertyForKey is defined in the headers but there&#x27;s no\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-comment\"\u003E# corresponding implementation in the sources from opensource.apple.com.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003EpreConfigure\u003C\u002Fspan\u003E = stdenv.lib.optionalString stdenv.isDarwin \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n    export NIX_CFLAGS_COMPILE=&quot;-F\u003Cspan class=\"hljs-subst\"\u003E${CoreFoundation}\u003C\u002Fspan\u003E\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE&quot;\n  &#x27;&#x27;\u003C\u002Fspan\u003E;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eだったら、derivation を作るしかないか。\u003C\u002Fp\u003E\n\u003Ch1\u003EThat works!\u003C\u002Fh1\u003E\n\u003Cp\u003Eということで色々nix expressionを見ながら作ったのがこちら。\u003C\u002Fp\u003E\n\u003Ch3\u003E1. \u002Fpkgs\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments\u002Fdefault.nix\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E{ stdenv, runCommand, fetchFromGitHub, rustPlatform, Security, CoreFoundation, openssl, pkg-config, libiconv, curl }:\n\nrustPlatform.buildRustPackage \u003Cspan class=\"hljs-keyword\"\u003Erec\u003C\u002Fspan\u003E {\n  \u003Cspan class=\"hljs-attr\"\u003Epname\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cargo-instruments&quot;\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003Eversion\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;0.3.1&quot;\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-attr\"\u003Esrc\u003C\u002Fspan\u003E = fetchFromGitHub {\n    \u003Cspan class=\"hljs-attr\"\u003Eowner\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cmyr&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Erepo\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;cargo-instruments&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Erev\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;7201328c3556b9d2872308869ac917b4b9d9b352&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ehash\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;sha256:1dgp38bgdk4pnrph21zygi4xjcmj449h0m4shapy0nabqwd5l3yz&quot;\u003C\u002Fspan\u003E;\n  };\n\n  \u003Cspan class=\"hljs-attr\"\u003EnativeBuildInputs\u003C\u002Fspan\u003E = [ pkg-config ];\n  \u003Cspan class=\"hljs-attr\"\u003EbuildInputs\u003C\u002Fspan\u003E = [ openssl libiconv curl Security ];\n  \u003Cspan class=\"hljs-attr\"\u003EcargoSha256\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;sha256:18m9gk2i798vbj48gv60f19fpd6qvk3jrpljp5ai4mzjirhbscxs&quot;\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003EdoCheck\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n  \u003Cspan class=\"hljs-attr\"\u003EpreConfigure\u003C\u002Fspan\u003E = stdenv.lib.optionalString stdenv.isDarwin \u003Cspan class=\"hljs-string\"\u003E&#x27;&#x27;\n    export NIX_CFLAGS_COMPILE=&quot;-F\u003Cspan class=\"hljs-subst\"\u003E${CoreFoundation}\u003C\u002Fspan\u003E\u002FLibrary\u002FFrameworks $NIX_CFLAGS_COMPILE&quot;\n  &#x27;&#x27;\u003C\u002Fspan\u003E;\n\n  \u003Cspan class=\"hljs-attr\"\u003Emeta\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Ewith\u003C\u002Fspan\u003E stdenv.lib; {\n    \u003Cspan class=\"hljs-attr\"\u003Edescriptin\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;A cargo plugin to generate Xcode Instruments trace files&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Ehomepage\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-string\"\u003E&quot;https:\u002F\u002Fgithub.com\u002Fcmyr\u002Fcargo-instruments&quot;\u003C\u002Fspan\u003E;\n    \u003Cspan class=\"hljs-attr\"\u003Elicense\u003C\u002Fspan\u003E = licenses.mit;\n    \u003Cspan class=\"hljs-attr\"\u003Emaintainers\u003C\u002Fspan\u003E = \u003Cspan class=\"hljs-keyword\"\u003Ewith\u003C\u002Fspan\u003E maintainers; [ shnarazk ];\n    \u003Cspan class=\"hljs-attr\"\u003Eplatforms\u003C\u002Fspan\u003E = platforms.darwin;\n  };\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2. \u002Fpkgs\u002Ftop-level\u002Fall-packages.nix\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Emodified   pkgs\u002Ftop-level\u002Fall-packages.nix\n\u003Cspan class=\"hljs-meta\"\u003E@@ -9205,6 +9205,10 @@\u003C\u002Fspan\u003E in\n   cargo-inspect = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-inspect {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\n\u003Cspan class=\"hljs-addition\"\u003E+  cargo-instruments = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-instruments {\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    inherit (darwin) libiconv;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    inherit (darwin.apple_sdk.frameworks) Security CoreFoundation;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  };\u003C\u002Fspan\u003E\n   cargo-make = callPackage ..\u002Fdevelopment\u002Ftools\u002Frust\u002Fcargo-make {\n     inherit (darwin.apple_sdk.frameworks) Security;\n   };\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eちゃんと動いているので、nixpkgs に入れてもらおうかな。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-06-07-cargo-instruments.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-06-07-cargo-instruments.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});