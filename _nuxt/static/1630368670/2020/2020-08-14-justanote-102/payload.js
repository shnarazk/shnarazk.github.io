__NUXT_JSONP__("/2020/2020-08-14-justanote-102", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"JaNG version 1.0.2",subtitle:"import from GitHub Gist",date:"2020-08-14T00:00:00.000Z",tags:["jang","vuejs","nuxtjs"],bodyContent:"このブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', *Just-A-Note Generator* にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。\n\n[Observable](https:\u002F\u002Fobservablehq.com\u002F)が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。\n\n* githubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。\n* ところがjsonを読み込もうとすると `Cross-Access-Allow-Origin` の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるようにしてみたけど、それはどう考えてもかっこ悪い。\n* サーバに最初にデータを揃えて静的サイトの生成を始めるというのがどう考えても自然なので、asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 `nuxtServerInit`　をストアに追加しました。（追加するのも一苦労。actionsの中に書くのね。）この関数は最終的にcommitでstoreのデータを更新すればよいと。\n\n```js\n\u002F\u002F store\u002Findex.js\nexport const actions = {\n  async nuxtServerInit({ commit }) {\n    ...\n    commit('mutations', ...)\n  },\n```\n\n* `forEach` で呼び出す関数が `async` にできないことを理解するのに一苦労（まあ、`nuxtServerInit`の先頭に`async`を置きながら、forEachの無名関数にもおかなくていいのか **うっすらと** 疑問は感じてた）。\nfor文に書き直して、レンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでデータ取得問題がやっと解決。\n\n```js\n\u002F\u002F store\u002Findex.js\nexport const actions = {\n  async nuxtServerInit({ commit }) {\n    const arr = Object.entries(gist)\n    for(let val of arr) {\n      const art = val[1]\n      if (art.gistid !== undefined) {\n        art.url = `https:\u002F\u002Fgist.github.com\u002F${art.owner}\u002F${art.gistid}`\n        const j = await axios.get(`${art.url}.json`)\n        if (j.data === undefined)\n          art.content = `could not load ${art.url}.json`\n        else {\n          art.content = j.data.div\n          art.description = j.data.description\n          art.created_at = j.data.created_at.substring(0, 10)\n        }\n      }\n    }\n    commit('mutations', arr)\n  },\n```\n\n* 取ってきたjsonの中のhtmlセグメント中の `iframe` の大きさの取り扱いにも一苦労。\njupyter notebookを貼り付けたgistだけは`height: auto`が効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、`height: 2000px;`にしてしまうクラスを使うようにしました。（青い枠線が表示される場合があるのはデバッグ中の設定の名残りです。）\n\n```js\n\u002F\u002F pages\u002F_year\u002F_slug\u002Fghc\u002Findex.vue \u003E template\n\n      \u003Cdiv :id=\"$route.params.slug\" class=\"githubgist-content\" :class=\"{ 'githubgist-frame': article.frame }\"\u003E\n        \u003Cspan v-html=\"article.content\"\u003E\u003C\u002Fspan\u003E\n      \u003C\u002Fdiv\u003E\n\n```\n\n* 後は`axios.get` ではデータそのものではなくレスポンスが返ってくるので\n\n```js\nconst json = axios.get(url).then((res) =\u003E { return res.data })\n```\n\nでなければいけない問題。これもちょっとはまりました。\n\n一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。\n\nさて、なんでgithubの返す埋め込み用javascriptをそのまま使うのをやめたんだっけ？ 最初に何も考えずにObservableのコードを流用したら動かなかったのは確かなんだけど。。。",bodyHtml:"\u003Cp\u003Eこのブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', \u003Cem\u003EJust-A-Note Generator\u003C\u002Fem\u003E にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fobservablehq.com\u002F\"\u003EObservable\u003C\u002Fa\u003Eが（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Egithubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。\u003C\u002Fli\u003E\n\u003Cli\u003Eところがjsonを読み込もうとすると \u003Ccode\u003ECross-Access-Allow-Origin\u003C\u002Fcode\u003E の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるようにしてみたけど、それはどう考えてもかっこ悪い。\u003C\u002Fli\u003E\n\u003Cli\u003Eサーバに最初にデータを揃えて静的サイトの生成を始めるというのがどう考えても自然なので、asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 \u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E　をストアに追加しました。（追加するのも一苦労。actionsの中に書くのね。）この関数は最終的にcommitでstoreのデータを更新すればよいと。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F store\u002Findex.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E actions = {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-title\"\u003EnuxtServerInit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E{ commit }\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E {\n    ...\n    commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;mutations&#x27;\u003C\u002Fspan\u003E, ...)\n  },\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EforEach\u003C\u002Fcode\u003E で呼び出す関数が \u003Ccode\u003Easync\u003C\u002Fcode\u003E にできないことを理解するのに一苦労（まあ、\u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003Eの先頭に\u003Ccode\u003Easync\u003C\u002Fcode\u003Eを置きながら、forEachの無名関数にもおかなくていいのか \u003Cstrong\u003Eうっすらと\u003C\u002Fstrong\u003E 疑問は感じてた）。\nfor文に書き直して、レンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでデータ取得問題がやっと解決。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F store\u002Findex.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E actions = {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-title\"\u003EnuxtServerInit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E{ commit }\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E arr = \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E.entries(gist)\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E val \u003Cspan class=\"hljs-keyword\"\u003Eof\u003C\u002Fspan\u003E arr) {\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E art = val[\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E]\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (art.gistid !== \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E) {\n        art.url = \u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fgist.github.com\u002F\u003Cspan class=\"hljs-subst\"\u003E${art.owner}\u003C\u002Fspan\u003E\u002F\u003Cspan class=\"hljs-subst\"\u003E${art.gistid}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E j = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E axios.get(\u003Cspan class=\"hljs-string\"\u003E`\u003Cspan class=\"hljs-subst\"\u003E${art.url}\u003C\u002Fspan\u003E.json`\u003C\u002Fspan\u003E)\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (j.data === \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E)\n          art.content = \u003Cspan class=\"hljs-string\"\u003E`could not load \u003Cspan class=\"hljs-subst\"\u003E${art.url}\u003C\u002Fspan\u003E.json`\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n          art.content = j.data.div\n          art.description = j.data.description\n          art.created_at = j.data.created_at.substring(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E10\u003C\u002Fspan\u003E)\n        }\n      }\n    }\n    commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;mutations&#x27;\u003C\u002Fspan\u003E, arr)\n  },\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E取ってきたjsonの中のhtmlセグメント中の \u003Ccode\u003Eiframe\u003C\u002Fcode\u003E の大きさの取り扱いにも一苦労。\njupyter notebookを貼り付けたgistだけは\u003Ccode\u003Eheight: auto\u003C\u002Fcode\u003Eが効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、\u003Ccode\u003Eheight: 2000px;\u003C\u002Fcode\u003Eにしてしまうクラスを使うようにしました。（青い枠線が表示される場合があるのはデバッグ中の設定の名残りです。）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F pages\u002F_year\u002F_slug\u002Fghc\u002Findex.vue &gt; template\u003C\u002Fspan\u003E\n\n      &lt;div :id=\u003Cspan class=\"hljs-string\"\u003E&quot;$route.params.slug&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;githubgist-content&quot;\u003C\u002Fspan\u003E :\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ &#x27;githubgist-frame&#x27;: article.frame }&quot;\u003C\u002Fspan\u003E&gt;\n        \u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-html\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.content&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n      &lt;\u002Fdiv&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E後は\u003Ccode\u003Eaxios.get\u003C\u002Fcode\u003E ではデータそのものではなくレスポンスが返ってくるので\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E json = axios.get(url).then(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Eres\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E res.data })\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでなければいけない問題。これもちょっとはまりました。\u003C\u002Fp\u003E\n\u003Cp\u003E一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、なんでgithubの返す埋め込み用javascriptをそのまま使うのをやめたんだっけ？ 最初に何も考えずにObservableのコードを流用したら動かなかったのは確かなんだけど。。。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-08-14-justanote-102.json",ext:".json",sourceBase:"2020-08-14-justanote-102.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"JaNG version 1.0.2"},subtitle:{writable:true,enumerable:true,value:"import from GitHub Gist"},date:{writable:true,enumerable:true,value:"2020-08-14T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["jang","vuejs","nuxtjs"]},bodyContent:{writable:true,enumerable:true,value:"このブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', *Just-A-Note Generator* にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。\n\n[Observable](https:\u002F\u002Fobservablehq.com\u002F)が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。\n\n* githubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。\n* ところがjsonを読み込もうとすると `Cross-Access-Allow-Origin` の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるようにしてみたけど、それはどう考えてもかっこ悪い。\n* サーバに最初にデータを揃えて静的サイトの生成を始めるというのがどう考えても自然なので、asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 `nuxtServerInit`　をストアに追加しました。（追加するのも一苦労。actionsの中に書くのね。）この関数は最終的にcommitでstoreのデータを更新すればよいと。\n\n```js\n\u002F\u002F store\u002Findex.js\nexport const actions = {\n  async nuxtServerInit({ commit }) {\n    ...\n    commit('mutations', ...)\n  },\n```\n\n* `forEach` で呼び出す関数が `async` にできないことを理解するのに一苦労（まあ、`nuxtServerInit`の先頭に`async`を置きながら、forEachの無名関数にもおかなくていいのか **うっすらと** 疑問は感じてた）。\nfor文に書き直して、レンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでデータ取得問題がやっと解決。\n\n```js\n\u002F\u002F store\u002Findex.js\nexport const actions = {\n  async nuxtServerInit({ commit }) {\n    const arr = Object.entries(gist)\n    for(let val of arr) {\n      const art = val[1]\n      if (art.gistid !== undefined) {\n        art.url = `https:\u002F\u002Fgist.github.com\u002F${art.owner}\u002F${art.gistid}`\n        const j = await axios.get(`${art.url}.json`)\n        if (j.data === undefined)\n          art.content = `could not load ${art.url}.json`\n        else {\n          art.content = j.data.div\n          art.description = j.data.description\n          art.created_at = j.data.created_at.substring(0, 10)\n        }\n      }\n    }\n    commit('mutations', arr)\n  },\n```\n\n* 取ってきたjsonの中のhtmlセグメント中の `iframe` の大きさの取り扱いにも一苦労。\njupyter notebookを貼り付けたgistだけは`height: auto`が効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、`height: 2000px;`にしてしまうクラスを使うようにしました。（青い枠線が表示される場合があるのはデバッグ中の設定の名残りです。）\n\n```js\n\u002F\u002F pages\u002F_year\u002F_slug\u002Fghc\u002Findex.vue \u003E template\n\n      \u003Cdiv :id=\"$route.params.slug\" class=\"githubgist-content\" :class=\"{ 'githubgist-frame': article.frame }\"\u003E\n        \u003Cspan v-html=\"article.content\"\u003E\u003C\u002Fspan\u003E\n      \u003C\u002Fdiv\u003E\n\n```\n\n* 後は`axios.get` ではデータそのものではなくレスポンスが返ってくるので\n\n```js\nconst json = axios.get(url).then((res) =\u003E { return res.data })\n```\n\nでなければいけない問題。これもちょっとはまりました。\n\n一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。\n\nさて、なんでgithubの返す埋め込み用javascriptをそのまま使うのをやめたんだっけ？ 最初に何も考えずにObservableのコードを流用したら動かなかったのは確かなんだけど。。。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003Eこのブログの静的サイトジェネレータ（名前はまだない。とりあえず'JaNG', \u003Cem\u003EJust-A-Note Generator\u003C\u002Fem\u003E にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fobservablehq.com\u002F\"\u003EObservable\u003C\u002Fa\u003Eが（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日がかりになってしまいました。ChangeLog代わりに苦労した点を残しておきます。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Egithubが埋め込み用に提供するのはjavascriptまたはjson形式。ちょっとjavascriptは置いといてjsonを使う方向で計画。\u003C\u002Fli\u003E\n\u003Cli\u003Eところがjsonを読み込もうとすると \u003Ccode\u003ECross-Access-Allow-Origin\u003C\u002Fcode\u003E の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるようにしてみたけど、それはどう考えてもかっこ悪い。\u003C\u002Fli\u003E\n\u003Cli\u003Eサーバに最初にデータを揃えて静的サイトの生成を始めるというのがどう考えても自然なので、asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 \u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003E　をストアに追加しました。（追加するのも一苦労。actionsの中に書くのね。）この関数は最終的にcommitでstoreのデータを更新すればよいと。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F store\u002Findex.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E actions = {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-title\"\u003EnuxtServerInit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E{ commit }\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E {\n    ...\n    commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;mutations&#x27;\u003C\u002Fspan\u003E, ...)\n  },\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EforEach\u003C\u002Fcode\u003E で呼び出す関数が \u003Ccode\u003Easync\u003C\u002Fcode\u003E にできないことを理解するのに一苦労（まあ、\u003Ccode\u003EnuxtServerInit\u003C\u002Fcode\u003Eの先頭に\u003Ccode\u003Easync\u003C\u002Fcode\u003Eを置きながら、forEachの無名関数にもおかなくていいのか \u003Cstrong\u003Eうっすらと\u003C\u002Fstrong\u003E 疑問は感じてた）。\nfor文に書き直して、レンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでデータ取得問題がやっと解決。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F store\u002Findex.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E actions = {\n  \u003Cspan class=\"hljs-keyword\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-title\"\u003EnuxtServerInit\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-params\"\u003E{ commit }\u003C\u002Fspan\u003E)\u003C\u002Fspan\u003E {\n    \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E arr = \u003Cspan class=\"hljs-built_in\"\u003EObject\u003C\u002Fspan\u003E.entries(gist)\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E val \u003Cspan class=\"hljs-keyword\"\u003Eof\u003C\u002Fspan\u003E arr) {\n      \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E art = val[\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E]\n      \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (art.gistid !== \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E) {\n        art.url = \u003Cspan class=\"hljs-string\"\u003E`https:\u002F\u002Fgist.github.com\u002F\u003Cspan class=\"hljs-subst\"\u003E${art.owner}\u003C\u002Fspan\u003E\u002F\u003Cspan class=\"hljs-subst\"\u003E${art.gistid}\u003C\u002Fspan\u003E`\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E j = \u003Cspan class=\"hljs-keyword\"\u003Eawait\u003C\u002Fspan\u003E axios.get(\u003Cspan class=\"hljs-string\"\u003E`\u003Cspan class=\"hljs-subst\"\u003E${art.url}\u003C\u002Fspan\u003E.json`\u003C\u002Fspan\u003E)\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E (j.data === \u003Cspan class=\"hljs-literal\"\u003Eundefined\u003C\u002Fspan\u003E)\n          art.content = \u003Cspan class=\"hljs-string\"\u003E`could not load \u003Cspan class=\"hljs-subst\"\u003E${art.url}\u003C\u002Fspan\u003E.json`\u003C\u002Fspan\u003E\n        \u003Cspan class=\"hljs-keyword\"\u003Eelse\u003C\u002Fspan\u003E {\n          art.content = j.data.div\n          art.description = j.data.description\n          art.created_at = j.data.created_at.substring(\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E, \u003Cspan class=\"hljs-number\"\u003E10\u003C\u002Fspan\u003E)\n        }\n      }\n    }\n    commit(\u003Cspan class=\"hljs-string\"\u003E&#x27;mutations&#x27;\u003C\u002Fspan\u003E, arr)\n  },\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E取ってきたjsonの中のhtmlセグメント中の \u003Ccode\u003Eiframe\u003C\u002Fcode\u003E の大きさの取り扱いにも一苦労。\njupyter notebookを貼り付けたgistだけは\u003Ccode\u003Eheight: auto\u003C\u002Fcode\u003Eが効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、\u003Ccode\u003Eheight: 2000px;\u003C\u002Fcode\u003Eにしてしまうクラスを使うようにしました。（青い枠線が表示される場合があるのはデバッグ中の設定の名残りです。）\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F pages\u002F_year\u002F_slug\u002Fghc\u002Findex.vue &gt; template\u003C\u002Fspan\u003E\n\n      &lt;div :id=\u003Cspan class=\"hljs-string\"\u003E&quot;$route.params.slug&quot;\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;githubgist-content&quot;\u003C\u002Fspan\u003E :\u003Cspan class=\"hljs-class\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Eclass\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;{ &#x27;githubgist-frame&#x27;: article.frame }&quot;\u003C\u002Fspan\u003E&gt;\n        \u003Cspan class=\"xml\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Ev-html\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;article.content&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Espan\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n      &lt;\u002Fdiv&gt;\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E後は\u003Ccode\u003Eaxios.get\u003C\u002Fcode\u003E ではデータそのものではなくレスポンスが返ってくるので\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Econst\u003C\u002Fspan\u003E json = axios.get(url).then(\u003Cspan class=\"hljs-function\"\u003E(\u003Cspan class=\"hljs-params\"\u003Eres\u003C\u002Fspan\u003E) =&gt;\u003C\u002Fspan\u003E { \u003Cspan class=\"hljs-keyword\"\u003Ereturn\u003C\u002Fspan\u003E res.data })\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでなければいけない問題。これもちょっとはまりました。\u003C\u002Fp\u003E\n\u003Cp\u003E一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。\u003C\u002Fp\u003E\n\u003Cp\u003Eさて、なんでgithubの返す埋め込み用javascriptをそのまま使うのをやめたんだっけ？ 最初に何も考えずにObservableのコードを流用したら動かなかったのは確かなんだけど。。。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-08-14-justanote-102.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-08-14-justanote-102.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});