__NUXT_JSONP__("/2019/2019-07-31-restart", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"A Consideration about Restart (2019-07-31)",subtitle:"（部分的）リスタートの意義",date:"2019-09-10T00:00:00.000Z",tags:["SAT","issue"],bodyContent:"### これまでのまとめ\n\n- [First UIP distribution (2019-07-21)](\u002F2019\u002F2019-07-21-first-UIP-distribution\u002F)\n- [Development of Var activities (2019-07-11)](\u002F2019\u002F2019-07-11-varact-distribution\u002F)\n- [Some Stats about Partial Restart (2019-08-04)](\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F)\n\n求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\nしかし、リスタートは本当に必要なのだろうか。\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。\n\n何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。\n\n- クラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行\n- 停滞したら大きくジャンプして次のクラスタを探す\n- クラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\n  これは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\n  それらを集めればこれは非常によい局所性を示すようになるのではなかろうか。\n\nこの仮定が正しいなら、**変数の最終割当て**と**求解対象のクラスタの時刻分布**\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。\n\nただ、ここの「変数割当て」というのは定義が難しい。\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。\n\n結局、その意味するものは[Development of Var activities (2019-07-11)](\u002F2019\u002F2019-07-11-varact-distribution\u002F)で考えた\n`変数活性度の分散`、あるいはその近似のFUP集合の大きさに帰着するようだ。\n\nこの結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\nということで[Some Stats about Partial Restart (2019-08-04)](\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F)で実装を試し\nてみたのだが、いい成果にはならなかった。\n\n# 2019-08-20\n\nおよそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。\n\nリテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\n**だからリスタートには意味がある。**\n\n問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。\n\n現在のrewarding & phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\nこれは矛盾している部分から割り当てようとするため。\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。\n\nクラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\nその不動点は問題を構成する閉集合そのものになってしまう。\n\nにも関わらず、その増え方には特徴が見られる。\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。\n\n停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\n実験結果はこの方向性を強く示唆しているようだ。\n\n# 2019-08-24\n\nさらにscrap and build。\n\nEMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。\n\n求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。\n\n# 2019-08-28\n\n名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。\n\nリスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。\n\n![](\u002Fimg\u002F2019\u002F08-28\u002Feffect-of-restarts.png)\n\n図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。\n\nリスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。\n\nまた、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。\n\n一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。\n\n面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。\n\n# 2019-09-03 Restart-As-Swapping-FULs\n\ngive up中。\n\n大域的な尺度が出たとしてそれをどう使えばよいかわからない。\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。\n\nそもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。\n\nということからローカルな尺度 + **リスタートの意義を反映した変数の重み付け** が重要な気がしてきた。\nこの視点から見てCHBはどうなんだろうか。\n複雑すぎやしないだろうか。\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。\n\n# 2019-09-10\n\n一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\nようだ。で、今のところ**リスタートの意義を反映した変数の重み付け** はうまくいっていない。\n\n- ASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\n  まあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\n  だとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\n  うーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。\n- LBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\n  これもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\n  判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。\n\nというわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。\n\nさらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。",bodyHtml:"\u003Ch3\u003Eこれまでのまとめ\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F2019-07-21-first-UIP-distribution\u002F\"\u003EFirst UIP distribution (2019-07-21)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F2019-07-11-varact-distribution\u002F\"\u003EDevelopment of Var activities (2019-07-11)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F\"\u003ESome Stats about Partial Restart (2019-08-04)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\nしかし、リスタートは本当に必要なのだろうか。\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。\u003C\u002Fp\u003E\n\u003Cp\u003E何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eクラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行\u003C\u002Fli\u003E\n\u003Cli\u003E停滞したら大きくジャンプして次のクラスタを探す\u003C\u002Fli\u003E\n\u003Cli\u003Eクラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\nこれは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\nそれらを集めればこれは非常によい局所性を示すようになるのではなかろうか。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eこの仮定が正しいなら、\u003Cstrong\u003E変数の最終割当て\u003C\u002Fstrong\u003Eと\u003Cstrong\u003E求解対象のクラスタの時刻分布\u003C\u002Fstrong\u003E\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。\u003C\u002Fp\u003E\n\u003Cp\u003Eただ、ここの「変数割当て」というのは定義が難しい。\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。\u003C\u002Fp\u003E\n\u003Cp\u003E結局、その意味するものは\u003Ca href=\"\u002F2019\u002F2019-07-11-varact-distribution\u002F\"\u003EDevelopment of Var activities (2019-07-11)\u003C\u002Fa\u003Eで考えた\n\u003Ccode\u003E変数活性度の分散\u003C\u002Fcode\u003E、あるいはその近似のFUP集合の大きさに帰着するようだ。\u003C\u002Fp\u003E\n\u003Cp\u003Eこの結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\nということで\u003Ca href=\"\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F\"\u003ESome Stats about Partial Restart (2019-08-04)\u003C\u002Fa\u003Eで実装を試し\nてみたのだが、いい成果にはならなかった。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-20\u003C\u002Fh1\u003E\n\u003Cp\u003Eおよそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。\u003C\u002Fp\u003E\n\u003Cp\u003Eリテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\n\u003Cstrong\u003Eだからリスタートには意味がある。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。\u003C\u002Fp\u003E\n\u003Cp\u003E現在のrewarding &amp; phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\nこれは矛盾している部分から割り当てようとするため。\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。\u003C\u002Fp\u003E\n\u003Cp\u003Eクラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\nその不動点は問題を構成する閉集合そのものになってしまう。\u003C\u002Fp\u003E\n\u003Cp\u003Eにも関わらず、その増え方には特徴が見られる。\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。\u003C\u002Fp\u003E\n\u003Cp\u003E停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\n実験結果はこの方向性を強く示唆しているようだ。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-24\u003C\u002Fh1\u003E\n\u003Cp\u003Eさらにscrap and build。\u003C\u002Fp\u003E\n\u003Cp\u003EEMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。\u003C\u002Fp\u003E\n\u003Cp\u003E求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-28\u003C\u002Fh1\u003E\n\u003Cp\u003E名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。\u003C\u002Fp\u003E\n\u003Cp\u003Eリスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2019\u002F08-28\u002Feffect-of-restarts.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。\u003C\u002Fp\u003E\n\u003Cp\u003Eリスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。\u003C\u002Fp\u003E\n\u003Cp\u003Eまた、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。\u003C\u002Fp\u003E\n\u003Cp\u003E一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。\u003C\u002Fp\u003E\n\u003Cp\u003E面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-09-03 Restart-As-Swapping-FULs\u003C\u002Fh1\u003E\n\u003Cp\u003Egive up中。\u003C\u002Fp\u003E\n\u003Cp\u003E大域的な尺度が出たとしてそれをどう使えばよいかわからない。\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。\u003C\u002Fp\u003E\n\u003Cp\u003EそもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。\u003C\u002Fp\u003E\n\u003Cp\u003Eということからローカルな尺度 + \u003Cstrong\u003Eリスタートの意義を反映した変数の重み付け\u003C\u002Fstrong\u003E が重要な気がしてきた。\nこの視点から見てCHBはどうなんだろうか。\n複雑すぎやしないだろうか。\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-09-10\u003C\u002Fh1\u003E\n\u003Cp\u003E一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\nようだ。で、今のところ\u003Cstrong\u003Eリスタートの意義を反映した変数の重み付け\u003C\u002Fstrong\u003E はうまくいっていない。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\nまあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\nだとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\nうーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。\u003C\u002Fli\u003E\n\u003Cli\u003ELBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\nこれもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\n判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eというわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。\u003C\u002Fp\u003E\n\u003Cp\u003EさらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2019",base:"2019-07-31-restart.json",ext:".json",sourceBase:"2019-07-31-restart.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"A Consideration about Restart (2019-07-31)"},subtitle:{writable:true,enumerable:true,value:"（部分的）リスタートの意義"},date:{writable:true,enumerable:true,value:"2019-09-10T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","issue"]},bodyContent:{writable:true,enumerable:true,value:"### これまでのまとめ\n\n- [First UIP distribution (2019-07-21)](\u002F2019\u002F2019-07-21-first-UIP-distribution\u002F)\n- [Development of Var activities (2019-07-11)](\u002F2019\u002F2019-07-11-varact-distribution\u002F)\n- [Some Stats about Partial Restart (2019-08-04)](\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F)\n\n求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\nしかし、リスタートは本当に必要なのだろうか。\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。\n\n何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。\n\n- クラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行\n- 停滞したら大きくジャンプして次のクラスタを探す\n- クラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\n  これは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\n  それらを集めればこれは非常によい局所性を示すようになるのではなかろうか。\n\nこの仮定が正しいなら、**変数の最終割当て**と**求解対象のクラスタの時刻分布**\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。\n\nただ、ここの「変数割当て」というのは定義が難しい。\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。\n\n結局、その意味するものは[Development of Var activities (2019-07-11)](\u002F2019\u002F2019-07-11-varact-distribution\u002F)で考えた\n`変数活性度の分散`、あるいはその近似のFUP集合の大きさに帰着するようだ。\n\nこの結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\nということで[Some Stats about Partial Restart (2019-08-04)](\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F)で実装を試し\nてみたのだが、いい成果にはならなかった。\n\n# 2019-08-20\n\nおよそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。\n\nリテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\n**だからリスタートには意味がある。**\n\n問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。\n\n現在のrewarding & phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\nこれは矛盾している部分から割り当てようとするため。\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。\n\nクラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\nその不動点は問題を構成する閉集合そのものになってしまう。\n\nにも関わらず、その増え方には特徴が見られる。\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。\n\n停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\n実験結果はこの方向性を強く示唆しているようだ。\n\n# 2019-08-24\n\nさらにscrap and build。\n\nEMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。\n\n求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。\n\n# 2019-08-28\n\n名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。\n\nリスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。\n\n![](\u002Fimg\u002F2019\u002F08-28\u002Feffect-of-restarts.png)\n\n図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。\n\nリスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。\n\nまた、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。\n\n一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。\n\n面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。\n\n# 2019-09-03 Restart-As-Swapping-FULs\n\ngive up中。\n\n大域的な尺度が出たとしてそれをどう使えばよいかわからない。\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。\n\nそもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。\n\nということからローカルな尺度 + **リスタートの意義を反映した変数の重み付け** が重要な気がしてきた。\nこの視点から見てCHBはどうなんだろうか。\n複雑すぎやしないだろうか。\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。\n\n# 2019-09-10\n\n一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\nようだ。で、今のところ**リスタートの意義を反映した変数の重み付け** はうまくいっていない。\n\n- ASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\n  まあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\n  だとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\n  うーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。\n- LBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\n  これもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\n  判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。\n\nというわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。\n\nさらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch3\u003Eこれまでのまとめ\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F2019-07-21-first-UIP-distribution\u002F\"\u003EFirst UIP distribution (2019-07-21)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F2019-07-11-varact-distribution\u002F\"\u003EDevelopment of Var activities (2019-07-11)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F\"\u003ESome Stats about Partial Restart (2019-08-04)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\nしかし、リスタートは本当に必要なのだろうか。\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。\u003C\u002Fp\u003E\n\u003Cp\u003E何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eクラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行\u003C\u002Fli\u003E\n\u003Cli\u003E停滞したら大きくジャンプして次のクラスタを探す\u003C\u002Fli\u003E\n\u003Cli\u003Eクラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\nこれは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\nそれらを集めればこれは非常によい局所性を示すようになるのではなかろうか。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eこの仮定が正しいなら、\u003Cstrong\u003E変数の最終割当て\u003C\u002Fstrong\u003Eと\u003Cstrong\u003E求解対象のクラスタの時刻分布\u003C\u002Fstrong\u003E\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。\u003C\u002Fp\u003E\n\u003Cp\u003Eただ、ここの「変数割当て」というのは定義が難しい。\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。\u003C\u002Fp\u003E\n\u003Cp\u003E結局、その意味するものは\u003Ca href=\"\u002F2019\u002F2019-07-11-varact-distribution\u002F\"\u003EDevelopment of Var activities (2019-07-11)\u003C\u002Fa\u003Eで考えた\n\u003Ccode\u003E変数活性度の分散\u003C\u002Fcode\u003E、あるいはその近似のFUP集合の大きさに帰着するようだ。\u003C\u002Fp\u003E\n\u003Cp\u003Eこの結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\nということで\u003Ca href=\"\u002F2019\u002F4f2a110a30ee837b\u002Fobs\u002F\"\u003ESome Stats about Partial Restart (2019-08-04)\u003C\u002Fa\u003Eで実装を試し\nてみたのだが、いい成果にはならなかった。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-20\u003C\u002Fh1\u003E\n\u003Cp\u003Eおよそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。\u003C\u002Fp\u003E\n\u003Cp\u003Eリテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\n\u003Cstrong\u003Eだからリスタートには意味がある。\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。\u003C\u002Fp\u003E\n\u003Cp\u003E現在のrewarding &amp; phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\nこれは矛盾している部分から割り当てようとするため。\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。\u003C\u002Fp\u003E\n\u003Cp\u003Eクラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\nその不動点は問題を構成する閉集合そのものになってしまう。\u003C\u002Fp\u003E\n\u003Cp\u003Eにも関わらず、その増え方には特徴が見られる。\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。\u003C\u002Fp\u003E\n\u003Cp\u003E停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\n実験結果はこの方向性を強く示唆しているようだ。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-24\u003C\u002Fh1\u003E\n\u003Cp\u003Eさらにscrap and build。\u003C\u002Fp\u003E\n\u003Cp\u003EEMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。\u003C\u002Fp\u003E\n\u003Cp\u003E求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-08-28\u003C\u002Fh1\u003E\n\u003Cp\u003E名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。\u003C\u002Fp\u003E\n\u003Cp\u003Eリスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2019\u002F08-28\u002Feffect-of-restarts.png\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。\u003C\u002Fp\u003E\n\u003Cp\u003Eリスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。\u003C\u002Fp\u003E\n\u003Cp\u003Eまた、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。\u003C\u002Fp\u003E\n\u003Cp\u003E一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。\u003C\u002Fp\u003E\n\u003Cp\u003E面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-09-03 Restart-As-Swapping-FULs\u003C\u002Fh1\u003E\n\u003Cp\u003Egive up中。\u003C\u002Fp\u003E\n\u003Cp\u003E大域的な尺度が出たとしてそれをどう使えばよいかわからない。\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。\u003C\u002Fp\u003E\n\u003Cp\u003EそもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。\u003C\u002Fp\u003E\n\u003Cp\u003Eということからローカルな尺度 + \u003Cstrong\u003Eリスタートの意義を反映した変数の重み付け\u003C\u002Fstrong\u003E が重要な気がしてきた。\nこの視点から見てCHBはどうなんだろうか。\n複雑すぎやしないだろうか。\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。\u003C\u002Fp\u003E\n\u003Ch1\u003E2019-09-10\u003C\u002Fh1\u003E\n\u003Cp\u003E一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\nようだ。で、今のところ\u003Cstrong\u003Eリスタートの意義を反映した変数の重み付け\u003C\u002Fstrong\u003E はうまくいっていない。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\nまあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\nだとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\nうーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。\u003C\u002Fli\u003E\n\u003Cli\u003ELBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\nこれもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\n判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eというわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。\u003C\u002Fp\u003E\n\u003Cp\u003EさらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2019"},base:{writable:true,enumerable:true,value:"2019-07-31-restart.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2019-07-31-restart.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});