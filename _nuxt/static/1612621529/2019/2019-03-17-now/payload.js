__NUXT_JSONP__("/2019/2019-03-17-now", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Memo about @now\u002Frust by Zeit",subtitle:"@now\u002Frustを使ったサーバーレスコンピューティング",date:"2019-03-10T00:00:00.000Z",tags:["Rust"],bodyContent:"## 準備\n\nまずシステムを汚染しないようにnowをインストール：\n\n```\nnpm config set prefix ~\u002F.local\u002Fnpm\u002F\nnpm install -g now\nln -s ~\u002F.local\u002Fnpm\u002Fbin\u002Fnow `\u002F.local\u002Fbin\u002Fnow\n```\n\n## 試行\n\n[紹介ポスト](https:\u002F\u002Fzeit.co\u002Fblog\u002Fintroducing-now-rust)は色々と内容が古くなっているので[Document](https:\u002F\u002Fzeit.co\u002Fdocs\u002Fv2\u002Fdeployments\u002Fofficial-builders\u002Fnow-rust\u002F)をたどる方がよい。\n\n## Tips\n\n### 要求: `$TOP\u002Findex.rs`ではなくsrc\u002Fの下においてcargoでコンパイルしたい。\n\nnow.jsonでビルド元を指定すればよい。\n\n```json\n    \"builds\": [\n\t{\n\t    \"src\": \"src\u002Findex.rs\",\n\t    \"use\": \"@now\u002Frust\"\n\t}\n    ],\n```\n\nただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。\n\n```json\n    \"routes\": [\n\t{\n\t    \"src\": \"\u002F\",\n\t    \"dest\": \"\u002Fsrc\u002F\"\n\t}\n    ]\n```\n\n### 要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい\n\nデプロイするのはsrc\u002Findex.rsなので、それ以外のソースにmain関数があればいい。\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。\n\n```\n\u002Ftarget\n\u002Fsrc\u002Fbin\n...\n```\n\nそもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\nなのでそこに実行ファイルを置きたいならsrc\u002Fbinの下のファイルを`cargo run -bin`で実行しろと\nいう話。\n\n### 要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない\n\ncargoのfeatureを使えばいい\n\n\n```\n# Cargo.toml\n\n[dependencies]\nhttp = \"0.1\"\nregex = \"1.1.0\"\nreqwest = { version = \"0.9.12\", optional = true }\nscraper = { version = \"0.9.2\", optional = true }\nserde = { version = \"1.0.89\", features = [\"derive\"] }\nserde_json = \"1.0\"\nurl = { version = \"1.7.2\", features = [ \"query_encoding\" ] }\n\n[features]\nprepare = [\"reqwest\", \"scraper\"]\n```\n\nこうしておいて、手元で実行するときは以下を実行。\n\n```\ncargo run --bin xxx --features prepare\n```\n\nデプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。\n\n### 要求：handlerを手元で実行する時も流用したい\n\nhandlerの型は\n\n```\nfn handler(request: http::Request\u003C()\u003E) -\u003E http::Result\u003Chttp::Response\u003CString\u003E\u003E;\n```\n\nなのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。\n\nまあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。",bodyHtml:"\u003Ch2\u003E準備\u003C\u002Fh2\u003E\n\u003Cp\u003Eまずシステムを汚染しないようにnowをインストール：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Enpm config set prefix ~\u002F.local\u002Fnpm\u002F\nnpm install -g now\nln -s ~\u002F.local\u002Fnpm\u002Fbin\u002Fnow `\u002F.local\u002Fbin\u002Fnow\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003E試行\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fzeit.co\u002Fblog\u002Fintroducing-now-rust\"\u003E紹介ポスト\u003C\u002Fa\u003Eは色々と内容が古くなっているので\u003Ca href=\"https:\u002F\u002Fzeit.co\u002Fdocs\u002Fv2\u002Fdeployments\u002Fofficial-builders\u002Fnow-rust\u002F\"\u003EDocument\u003C\u002Fa\u003Eをたどる方がよい。\u003C\u002Fp\u003E\n\u003Ch2\u003ETips\u003C\u002Fh2\u003E\n\u003Ch3\u003E要求: \u003Ccode\u003E$TOP\u002Findex.rs\u003C\u002Fcode\u003Eではなくsrc\u002Fの下においてcargoでコンパイルしたい。\u003C\u002Fh3\u003E\n\u003Cp\u003Enow.jsonでビルド元を指定すればよい。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&quot;builds&quot;: [\n\t{\n\t    &quot;src&quot;: &quot;src\u002Findex.rs&quot;,\n\t    &quot;use&quot;: &quot;@now\u002Frust&quot;\n\t}\n    ],\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&quot;routes&quot;: [\n\t{\n\t    &quot;src&quot;: &quot;\u002F&quot;,\n\t    &quot;dest&quot;: &quot;\u002Fsrc\u002F&quot;\n\t}\n    ]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい\u003C\u002Fh3\u003E\n\u003Cp\u003Eデプロイするのはsrc\u002Findex.rsなので、それ以外のソースにmain関数があればいい。\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002Ftarget\n\u002Fsrc\u002Fbin\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eそもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\nなのでそこに実行ファイルを置きたいならsrc\u002Fbinの下のファイルを\u003Ccode\u003Ecargo run -bin\u003C\u002Fcode\u003Eで実行しろと\nいう話。\u003C\u002Fp\u003E\n\u003Ch3\u003E要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない\u003C\u002Fh3\u003E\n\u003Cp\u003Ecargoのfeatureを使えばいい\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E# Cargo.toml\n\n[dependencies]\nhttp = &quot;0.1&quot;\nregex = &quot;1.1.0&quot;\nreqwest = { version = &quot;0.9.12&quot;, optional = true }\nscraper = { version = &quot;0.9.2&quot;, optional = true }\nserde = { version = &quot;1.0.89&quot;, features = [&quot;derive&quot;] }\nserde_json = &quot;1.0&quot;\nurl = { version = &quot;1.7.2&quot;, features = [ &quot;query_encoding&quot; ] }\n\n[features]\nprepare = [&quot;reqwest&quot;, &quot;scraper&quot;]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eこうしておいて、手元で実行するときは以下を実行。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ecargo run --bin xxx --features prepare\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eデプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。\u003C\u002Fp\u003E\n\u003Ch3\u003E要求：handlerを手元で実行する時も流用したい\u003C\u002Fh3\u003E\n\u003Cp\u003Ehandlerの型は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Efn handler(request: http::Request&lt;()&gt;) -&gt; http::Result&lt;http::Response&lt;String&gt;&gt;;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eなのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eまあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2019",base:"2019-03-17-now.json",ext:".json",sourceBase:"2019-03-17-now.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Memo about @now\u002Frust by Zeit"},subtitle:{writable:true,enumerable:true,value:"@now\u002Frustを使ったサーバーレスコンピューティング"},date:{writable:true,enumerable:true,value:"2019-03-10T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Rust"]},bodyContent:{writable:true,enumerable:true,value:"## 準備\n\nまずシステムを汚染しないようにnowをインストール：\n\n```\nnpm config set prefix ~\u002F.local\u002Fnpm\u002F\nnpm install -g now\nln -s ~\u002F.local\u002Fnpm\u002Fbin\u002Fnow `\u002F.local\u002Fbin\u002Fnow\n```\n\n## 試行\n\n[紹介ポスト](https:\u002F\u002Fzeit.co\u002Fblog\u002Fintroducing-now-rust)は色々と内容が古くなっているので[Document](https:\u002F\u002Fzeit.co\u002Fdocs\u002Fv2\u002Fdeployments\u002Fofficial-builders\u002Fnow-rust\u002F)をたどる方がよい。\n\n## Tips\n\n### 要求: `$TOP\u002Findex.rs`ではなくsrc\u002Fの下においてcargoでコンパイルしたい。\n\nnow.jsonでビルド元を指定すればよい。\n\n```json\n    \"builds\": [\n\t{\n\t    \"src\": \"src\u002Findex.rs\",\n\t    \"use\": \"@now\u002Frust\"\n\t}\n    ],\n```\n\nただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。\n\n```json\n    \"routes\": [\n\t{\n\t    \"src\": \"\u002F\",\n\t    \"dest\": \"\u002Fsrc\u002F\"\n\t}\n    ]\n```\n\n### 要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい\n\nデプロイするのはsrc\u002Findex.rsなので、それ以外のソースにmain関数があればいい。\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。\n\n```\n\u002Ftarget\n\u002Fsrc\u002Fbin\n...\n```\n\nそもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\nなのでそこに実行ファイルを置きたいならsrc\u002Fbinの下のファイルを`cargo run -bin`で実行しろと\nいう話。\n\n### 要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない\n\ncargoのfeatureを使えばいい\n\n\n```\n# Cargo.toml\n\n[dependencies]\nhttp = \"0.1\"\nregex = \"1.1.0\"\nreqwest = { version = \"0.9.12\", optional = true }\nscraper = { version = \"0.9.2\", optional = true }\nserde = { version = \"1.0.89\", features = [\"derive\"] }\nserde_json = \"1.0\"\nurl = { version = \"1.7.2\", features = [ \"query_encoding\" ] }\n\n[features]\nprepare = [\"reqwest\", \"scraper\"]\n```\n\nこうしておいて、手元で実行するときは以下を実行。\n\n```\ncargo run --bin xxx --features prepare\n```\n\nデプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。\n\n### 要求：handlerを手元で実行する時も流用したい\n\nhandlerの型は\n\n```\nfn handler(request: http::Request\u003C()\u003E) -\u003E http::Result\u003Chttp::Response\u003CString\u003E\u003E;\n```\n\nなのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。\n\nまあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch2\u003E準備\u003C\u002Fh2\u003E\n\u003Cp\u003Eまずシステムを汚染しないようにnowをインストール：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Enpm config set prefix ~\u002F.local\u002Fnpm\u002F\nnpm install -g now\nln -s ~\u002F.local\u002Fnpm\u002Fbin\u002Fnow `\u002F.local\u002Fbin\u002Fnow\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2\u003E試行\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fzeit.co\u002Fblog\u002Fintroducing-now-rust\"\u003E紹介ポスト\u003C\u002Fa\u003Eは色々と内容が古くなっているので\u003Ca href=\"https:\u002F\u002Fzeit.co\u002Fdocs\u002Fv2\u002Fdeployments\u002Fofficial-builders\u002Fnow-rust\u002F\"\u003EDocument\u003C\u002Fa\u003Eをたどる方がよい。\u003C\u002Fp\u003E\n\u003Ch2\u003ETips\u003C\u002Fh2\u003E\n\u003Ch3\u003E要求: \u003Ccode\u003E$TOP\u002Findex.rs\u003C\u002Fcode\u003Eではなくsrc\u002Fの下においてcargoでコンパイルしたい。\u003C\u002Fh3\u003E\n\u003Cp\u003Enow.jsonでビルド元を指定すればよい。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&quot;builds&quot;: [\n\t{\n\t    &quot;src&quot;: &quot;src\u002Findex.rs&quot;,\n\t    &quot;use&quot;: &quot;@now\u002Frust&quot;\n\t}\n    ],\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E&quot;routes&quot;: [\n\t{\n\t    &quot;src&quot;: &quot;\u002F&quot;,\n\t    &quot;dest&quot;: &quot;\u002Fsrc\u002F&quot;\n\t}\n    ]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい\u003C\u002Fh3\u003E\n\u003Cp\u003Eデプロイするのはsrc\u002Findex.rsなので、それ以外のソースにmain関数があればいい。\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E\u002Ftarget\n\u002Fsrc\u002Fbin\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eそもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\nなのでそこに実行ファイルを置きたいならsrc\u002Fbinの下のファイルを\u003Ccode\u003Ecargo run -bin\u003C\u002Fcode\u003Eで実行しろと\nいう話。\u003C\u002Fp\u003E\n\u003Ch3\u003E要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない\u003C\u002Fh3\u003E\n\u003Cp\u003Ecargoのfeatureを使えばいい\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003E# Cargo.toml\n\n[dependencies]\nhttp = &quot;0.1&quot;\nregex = &quot;1.1.0&quot;\nreqwest = { version = &quot;0.9.12&quot;, optional = true }\nscraper = { version = &quot;0.9.2&quot;, optional = true }\nserde = { version = &quot;1.0.89&quot;, features = [&quot;derive&quot;] }\nserde_json = &quot;1.0&quot;\nurl = { version = &quot;1.7.2&quot;, features = [ &quot;query_encoding&quot; ] }\n\n[features]\nprepare = [&quot;reqwest&quot;, &quot;scraper&quot;]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eこうしておいて、手元で実行するときは以下を実行。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ecargo run --bin xxx --features prepare\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eデプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。\u003C\u002Fp\u003E\n\u003Ch3\u003E要求：handlerを手元で実行する時も流用したい\u003C\u002Fh3\u003E\n\u003Cp\u003Ehandlerの型は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Efn handler(request: http::Request&lt;()&gt;) -&gt; http::Result&lt;http::Response&lt;String&gt;&gt;;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eなのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eまあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2019"},base:{writable:true,enumerable:true,value:"2019-03-17-now.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2019-03-17-now.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});