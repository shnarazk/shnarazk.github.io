__NUXT_JSONP__("/2018/2018-06-24-haskell-on-heroku", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Deploy a Servant program to Heroku with Docker",subtitle:"HaskellプログラムをHerokuで動かそう（2018年私家版）",date:"2018-06-24T00:00:00.000Z",tags:["haskell","servant","heroku","docker","gitlab","nixos"],bodyContent:"stackのテンプレートを使って\n[Dockerを使ってHaskellアプリをHerokuにデプロイする](https:\u002F\u002Fhaskell.jp\u002Fblog\u002Fposts\u002F2017\u002F02-haskell-on-heroku.html)\nと同じことをやってみます．\n\n### 下準備（オプショナル）\n\nstackに警告を出されないように，~\u002F.stack\u002Fconfig.yml に以下のような情報を追加しておくといいかも．\n\n```yaml\ntemplates:\n  params:\n    author-email: EMAIL\n    author-name:  NAME\n```\n\n### プロジェクトの生成\n\nstackのテンプレート `servant-docker` を使ってプロジェクトの雛形を作らせます．\n\n```\nstack new PROJECT [--bare] servant-docker [--solver SOLVER]\n```\n\n雛形なのでこれでデプロイまでできるはずなのですが，いくつか問題があるので修正します．\n\n### heroku用にプログラムを変更\n\nまず，herokuの環境でlistenすべきポート番号は環境変数で取得しないといけないのでそれを反映させます：\n\n```diff\ndiff --git a\u002Fsrc\u002FLib.hs b\u002Fsrc\u002FLib.hs\nindex 46ba8bc..c800dc5 100644\n--- a\u002Fsrc\u002FLib.hs\n+++ b\u002Fsrc\u002FLib.hs\n@@ -10,6 +10,7 @@ import Data.Aeson.TH\n import Network.Wai\n import Network.Wai.Handler.Warp\n import Servant\n+import System.ReadEnvVar (readEnvDef)\n\n data User = User\n   { userId        :: Int\n@@ -22,7 +23,10 @@ $(deriveJSON defaultOptions ''User)\n type API = \"users\" :\u003E Get '[JSON] [User]\n\n startApp :: IO ()\n-startApp = run 1234 app\n+startApp = do\n+  port \u003C- readEnvDef \"PORT\" 8080\n+  putStrLn $ \";;; start server at \" ++ show port\n+  run port app\n\n app :: Application\n app = serve api server\n```\n\n[ReadEnvVar](https:\u002F\u002Fgithub.com\u002Fcdepillabout\u002Fread-env-var)パッケージを追加したのでcabalファイルにも追加：\n\n```diff\ndiff --git a\u002Fappname.cabal b\u002Fappname.cabal\nindex b977aa5..e654f60 100644\n--- a\u002FPROJECT.cabal\n+++ b\u002FPROJECT.cabal\n@@ -18,6 +18,7 @@ library\n   exposed-modules:     Lib\n   build-depends:       base \u003E= 4.7 && \u003C 5\n                      , aeson\n+                     , read-env-var\n                      , servant-server\n                      , wai\n                      , warp\n```\n\n### 手動で確認\n\nここでコンパイルしてエラーがないことを確認します．\n\n```bash\n$ stack build\n```\n\n動作確認は\n\n```bash\n$ export PORT=8080; APP &\n$ wget http:\u002F\u002Flocalhost:8080\u002F\n```\n\n### Dockerイメージの作成\n\nまずdockerのイメージでプログラムが自動で実行されるようにDockerfile（ついでにstack.yml）を変更します．\n．\n\n```diff\n--- a\u002FDockerfile\n+++ b\u002FDockerfile\n@@ -9,3 +9,4 @@\n\n COPY . \u002Fapp\u002Fuser\n RUN stack install\n+CMD APP.EXE\n```\n\n```diff\nmodified   stack.yaml\n@@ -66,6 +66,15 @@ allow-newer: true\n # Allow a newer minor version of GHC than the snapshot specifies\n # compiler-check: newer-minor\n\n+image:\n+  containers:\n+    -\n+      base: \"haskell:8.4.3\"\n+      executables:\n+        - APP.EXE\n+      entrypoints:\n+        - APP.EXE\n```\n\n以下を実行してイメージを作ります：\n\n```\ndocker build -t APPNAME .\n```\n\n動作確認は\n\n```bash\n$ docker run -p 8080:8080 --publish-all APPNAME\n$ wget http:\u002F\u002Flocalhost:8080\u002F\n```\n\n### herokuへのデプロイ\n\n#### 初期設定\n\n1. アカウントを作る\n2. heroku dashboardでアプリの登録\n\n```sh\nheroku login\nheroku apps:create APPNAME\n```\n\n#### ビルドからデプロイ\n\n1. ログインする\n2. コンテナ環境での作業\n\n```sh\n$ heroku container:login\n$ heroku container:push web [--app APPNAME]\n$ heroku container:release web [--app APPNAME]\n```\n\n### gitlab-ci.ymlに登録\n\nうまく行ったなら自動化させます．当然gitlab用に `.gitlab-ci.yml` を作成：\n\n```\nbuild:\n  stage: build\n  script:\n    - docker build -t APPNAME .\n\ndeploy heroku:\n  stage: deploy\n  script:\n    - heroku container:login\n    - heroku container:push web --app APPNAME\n    - heroku container:release web --app APPNAME\n```\n\n（さらにherokuへのデプロイ用のキーを登録する必要があるかも）\n\nThat's it.\n\n## だったらstack templateにしてしまおう\n\nということで以上の変更をしたテンプレート https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw を作りました．\nテンプレートはurl指定で使えるので，以下のようにするのが一番速いでしょう．\n\n```\nstack new projectname https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\n```\n\nということで結論\n\n1. プロジェクト生成： `stack new PROJECT https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw`\n1. dockerで確認： `docker build -t PROJECT .`\n1. herokuにログイン： `heroku container:login`\n1. プッシュ: `heroku container:push web --app PROJECT`\n1. 実行開始: `heroku container:release web --app PROJECT`\n\n## PostgreSQLにつないでみよう\n\nこのプログラムはPostgreSQLを使うために外部プログラムを呼び出していません。\n対応するのは簡単で以下の通り：\n\n- Dockerのベースイメージを `nixos:2.0.4` に変更\n- servantのプログラムはtutorialの[Cookbook PostgreSQL connection pool](http:\u002F\u002Fhaskell-servant.readthedocs.io\u002Fen\u002Fstable\u002Fcookbook\u002Fdb-postgres-pool\u002FPostgresPool.html)をそのまま流用\n\nあとはherokuでpostgreSQLを有効にすればOK。\nDockerfileはこのようになりました。\n\n```\nFROM nixos\u002Fnix:2.0.4\nENV LANG C.UTF-8\n\nRUN nix-channel --update\nRUN nix-env -u\nRUN nix-env -f \"\u003Cnixpkgs\u003E\" -iA haskell.compiler.ghc843\nRUN nix-env -i stack\n\nWORKDIR \u002Fopt\u002FPROJECT\u002Fsrc\nENV PATH \"\u002Fopt\u002FPROJECT\u002Fbin:$PATH\"\n\n# Build and install application binaries to \u002Fopt\u002FPROJECT\u002Fbin.\nCOPY *.yaml \u002Fopt\u002FPROJECT\u002Fsrc\u002F\nRUN stack --no-terminal build --only-dependencies\nCOPY . \u002Fopt\u002FPROJECT\u002Fsrc\nRUN stack --no-terminal --local-bin-path \u002Fopt\u002FPROJECT\u002Fbin install\n\n# clean up and run\nRUN rm -rf \u002Fopt\u002FPROJECT\u002Fsrc\nCMD \u002Fopt\u002FPROJECT\u002Fbin\u002FPROJECT\n```",bodyHtml:"\u003Cp\u003Estackのテンプレートを使って\n\u003Ca href=\"https:\u002F\u002Fhaskell.jp\u002Fblog\u002Fposts\u002F2017\u002F02-haskell-on-heroku.html\"\u003EDockerを使ってHaskellアプリをHerokuにデプロイする\u003C\u002Fa\u003E\nと同じことをやってみます．\u003C\u002Fp\u003E\n\u003Ch3\u003E下準備（オプショナル）\u003C\u002Fh3\u003E\n\u003Cp\u003Estackに警告を出されないように，~\u002F.stack\u002Fconfig.yml に以下のような情報を追加しておくといいかも．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003Etemplates:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eparams:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eauthor-email:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EEMAIL\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eauthor-name:\u003C\u002Fspan\u003E  \u003Cspan class=\"hljs-string\"\u003ENAME\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eプロジェクトの生成\u003C\u002Fh3\u003E\n\u003Cp\u003Estackのテンプレート \u003Ccode\u003Eservant-docker\u003C\u002Fcode\u003E を使ってプロジェクトの雛形を作らせます．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Estack new PROJECT [--bare] servant-docker [--solver SOLVER]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E雛形なのでこれでデプロイまでできるはずなのですが，いくつか問題があるので修正します．\u003C\u002Fp\u003E\n\u003Ch3\u003Eheroku用にプログラムを変更\u003C\u002Fh3\u003E\n\u003Cp\u003Eまず，herokuの環境でlistenすべきポート番号は環境変数で取得しないといけないのでそれを反映させます：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003Ediff --git a\u002Fsrc\u002FLib.hs b\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003Eindex 46ba8bc..c800dc5 100644\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E--- a\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -10,6 +10,7 @@\u003C\u002Fspan\u003E import Data.Aeson.TH\n import Network.Wai\n import Network.Wai.Handler.Warp\n import Servant\n\u003Cspan class=\"hljs-addition\"\u003E+import System.ReadEnvVar (readEnvDef)\u003C\u002Fspan\u003E\n\n data User = User\n   { userId        :: Int\n\u003Cspan class=\"hljs-meta\"\u003E@@ -22,7 +23,10 @@\u003C\u002Fspan\u003E $(deriveJSON defaultOptions &#x27;&#x27;User)\n type API = &quot;users&quot; :&gt; Get &#x27;[JSON] [User]\n\n startApp :: IO ()\n\u003Cspan class=\"hljs-deletion\"\u003E-startApp = run 1234 app\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+startApp = do\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  port &lt;- readEnvDef &quot;PORT&quot; 8080\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  putStrLn $ &quot;;;; start server at &quot; ++ show port\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  run port app\u003C\u002Fspan\u003E\n\n app :: Application\n app = serve api server\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcdepillabout\u002Fread-env-var\"\u003EReadEnvVar\u003C\u002Fa\u003Eパッケージを追加したのでcabalファイルにも追加：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003Ediff --git a\u002Fappname.cabal b\u002Fappname.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003Eindex b977aa5..e654f60 100644\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E--- a\u002FPROJECT.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002FPROJECT.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -18,6 +18,7 @@\u003C\u002Fspan\u003E library\n   exposed-modules:     Lib\n   build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5\n                      , aeson\n\u003Cspan class=\"hljs-addition\"\u003E+                     , read-env-var\u003C\u002Fspan\u003E\n                      , servant-server\n                      , wai\n                      , warp\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E手動で確認\u003C\u002Fh3\u003E\n\u003Cp\u003Eここでコンパイルしてエラーがないことを確認します．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ stack build\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E動作確認は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ \u003Cspan class=\"hljs-built_in\"\u003Eexport\u003C\u002Fspan\u003E PORT=8080; APP &amp;\n$ wget http:\u002F\u002Flocalhost:8080\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003EDockerイメージの作成\u003C\u002Fh3\u003E\n\u003Cp\u003Eまずdockerのイメージでプログラムが自動で実行されるようにDockerfile（ついでにstack.yml）を変更します．\n．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E--- a\u002FDockerfile\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002FDockerfile\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -9,3 +9,4 @@\u003C\u002Fspan\u003E\n\n COPY . \u002Fapp\u002Fuser\n RUN stack install\n\u003Cspan class=\"hljs-addition\"\u003E+CMD APP.EXE\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Emodified   stack.yaml\n\u003Cspan class=\"hljs-meta\"\u003E@@ -66,6 +66,15 @@\u003C\u002Fspan\u003E allow-newer: true\n # Allow a newer minor version of GHC than the snapshot specifies\n # compiler-check: newer-minor\n\n\u003Cspan class=\"hljs-addition\"\u003E+image:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  containers:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    -\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      base: &quot;haskell:8.4.3&quot;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      executables:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+        - APP.EXE\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      entrypoints:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+        - APP.EXE\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E以下を実行してイメージを作ります：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Edocker build -t APPNAME .\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E動作確認は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ docker run -p 8080:8080 --publish-all APPNAME\n$ wget http:\u002F\u002Flocalhost:8080\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eherokuへのデプロイ\u003C\u002Fh3\u003E\n\u003Ch4\u003E初期設定\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003Eアカウントを作る\u003C\u002Fli\u003E\n\u003Cli\u003Eheroku dashboardでアプリの登録\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Eheroku login\nheroku apps:create APPNAME\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003Eビルドからデプロイ\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003Eログインする\u003C\u002Fli\u003E\n\u003Cli\u003Eコンテナ環境での作業\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ heroku container:login\n$ heroku container:push web [--app APPNAME]\n$ heroku container:release web [--app APPNAME]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Egitlab-ci.ymlに登録\u003C\u002Fh3\u003E\n\u003Cp\u003Eうまく行ったなら自動化させます．当然gitlab用に \u003Ccode\u003E.gitlab-ci.yml\u003C\u002Fcode\u003E を作成：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ebuild:\n  stage: build\n  script:\n    - docker build -t APPNAME .\n\ndeploy heroku:\n  stage: deploy\n  script:\n    - heroku container:login\n    - heroku container:push web --app APPNAME\n    - heroku container:release web --app APPNAME\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E（さらにherokuへのデプロイ用のキーを登録する必要があるかも）\u003C\u002Fp\u003E\n\u003Cp\u003EThat's it.\u003C\u002Fp\u003E\n\u003Ch2\u003Eだったらstack templateにしてしまおう\u003C\u002Fh2\u003E\n\u003Cp\u003Eということで以上の変更をしたテンプレート https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw を作りました．\nテンプレートはurl指定で使えるので，以下のようにするのが一番速いでしょう．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Estack new projectname https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eということで結論\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eプロジェクト生成： \u003Ccode\u003Estack new PROJECT https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Edockerで確認： \u003Ccode\u003Edocker build -t PROJECT .\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Eherokuにログイン： \u003Ccode\u003Eheroku container:login\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Eプッシュ: \u003Ccode\u003Eheroku container:push web --app PROJECT\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E実行開始: \u003Ccode\u003Eheroku container:release web --app PROJECT\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003EPostgreSQLにつないでみよう\u003C\u002Fh2\u003E\n\u003Cp\u003EこのプログラムはPostgreSQLを使うために外部プログラムを呼び出していません。\n対応するのは簡単で以下の通り：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EDockerのベースイメージを \u003Ccode\u003Enixos:2.0.4\u003C\u002Fcode\u003E に変更\u003C\u002Fli\u003E\n\u003Cli\u003Eservantのプログラムはtutorialの\u003Ca href=\"http:\u002F\u002Fhaskell-servant.readthedocs.io\u002Fen\u002Fstable\u002Fcookbook\u002Fdb-postgres-pool\u002FPostgresPool.html\"\u003ECookbook PostgreSQL connection pool\u003C\u002Fa\u003Eをそのまま流用\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EあとはherokuでpostgreSQLを有効にすればOK。\nDockerfileはこのようになりました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003EFROM nixos\u002Fnix:2.0.4\nENV LANG C.UTF-8\n\nRUN nix-channel --update\nRUN nix-env -u\nRUN nix-env -f &quot;&lt;nixpkgs&gt;&quot; -iA haskell.compiler.ghc843\nRUN nix-env -i stack\n\nWORKDIR \u002Fopt\u002FPROJECT\u002Fsrc\nENV PATH &quot;\u002Fopt\u002FPROJECT\u002Fbin:$PATH&quot;\n\n# Build and install application binaries to \u002Fopt\u002FPROJECT\u002Fbin.\nCOPY *.yaml \u002Fopt\u002FPROJECT\u002Fsrc\u002F\nRUN stack --no-terminal build --only-dependencies\nCOPY . \u002Fopt\u002FPROJECT\u002Fsrc\nRUN stack --no-terminal --local-bin-path \u002Fopt\u002FPROJECT\u002Fbin install\n\n# clean up and run\nRUN rm -rf \u002Fopt\u002FPROJECT\u002Fsrc\nCMD \u002Fopt\u002FPROJECT\u002Fbin\u002FPROJECT\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",dir:"article\u002F.json\u002F2018",base:"2018-06-24-haskell-on-heroku.json",ext:".json",sourceBase:"2018-06-24-haskell-on-heroku.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Deploy a Servant program to Heroku with Docker"},subtitle:{writable:true,enumerable:true,value:"HaskellプログラムをHerokuで動かそう（2018年私家版）"},date:{writable:true,enumerable:true,value:"2018-06-24T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["haskell","servant","heroku","docker","gitlab","nixos"]},bodyContent:{writable:true,enumerable:true,value:"stackのテンプレートを使って\n[Dockerを使ってHaskellアプリをHerokuにデプロイする](https:\u002F\u002Fhaskell.jp\u002Fblog\u002Fposts\u002F2017\u002F02-haskell-on-heroku.html)\nと同じことをやってみます．\n\n### 下準備（オプショナル）\n\nstackに警告を出されないように，~\u002F.stack\u002Fconfig.yml に以下のような情報を追加しておくといいかも．\n\n```yaml\ntemplates:\n  params:\n    author-email: EMAIL\n    author-name:  NAME\n```\n\n### プロジェクトの生成\n\nstackのテンプレート `servant-docker` を使ってプロジェクトの雛形を作らせます．\n\n```\nstack new PROJECT [--bare] servant-docker [--solver SOLVER]\n```\n\n雛形なのでこれでデプロイまでできるはずなのですが，いくつか問題があるので修正します．\n\n### heroku用にプログラムを変更\n\nまず，herokuの環境でlistenすべきポート番号は環境変数で取得しないといけないのでそれを反映させます：\n\n```diff\ndiff --git a\u002Fsrc\u002FLib.hs b\u002Fsrc\u002FLib.hs\nindex 46ba8bc..c800dc5 100644\n--- a\u002Fsrc\u002FLib.hs\n+++ b\u002Fsrc\u002FLib.hs\n@@ -10,6 +10,7 @@ import Data.Aeson.TH\n import Network.Wai\n import Network.Wai.Handler.Warp\n import Servant\n+import System.ReadEnvVar (readEnvDef)\n\n data User = User\n   { userId        :: Int\n@@ -22,7 +23,10 @@ $(deriveJSON defaultOptions ''User)\n type API = \"users\" :\u003E Get '[JSON] [User]\n\n startApp :: IO ()\n-startApp = run 1234 app\n+startApp = do\n+  port \u003C- readEnvDef \"PORT\" 8080\n+  putStrLn $ \";;; start server at \" ++ show port\n+  run port app\n\n app :: Application\n app = serve api server\n```\n\n[ReadEnvVar](https:\u002F\u002Fgithub.com\u002Fcdepillabout\u002Fread-env-var)パッケージを追加したのでcabalファイルにも追加：\n\n```diff\ndiff --git a\u002Fappname.cabal b\u002Fappname.cabal\nindex b977aa5..e654f60 100644\n--- a\u002FPROJECT.cabal\n+++ b\u002FPROJECT.cabal\n@@ -18,6 +18,7 @@ library\n   exposed-modules:     Lib\n   build-depends:       base \u003E= 4.7 && \u003C 5\n                      , aeson\n+                     , read-env-var\n                      , servant-server\n                      , wai\n                      , warp\n```\n\n### 手動で確認\n\nここでコンパイルしてエラーがないことを確認します．\n\n```bash\n$ stack build\n```\n\n動作確認は\n\n```bash\n$ export PORT=8080; APP &\n$ wget http:\u002F\u002Flocalhost:8080\u002F\n```\n\n### Dockerイメージの作成\n\nまずdockerのイメージでプログラムが自動で実行されるようにDockerfile（ついでにstack.yml）を変更します．\n．\n\n```diff\n--- a\u002FDockerfile\n+++ b\u002FDockerfile\n@@ -9,3 +9,4 @@\n\n COPY . \u002Fapp\u002Fuser\n RUN stack install\n+CMD APP.EXE\n```\n\n```diff\nmodified   stack.yaml\n@@ -66,6 +66,15 @@ allow-newer: true\n # Allow a newer minor version of GHC than the snapshot specifies\n # compiler-check: newer-minor\n\n+image:\n+  containers:\n+    -\n+      base: \"haskell:8.4.3\"\n+      executables:\n+        - APP.EXE\n+      entrypoints:\n+        - APP.EXE\n```\n\n以下を実行してイメージを作ります：\n\n```\ndocker build -t APPNAME .\n```\n\n動作確認は\n\n```bash\n$ docker run -p 8080:8080 --publish-all APPNAME\n$ wget http:\u002F\u002Flocalhost:8080\u002F\n```\n\n### herokuへのデプロイ\n\n#### 初期設定\n\n1. アカウントを作る\n2. heroku dashboardでアプリの登録\n\n```sh\nheroku login\nheroku apps:create APPNAME\n```\n\n#### ビルドからデプロイ\n\n1. ログインする\n2. コンテナ環境での作業\n\n```sh\n$ heroku container:login\n$ heroku container:push web [--app APPNAME]\n$ heroku container:release web [--app APPNAME]\n```\n\n### gitlab-ci.ymlに登録\n\nうまく行ったなら自動化させます．当然gitlab用に `.gitlab-ci.yml` を作成：\n\n```\nbuild:\n  stage: build\n  script:\n    - docker build -t APPNAME .\n\ndeploy heroku:\n  stage: deploy\n  script:\n    - heroku container:login\n    - heroku container:push web --app APPNAME\n    - heroku container:release web --app APPNAME\n```\n\n（さらにherokuへのデプロイ用のキーを登録する必要があるかも）\n\nThat's it.\n\n## だったらstack templateにしてしまおう\n\nということで以上の変更をしたテンプレート https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw を作りました．\nテンプレートはurl指定で使えるので，以下のようにするのが一番速いでしょう．\n\n```\nstack new projectname https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\n```\n\nということで結論\n\n1. プロジェクト生成： `stack new PROJECT https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw`\n1. dockerで確認： `docker build -t PROJECT .`\n1. herokuにログイン： `heroku container:login`\n1. プッシュ: `heroku container:push web --app PROJECT`\n1. 実行開始: `heroku container:release web --app PROJECT`\n\n## PostgreSQLにつないでみよう\n\nこのプログラムはPostgreSQLを使うために外部プログラムを呼び出していません。\n対応するのは簡単で以下の通り：\n\n- Dockerのベースイメージを `nixos:2.0.4` に変更\n- servantのプログラムはtutorialの[Cookbook PostgreSQL connection pool](http:\u002F\u002Fhaskell-servant.readthedocs.io\u002Fen\u002Fstable\u002Fcookbook\u002Fdb-postgres-pool\u002FPostgresPool.html)をそのまま流用\n\nあとはherokuでpostgreSQLを有効にすればOK。\nDockerfileはこのようになりました。\n\n```\nFROM nixos\u002Fnix:2.0.4\nENV LANG C.UTF-8\n\nRUN nix-channel --update\nRUN nix-env -u\nRUN nix-env -f \"\u003Cnixpkgs\u003E\" -iA haskell.compiler.ghc843\nRUN nix-env -i stack\n\nWORKDIR \u002Fopt\u002FPROJECT\u002Fsrc\nENV PATH \"\u002Fopt\u002FPROJECT\u002Fbin:$PATH\"\n\n# Build and install application binaries to \u002Fopt\u002FPROJECT\u002Fbin.\nCOPY *.yaml \u002Fopt\u002FPROJECT\u002Fsrc\u002F\nRUN stack --no-terminal build --only-dependencies\nCOPY . \u002Fopt\u002FPROJECT\u002Fsrc\nRUN stack --no-terminal --local-bin-path \u002Fopt\u002FPROJECT\u002Fbin install\n\n# clean up and run\nRUN rm -rf \u002Fopt\u002FPROJECT\u002Fsrc\nCMD \u002Fopt\u002FPROJECT\u002Fbin\u002FPROJECT\n```"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003Estackのテンプレートを使って\n\u003Ca href=\"https:\u002F\u002Fhaskell.jp\u002Fblog\u002Fposts\u002F2017\u002F02-haskell-on-heroku.html\"\u003EDockerを使ってHaskellアプリをHerokuにデプロイする\u003C\u002Fa\u003E\nと同じことをやってみます．\u003C\u002Fp\u003E\n\u003Ch3\u003E下準備（オプショナル）\u003C\u002Fh3\u003E\n\u003Cp\u003Estackに警告を出されないように，~\u002F.stack\u002Fconfig.yml に以下のような情報を追加しておくといいかも．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-attr\"\u003Etemplates:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-attr\"\u003Eparams:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eauthor-email:\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-string\"\u003EEMAIL\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-attr\"\u003Eauthor-name:\u003C\u002Fspan\u003E  \u003Cspan class=\"hljs-string\"\u003ENAME\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eプロジェクトの生成\u003C\u002Fh3\u003E\n\u003Cp\u003Estackのテンプレート \u003Ccode\u003Eservant-docker\u003C\u002Fcode\u003E を使ってプロジェクトの雛形を作らせます．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Estack new PROJECT [--bare] servant-docker [--solver SOLVER]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E雛形なのでこれでデプロイまでできるはずなのですが，いくつか問題があるので修正します．\u003C\u002Fp\u003E\n\u003Ch3\u003Eheroku用にプログラムを変更\u003C\u002Fh3\u003E\n\u003Cp\u003Eまず，herokuの環境でlistenすべきポート番号は環境変数で取得しないといけないのでそれを反映させます：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003Ediff --git a\u002Fsrc\u002FLib.hs b\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003Eindex 46ba8bc..c800dc5 100644\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E--- a\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002Fsrc\u002FLib.hs\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -10,6 +10,7 @@\u003C\u002Fspan\u003E import Data.Aeson.TH\n import Network.Wai\n import Network.Wai.Handler.Warp\n import Servant\n\u003Cspan class=\"hljs-addition\"\u003E+import System.ReadEnvVar (readEnvDef)\u003C\u002Fspan\u003E\n\n data User = User\n   { userId        :: Int\n\u003Cspan class=\"hljs-meta\"\u003E@@ -22,7 +23,10 @@\u003C\u002Fspan\u003E $(deriveJSON defaultOptions &#x27;&#x27;User)\n type API = &quot;users&quot; :&gt; Get &#x27;[JSON] [User]\n\n startApp :: IO ()\n\u003Cspan class=\"hljs-deletion\"\u003E-startApp = run 1234 app\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+startApp = do\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  port &lt;- readEnvDef &quot;PORT&quot; 8080\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  putStrLn $ &quot;;;; start server at &quot; ++ show port\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  run port app\u003C\u002Fspan\u003E\n\n app :: Application\n app = serve api server\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fcdepillabout\u002Fread-env-var\"\u003EReadEnvVar\u003C\u002Fa\u003Eパッケージを追加したのでcabalファイルにも追加：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003Ediff --git a\u002Fappname.cabal b\u002Fappname.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003Eindex b977aa5..e654f60 100644\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E--- a\u002FPROJECT.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002FPROJECT.cabal\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -18,6 +18,7 @@\u003C\u002Fspan\u003E library\n   exposed-modules:     Lib\n   build-depends:       base &gt;= 4.7 &amp;&amp; &lt; 5\n                      , aeson\n\u003Cspan class=\"hljs-addition\"\u003E+                     , read-env-var\u003C\u002Fspan\u003E\n                      , servant-server\n                      , wai\n                      , warp\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E手動で確認\u003C\u002Fh3\u003E\n\u003Cp\u003Eここでコンパイルしてエラーがないことを確認します．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ stack build\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E動作確認は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ \u003Cspan class=\"hljs-built_in\"\u003Eexport\u003C\u002Fspan\u003E PORT=8080; APP &amp;\n$ wget http:\u002F\u002Flocalhost:8080\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003EDockerイメージの作成\u003C\u002Fh3\u003E\n\u003Cp\u003Eまずdockerのイメージでプログラムが自動で実行されるようにDockerfile（ついでにstack.yml）を変更します．\n．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-comment\"\u003E--- a\u002FDockerfile\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-comment\"\u003E+++ b\u002FDockerfile\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-meta\"\u003E@@ -9,3 +9,4 @@\u003C\u002Fspan\u003E\n\n COPY . \u002Fapp\u002Fuser\n RUN stack install\n\u003Cspan class=\"hljs-addition\"\u003E+CMD APP.EXE\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Emodified   stack.yaml\n\u003Cspan class=\"hljs-meta\"\u003E@@ -66,6 +66,15 @@\u003C\u002Fspan\u003E allow-newer: true\n # Allow a newer minor version of GHC than the snapshot specifies\n # compiler-check: newer-minor\n\n\u003Cspan class=\"hljs-addition\"\u003E+image:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+  containers:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+    -\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      base: &quot;haskell:8.4.3&quot;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      executables:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+        - APP.EXE\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+      entrypoints:\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+        - APP.EXE\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E以下を実行してイメージを作ります：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Edocker build -t APPNAME .\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E動作確認は\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ docker run -p 8080:8080 --publish-all APPNAME\n$ wget http:\u002F\u002Flocalhost:8080\u002F\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Eherokuへのデプロイ\u003C\u002Fh3\u003E\n\u003Ch4\u003E初期設定\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003Eアカウントを作る\u003C\u002Fli\u003E\n\u003Cli\u003Eheroku dashboardでアプリの登録\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003Eheroku login\nheroku apps:create APPNAME\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch4\u003Eビルドからデプロイ\u003C\u002Fh4\u003E\n\u003Col\u003E\n\u003Cli\u003Eログインする\u003C\u002Fli\u003E\n\u003Cli\u003Eコンテナ環境での作業\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ heroku container:login\n$ heroku container:push web [--app APPNAME]\n$ heroku container:release web [--app APPNAME]\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003Egitlab-ci.ymlに登録\u003C\u002Fh3\u003E\n\u003Cp\u003Eうまく行ったなら自動化させます．当然gitlab用に \u003Ccode\u003E.gitlab-ci.yml\u003C\u002Fcode\u003E を作成：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Ebuild:\n  stage: build\n  script:\n    - docker build -t APPNAME .\n\ndeploy heroku:\n  stage: deploy\n  script:\n    - heroku container:login\n    - heroku container:push web --app APPNAME\n    - heroku container:release web --app APPNAME\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003E（さらにherokuへのデプロイ用のキーを登録する必要があるかも）\u003C\u002Fp\u003E\n\u003Cp\u003EThat's it.\u003C\u002Fp\u003E\n\u003Ch2\u003Eだったらstack templateにしてしまおう\u003C\u002Fh2\u003E\n\u003Cp\u003Eということで以上の変更をしたテンプレート https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw を作りました．\nテンプレートはurl指定で使えるので，以下のようにするのが一番速いでしょう．\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003Estack new projectname https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cp\u003Eということで結論\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003Eプロジェクト生成： \u003Ccode\u003Estack new PROJECT https:\u002F\u002Fgitlab.com\u002Fsnippets\u002F1728485\u002Fraw\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Edockerで確認： \u003Ccode\u003Edocker build -t PROJECT .\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Eherokuにログイン： \u003Ccode\u003Eheroku container:login\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Eプッシュ: \u003Ccode\u003Eheroku container:push web --app PROJECT\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E実行開始: \u003Ccode\u003Eheroku container:release web --app PROJECT\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003EPostgreSQLにつないでみよう\u003C\u002Fh2\u003E\n\u003Cp\u003EこのプログラムはPostgreSQLを使うために外部プログラムを呼び出していません。\n対応するのは簡単で以下の通り：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EDockerのベースイメージを \u003Ccode\u003Enixos:2.0.4\u003C\u002Fcode\u003E に変更\u003C\u002Fli\u003E\n\u003Cli\u003Eservantのプログラムはtutorialの\u003Ca href=\"http:\u002F\u002Fhaskell-servant.readthedocs.io\u002Fen\u002Fstable\u002Fcookbook\u002Fdb-postgres-pool\u002FPostgresPool.html\"\u003ECookbook PostgreSQL connection pool\u003C\u002Fa\u003Eをそのまま流用\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003EあとはherokuでpostgreSQLを有効にすればOK。\nDockerfileはこのようになりました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003EFROM nixos\u002Fnix:2.0.4\nENV LANG C.UTF-8\n\nRUN nix-channel --update\nRUN nix-env -u\nRUN nix-env -f &quot;&lt;nixpkgs&gt;&quot; -iA haskell.compiler.ghc843\nRUN nix-env -i stack\n\nWORKDIR \u002Fopt\u002FPROJECT\u002Fsrc\nENV PATH &quot;\u002Fopt\u002FPROJECT\u002Fbin:$PATH&quot;\n\n# Build and install application binaries to \u002Fopt\u002FPROJECT\u002Fbin.\nCOPY *.yaml \u002Fopt\u002FPROJECT\u002Fsrc\u002F\nRUN stack --no-terminal build --only-dependencies\nCOPY . \u002Fopt\u002FPROJECT\u002Fsrc\nRUN stack --no-terminal --local-bin-path \u002Fopt\u002FPROJECT\u002Fbin install\n\n# clean up and run\nRUN rm -rf \u002Fopt\u002FPROJECT\u002Fsrc\nCMD \u002Fopt\u002FPROJECT\u002Fbin\u002FPROJECT\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2018"},base:{writable:true,enumerable:true,value:"2018-06-24-haskell-on-heroku.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2018-06-24-haskell-on-heroku.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});