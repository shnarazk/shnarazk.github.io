__NUXT_JSONP__("/2020/2020-06-13-clap3", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Clap-3.0.0-beta.1",subtitle:"from StructOpt",date:"2020-06-13T00:00:00.000Z",tags:["Rust"],bodyContent:"[Clap](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fclap)-3.0だと[StructOpt](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fstructopt)が要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。\n\n### 1. PathBufの取扱いの違い\n\nStructOptでは問題なくオプションになる以下のフィールドは、\n\n```rust\n   #[structopt(long = \"result\", default_value = \"\", parse(from_os_str))]\n   pub result: PathBuf,\n```\n\nClapでは引数が指定されてないエラーを起こしてしまう。\ndefault_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：\n\n```rust\n    #[clap(long = \"result\")]\n    pub result: Option\u003CPathBuf\u003E,\n```\n\nこれで解決するのだが、なんかスマートではない。\n\n### 2. StructOpt::from_iterがない\n\nこれはClap::prase_fromに置き換えることが必要（そもそも、これを内部で呼び出しているだけ）。\nもう一つ書き替えがあったのでまとめると、以下の通り。\n\n- `StructOpt::from_args` -\u003E `Clap::parse`\n- `StructOpt::from_iter` -\u003E `Clap::parse_from`\n\n\n## 依存関係\n\nclapがstructoptを取り込んだようなものなので、基本は変化がないはず。\nしかし、開発時期の違いだろうか、依存クレートにバージョンの違いが見られる。\nまたclapのメジャーバージョンアップということでcurses的なものに変化があった（共通部は省略）：\n\n* structopt\n\n```plaintext\n$ cargo tree \nsplr v0.4.2-dev.1\n└── structopt v0.3.14\n    ├── clap v2.33.1\n    │   ├── ansi_term v0.11.0\n    │   └── strsim v0.8.0\n    └── structopt-derive v0.4.7\n        └── proc-macro-error v1.0.2\n            └── proc-macro-error-attr v1.0.2\n```\n\n* clap-3.0.0\n\n```plaintext\n$ cargo tree \nsplr v0.4.2-dev.0\n└── clap v3.0.0-beta.1\n    ├── clap_derive v3.0.0-beta.1\n    │   └── proc-macro-error v0.4.12\n    │       └── proc-macro-error-attr v0.4.12\n    ├── indexmap v1.4.0\n    │   [build-dependencies]\n    │   └── autocfg v1.0.0\n    ├── os_str_bytes v2.3.1\n    ├── strsim v0.10.0\n    └── termcolor v1.1.0\n```\n\nでコンパイルしてみるとclapを使った方が（strip後のサイズで）70KBほど大きくなってしまう。\nうーん、それはどうなのか。。。\n\nコンパイル時間や実行時間に関しては見ていない。多分大きな差はないだろう。",bodyHtml:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fclap\"\u003EClap\u003C\u002Fa\u003E-3.0だと\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fstructopt\"\u003EStructOpt\u003C\u002Fa\u003Eが要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。\u003C\u002Fp\u003E\n\u003Ch3\u003E1. PathBufの取扱いの違い\u003C\u002Fh3\u003E\n\u003Cp\u003EStructOptでは問題なくオプションになる以下のフィールドは、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[structopt(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;result&quot;\u003C\u002Fspan\u003E, default_value = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E, parse(from_os_str))]\u003C\u002Fspan\u003E\n   \u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E result: PathBuf,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EClapでは引数が指定されてないエラーを起こしてしまう。\ndefault_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[clap(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;result&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E result: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;PathBuf&gt;,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれで解決するのだが、なんかスマートではない。\u003C\u002Fp\u003E\n\u003Ch3\u003E2. StructOpt::from_iterがない\u003C\u002Fh3\u003E\n\u003Cp\u003EこれはClap::prase_fromに置き換えることが必要（そもそも、これを内部で呼び出しているだけ）。\nもう一つ書き替えがあったのでまとめると、以下の通り。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EStructOpt::from_args\u003C\u002Fcode\u003E -&gt; \u003Ccode\u003EClap::parse\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EStructOpt::from_iter\u003C\u002Fcode\u003E -&gt; \u003Ccode\u003EClap::parse_from\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003E依存関係\u003C\u002Fh2\u003E\n\u003Cp\u003Eclapがstructoptを取り込んだようなものなので、基本は変化がないはず。\nしかし、開発時期の違いだろうか、依存クレートにバージョンの違いが見られる。\nまたclapのメジャーバージョンアップということでcurses的なものに変化があった（共通部は省略）：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Estructopt\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ cargo tree \nsplr v0.4.2-dev.1\n└── structopt v0.3.14\n    ├── clap v2.33.1\n    │   ├── ansi_term v0.11.0\n    │   └── strsim v0.8.0\n    └── structopt-derive v0.4.7\n        └── proc-macro-error v1.0.2\n            └── proc-macro-error-attr v1.0.2\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003Eclap-3.0.0\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ cargo tree \nsplr v0.4.2-dev.0\n└── clap v3.0.0-beta.1\n    ├── clap_derive v3.0.0-beta.1\n    │   └── proc-macro-error v0.4.12\n    │       └── proc-macro-error-attr v0.4.12\n    ├── indexmap v1.4.0\n    │   [build-dependencies]\n    │   └── autocfg v1.0.0\n    ├── os_str_bytes v2.3.1\n    ├── strsim v0.10.0\n    └── termcolor v1.1.0\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでコンパイルしてみるとclapを使った方が（strip後のサイズで）70KBほど大きくなってしまう。\nうーん、それはどうなのか。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eコンパイル時間や実行時間に関しては見ていない。多分大きな差はないだろう。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-06-13-clap3.json",ext:".json",sourceBase:"2020-06-13-clap3.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Clap-3.0.0-beta.1"},subtitle:{writable:true,enumerable:true,value:"from StructOpt"},date:{writable:true,enumerable:true,value:"2020-06-13T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Rust"]},bodyContent:{writable:true,enumerable:true,value:"[Clap](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fclap)-3.0だと[StructOpt](https:\u002F\u002Fcrates.io\u002Fcrates\u002Fstructopt)が要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。\n\n### 1. PathBufの取扱いの違い\n\nStructOptでは問題なくオプションになる以下のフィールドは、\n\n```rust\n   #[structopt(long = \"result\", default_value = \"\", parse(from_os_str))]\n   pub result: PathBuf,\n```\n\nClapでは引数が指定されてないエラーを起こしてしまう。\ndefault_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：\n\n```rust\n    #[clap(long = \"result\")]\n    pub result: Option\u003CPathBuf\u003E,\n```\n\nこれで解決するのだが、なんかスマートではない。\n\n### 2. StructOpt::from_iterがない\n\nこれはClap::prase_fromに置き換えることが必要（そもそも、これを内部で呼び出しているだけ）。\nもう一つ書き替えがあったのでまとめると、以下の通り。\n\n- `StructOpt::from_args` -\u003E `Clap::parse`\n- `StructOpt::from_iter` -\u003E `Clap::parse_from`\n\n\n## 依存関係\n\nclapがstructoptを取り込んだようなものなので、基本は変化がないはず。\nしかし、開発時期の違いだろうか、依存クレートにバージョンの違いが見られる。\nまたclapのメジャーバージョンアップということでcurses的なものに変化があった（共通部は省略）：\n\n* structopt\n\n```plaintext\n$ cargo tree \nsplr v0.4.2-dev.1\n└── structopt v0.3.14\n    ├── clap v2.33.1\n    │   ├── ansi_term v0.11.0\n    │   └── strsim v0.8.0\n    └── structopt-derive v0.4.7\n        └── proc-macro-error v1.0.2\n            └── proc-macro-error-attr v1.0.2\n```\n\n* clap-3.0.0\n\n```plaintext\n$ cargo tree \nsplr v0.4.2-dev.0\n└── clap v3.0.0-beta.1\n    ├── clap_derive v3.0.0-beta.1\n    │   └── proc-macro-error v0.4.12\n    │       └── proc-macro-error-attr v0.4.12\n    ├── indexmap v1.4.0\n    │   [build-dependencies]\n    │   └── autocfg v1.0.0\n    ├── os_str_bytes v2.3.1\n    ├── strsim v0.10.0\n    └── termcolor v1.1.0\n```\n\nでコンパイルしてみるとclapを使った方が（strip後のサイズで）70KBほど大きくなってしまう。\nうーん、それはどうなのか。。。\n\nコンパイル時間や実行時間に関しては見ていない。多分大きな差はないだろう。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fclap\"\u003EClap\u003C\u002Fa\u003E-3.0だと\u003Ca href=\"https:\u002F\u002Fcrates.io\u002Fcrates\u002Fstructopt\"\u003EStructOpt\u003C\u002Fa\u003Eが要らなくなるのでclap-3.0.0-beta.1をちょっと試してみた。\u003C\u002Fp\u003E\n\u003Ch3\u003E1. PathBufの取扱いの違い\u003C\u002Fh3\u003E\n\u003Cp\u003EStructOptでは問題なくオプションになる以下のフィールドは、\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[structopt(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;result&quot;\u003C\u002Fspan\u003E, default_value = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;&quot;\u003C\u002Fspan\u003E, parse(from_os_str))]\u003C\u002Fspan\u003E\n   \u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E result: PathBuf,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EClapでは引数が指定されてないエラーを起こしてしまう。\ndefault_valueを空以外にすれば直るのだが、それは困る、Optionでくるむことにした：\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-meta\"\u003E#[clap(long = \u003Cspan class=\"hljs-meta-string\"\u003E&quot;result&quot;\u003C\u002Fspan\u003E)]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Epub\u003C\u002Fspan\u003E result: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;PathBuf&gt;,\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eこれで解決するのだが、なんかスマートではない。\u003C\u002Fp\u003E\n\u003Ch3\u003E2. StructOpt::from_iterがない\u003C\u002Fh3\u003E\n\u003Cp\u003EこれはClap::prase_fromに置き換えることが必要（そもそも、これを内部で呼び出しているだけ）。\nもう一つ書き替えがあったのでまとめると、以下の通り。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003EStructOpt::from_args\u003C\u002Fcode\u003E -&gt; \u003Ccode\u003EClap::parse\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003EStructOpt::from_iter\u003C\u002Fcode\u003E -&gt; \u003Ccode\u003EClap::parse_from\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003E依存関係\u003C\u002Fh2\u003E\n\u003Cp\u003Eclapがstructoptを取り込んだようなものなので、基本は変化がないはず。\nしかし、開発時期の違いだろうか、依存クレートにバージョンの違いが見られる。\nまたclapのメジャーバージョンアップということでcurses的なものに変化があった（共通部は省略）：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Estructopt\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ cargo tree \nsplr v0.4.2-dev.1\n└── structopt v0.3.14\n    ├── clap v2.33.1\n    │   ├── ansi_term v0.11.0\n    │   └── strsim v0.8.0\n    └── structopt-derive v0.4.7\n        └── proc-macro-error v1.0.2\n            └── proc-macro-error-attr v1.0.2\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003Eclap-3.0.0\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ cargo tree \nsplr v0.4.2-dev.0\n└── clap v3.0.0-beta.1\n    ├── clap_derive v3.0.0-beta.1\n    │   └── proc-macro-error v0.4.12\n    │       └── proc-macro-error-attr v0.4.12\n    ├── indexmap v1.4.0\n    │   [build-dependencies]\n    │   └── autocfg v1.0.0\n    ├── os_str_bytes v2.3.1\n    ├── strsim v0.10.0\n    └── termcolor v1.1.0\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eでコンパイルしてみるとclapを使った方が（strip後のサイズで）70KBほど大きくなってしまう。\nうーん、それはどうなのか。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eコンパイル時間や実行時間に関しては見ていない。多分大きな差はないだろう。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-06-13-clap3.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-06-13-clap3.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});