__NUXT_JSONP__("/2020/2020-07-28-fallthrough-in-swift", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Swiftのfallthroughについて",subtitle:"なんてこったい",date:"2020-07-28T00:00:00.000Z",tags:["Swift"],bodyContent:"*The Swift Programming Language -- Swift 5.3 Edition (beta)* を読んでいて、`fallthrough` に関するちょっと信じられない記述を目にした。\n\n\u003E Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.\n\nplaygroundで実行してみた。\n\n```swift\nvar x = 1\n\nswitch x {\n    case 1: print(1)\n            fallthrough\n    case 2: print(2)\n    default: break\n}\n```\n\n実行すると\n\n```plaintext\n1\n2\n```\n\nだと。記述は間違ってなかった@_@。\n\n# 2020-08-30\n\nなんてことを書いてから一ヶ月経ちますが、その間にあったLinux 5.9での大量のコード修正の話題を読んで、やっと「C言語がそもそもそうだった」ということを思い出しました。\n原典に忠実なだけだったのか。うーん。しまった。",bodyHtml:"\u003Cp\u003E\u003Cem\u003EThe Swift Programming Language -- Swift 5.3 Edition (beta)\u003C\u002Fem\u003E を読んでいて、\u003Ccode\u003Efallthrough\u003C\u002Fcode\u003E に関するちょっと信じられない記述を目にした。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EProgram execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003Eplaygroundで実行してみた。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E x \u003Cspan class=\"hljs-operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eswitch\u003C\u002Fspan\u003E x {\n    \u003Cspan class=\"hljs-keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eprint\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E)\n            \u003Cspan class=\"hljs-keyword\"\u003Efallthrough\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eprint\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E実行すると\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E1\n2\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eだと。記述は間違ってなかった@_@。\u003C\u002Fp\u003E\n\u003Ch1\u003E2020-08-30\u003C\u002Fh1\u003E\n\u003Cp\u003Eなんてことを書いてから一ヶ月経ちますが、その間にあったLinux 5.9での大量のコード修正の話題を読んで、やっと「C言語がそもそもそうだった」ということを思い出しました。\n原典に忠実なだけだったのか。うーん。しまった。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-07-28-fallthrough-in-swift.json",ext:".json",sourceBase:"2020-07-28-fallthrough-in-swift.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Swiftのfallthroughについて"},subtitle:{writable:true,enumerable:true,value:"なんてこったい"},date:{writable:true,enumerable:true,value:"2020-07-28T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["Swift"]},bodyContent:{writable:true,enumerable:true,value:"*The Swift Programming Language -- Swift 5.3 Edition (beta)* を読んでいて、`fallthrough` に関するちょっと信じられない記述を目にした。\n\n\u003E Program execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.\n\nplaygroundで実行してみた。\n\n```swift\nvar x = 1\n\nswitch x {\n    case 1: print(1)\n            fallthrough\n    case 2: print(2)\n    default: break\n}\n```\n\n実行すると\n\n```plaintext\n1\n2\n```\n\nだと。記述は間違ってなかった@_@。\n\n# 2020-08-30\n\nなんてことを書いてから一ヶ月経ちますが、その間にあったLinux 5.9での大量のコード修正の話題を読んで、やっと「C言語がそもそもそうだった」ということを思い出しました。\n原典に忠実なだけだったのか。うーん。しまった。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003E\u003Cem\u003EThe Swift Programming Language -- Swift 5.3 Edition (beta)\u003C\u002Fem\u003E を読んでいて、\u003Ccode\u003Efallthrough\u003C\u002Fcode\u003E に関するちょっと信じられない記述を目にした。\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EProgram execution continues to the next case even if the patterns of the case label do not match the value of the switch statement’s control expression.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003Eplaygroundで実行してみた。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E x \u003Cspan class=\"hljs-operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"hljs-keyword\"\u003Eswitch\u003C\u002Fspan\u003E x {\n    \u003Cspan class=\"hljs-keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eprint\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E)\n            \u003Cspan class=\"hljs-keyword\"\u003Efallthrough\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-keyword\"\u003Ecase\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-built_in\"\u003Eprint\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-number\"\u003E2\u003C\u002Fspan\u003E)\n    \u003Cspan class=\"hljs-keyword\"\u003Edefault\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003E実行すると\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E1\n2\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003Eだと。記述は間違ってなかった@_@。\u003C\u002Fp\u003E\n\u003Ch1\u003E2020-08-30\u003C\u002Fh1\u003E\n\u003Cp\u003Eなんてことを書いてから一ヶ月経ちますが、その間にあったLinux 5.9での大量のコード修正の話題を読んで、やっと「C言語がそもそもそうだった」ということを思い出しました。\n原典に忠実なだけだったのか。うーん。しまった。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-07-28-fallthrough-in-swift.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-07-28-fallthrough-in-swift.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});