__NUXT_JSONP__("/2016/2016-03-08-code-sample", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Code Sample",subtitle:"Using Hugo Chroma instead of Pygments",date:"2018-06-22T00:00:00.000Z",tags:["hugo"],bodyContent:"The following are two code samples using syntax highlighting.\n\n\u003C!--more--\u003E\n\nThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\n\n```javascript\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n```\n\nThe following is a code sample using the \"highlight\" shortcode provided in Hugo. This is server side\nhighlighting and required Python and Pygments to be installed once. But it doesn't now.\n\n{{\u003C highlight javascript \u003E}}\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n{{\u003C\u002F highlight \u003E}}\n\nAnd here is the same code with line numbers:\n\n{{\u003C highlight javascript \"linenos=inline\"\u003E}}\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n{{\u003C\u002F highlight \u003E}}\n\nIn this site it, [chrome](https:\u002F\u002Fgohugo.io\u002Fcontent-management\u002Fsyntax-highlighting\u002F) is the default highlight engine, activated by ( ``` ) too.\n\n```html\n\u003Csection id=\"main\"\u003E\n  \u003Cdiv\u003E\n    \u003Ch1 id=\"title\"\u003E{{ .Title }}\u003C\u002Fh1\u003E\n    {{ range .Data.Pages }}\n      {{ .Render \"summary\"}}\n    {{ end }}\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fsection\u003E\n```\n\nAnd, for me, it accepts the following languages: awk, (e)bnf, make, bash (sh, shell), c, C,\ncss, lisp, coq, diff, docker, elisp, html, haskell, json, java, javascript, mason, nix,\nocaml (ml), prolog, python(3), R, rust, scheme, smalltalk, (la)tex, xml, yaml, markdown,\ntext (plain). Wow!",bodyHtml:"\u003Cp\u003EThe following are two code samples using syntax highlighting.\u003C\u002Fp\u003E\n\u003Cp\u003E&lt;!--more--&gt;\u003C\u002Fp\u003E\n\u003Cp\u003EThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E num1, num2, sum\n    num1 = prompt(\u003Cspan class=\"hljs-string\"\u003E&quot;Enter first number&quot;\u003C\u002Fspan\u003E)\n    num2 = prompt(\u003Cspan class=\"hljs-string\"\u003E&quot;Enter second number&quot;\u003C\u002Fspan\u003E)\n    sum = \u003Cspan class=\"hljs-built_in\"\u003EparseInt\u003C\u002Fspan\u003E(num1) + \u003Cspan class=\"hljs-built_in\"\u003EparseInt\u003C\u002Fspan\u003E(num2) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;+&quot; means &quot;add&quot;\u003C\u002Fspan\u003E\n    alert(\u003Cspan class=\"hljs-string\"\u003E&quot;Sum = &quot;\u003C\u002Fspan\u003E + sum)  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;+&quot; means combine into a string\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe following is a code sample using the &quot;highlight&quot; shortcode provided in Hugo. This is server side\nhighlighting and required Python and Pygments to be installed once. But it doesn't now.\u003C\u002Fp\u003E\n\u003Cp\u003E{{&lt; highlight javascript &gt;}}\nvar num1, num2, sum\nnum1 = prompt(&quot;Enter first number&quot;)\nnum2 = prompt(&quot;Enter second number&quot;)\nsum = parseInt(num1) + parseInt(num2) \u002F\u002F &quot;+&quot; means &quot;add&quot;\nalert(&quot;Sum = &quot; + sum)  \u002F\u002F &quot;+&quot; means combine into a string\n{{&lt;\u002F highlight &gt;}}\u003C\u002Fp\u003E\n\u003Cp\u003EAnd here is the same code with line numbers:\u003C\u002Fp\u003E\n\u003Cp\u003E{{&lt; highlight javascript &quot;linenos=inline&quot;&gt;}}\nvar num1, num2, sum\nnum1 = prompt(&quot;Enter first number&quot;)\nnum2 = prompt(&quot;Enter second number&quot;)\nsum = parseInt(num1) + parseInt(num2) \u002F\u002F &quot;+&quot; means &quot;add&quot;\nalert(&quot;Sum = &quot; + sum)  \u002F\u002F &quot;+&quot; means combine into a string\n{{&lt;\u002F highlight &gt;}}\u003C\u002Fp\u003E\n\u003Cp\u003EIn this site it, \u003Ca href=\"https:\u002F\u002Fgohugo.io\u002Fcontent-management\u002Fsyntax-highlighting\u002F\"\u003Echrome\u003C\u002Fa\u003E is the default highlight engine, activated by ( ``` ) too.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Esection\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;main&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;title&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ .Title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    {{ range .Data.Pages }}\n      {{ .Render &quot;summary&quot;}}\n    {{ end }}\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Esection\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd, for me, it accepts the following languages: awk, (e)bnf, make, bash (sh, shell), c, C,\ncss, lisp, coq, diff, docker, elisp, html, haskell, json, java, javascript, mason, nix,\nocaml (ml), prolog, python(3), R, rust, scheme, smalltalk, (la)tex, xml, yaml, markdown,\ntext (plain). Wow!\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2016",base:"2016-03-08-code-sample.json",ext:".json",sourceBase:"2016-03-08-code-sample.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Code Sample"},subtitle:{writable:true,enumerable:true,value:"Using Hugo Chroma instead of Pygments"},date:{writable:true,enumerable:true,value:"2018-06-22T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["hugo"]},bodyContent:{writable:true,enumerable:true,value:"The following are two code samples using syntax highlighting.\n\n\u003C!--more--\u003E\n\nThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\n\n```javascript\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n```\n\nThe following is a code sample using the \"highlight\" shortcode provided in Hugo. This is server side\nhighlighting and required Python and Pygments to be installed once. But it doesn't now.\n\n{{\u003C highlight javascript \u003E}}\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n{{\u003C\u002F highlight \u003E}}\n\nAnd here is the same code with line numbers:\n\n{{\u003C highlight javascript \"linenos=inline\"\u003E}}\n    var num1, num2, sum\n    num1 = prompt(\"Enter first number\")\n    num2 = prompt(\"Enter second number\")\n    sum = parseInt(num1) + parseInt(num2) \u002F\u002F \"+\" means \"add\"\n    alert(\"Sum = \" + sum)  \u002F\u002F \"+\" means combine into a string\n{{\u003C\u002F highlight \u003E}}\n\nIn this site it, [chrome](https:\u002F\u002Fgohugo.io\u002Fcontent-management\u002Fsyntax-highlighting\u002F) is the default highlight engine, activated by ( ``` ) too.\n\n```html\n\u003Csection id=\"main\"\u003E\n  \u003Cdiv\u003E\n    \u003Ch1 id=\"title\"\u003E{{ .Title }}\u003C\u002Fh1\u003E\n    {{ range .Data.Pages }}\n      {{ .Render \"summary\"}}\n    {{ end }}\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fsection\u003E\n```\n\nAnd, for me, it accepts the following languages: awk, (e)bnf, make, bash (sh, shell), c, C,\ncss, lisp, coq, diff, docker, elisp, html, haskell, json, java, javascript, mason, nix,\nocaml (ml), prolog, python(3), R, rust, scheme, smalltalk, (la)tex, xml, yaml, markdown,\ntext (plain). Wow!"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003EThe following are two code samples using syntax highlighting.\u003C\u002Fp\u003E\n\u003Cp\u003E&lt;!--more--&gt;\u003C\u002Fp\u003E\n\u003Cp\u003EThe following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Evar\u003C\u002Fspan\u003E num1, num2, sum\n    num1 = prompt(\u003Cspan class=\"hljs-string\"\u003E&quot;Enter first number&quot;\u003C\u002Fspan\u003E)\n    num2 = prompt(\u003Cspan class=\"hljs-string\"\u003E&quot;Enter second number&quot;\u003C\u002Fspan\u003E)\n    sum = \u003Cspan class=\"hljs-built_in\"\u003EparseInt\u003C\u002Fspan\u003E(num1) + \u003Cspan class=\"hljs-built_in\"\u003EparseInt\u003C\u002Fspan\u003E(num2) \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;+&quot; means &quot;add&quot;\u003C\u002Fspan\u003E\n    alert(\u003Cspan class=\"hljs-string\"\u003E&quot;Sum = &quot;\u003C\u002Fspan\u003E + sum)  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F &quot;+&quot; means combine into a string\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EThe following is a code sample using the &quot;highlight&quot; shortcode provided in Hugo. This is server side\nhighlighting and required Python and Pygments to be installed once. But it doesn't now.\u003C\u002Fp\u003E\n\u003Cp\u003E{{&lt; highlight javascript &gt;}}\nvar num1, num2, sum\nnum1 = prompt(&quot;Enter first number&quot;)\nnum2 = prompt(&quot;Enter second number&quot;)\nsum = parseInt(num1) + parseInt(num2) \u002F\u002F &quot;+&quot; means &quot;add&quot;\nalert(&quot;Sum = &quot; + sum)  \u002F\u002F &quot;+&quot; means combine into a string\n{{&lt;\u002F highlight &gt;}}\u003C\u002Fp\u003E\n\u003Cp\u003EAnd here is the same code with line numbers:\u003C\u002Fp\u003E\n\u003Cp\u003E{{&lt; highlight javascript &quot;linenos=inline&quot;&gt;}}\nvar num1, num2, sum\nnum1 = prompt(&quot;Enter first number&quot;)\nnum2 = prompt(&quot;Enter second number&quot;)\nsum = parseInt(num1) + parseInt(num2) \u002F\u002F &quot;+&quot; means &quot;add&quot;\nalert(&quot;Sum = &quot; + sum)  \u002F\u002F &quot;+&quot; means combine into a string\n{{&lt;\u002F highlight &gt;}}\u003C\u002Fp\u003E\n\u003Cp\u003EIn this site it, \u003Ca href=\"https:\u002F\u002Fgohugo.io\u002Fcontent-management\u002Fsyntax-highlighting\u002F\"\u003Echrome\u003C\u002Fa\u003E is the default highlight engine, activated by ( ``` ) too.\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Esection\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;main&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"hljs-tag\"\u003E&lt;\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-attr\"\u003Eid\u003C\u002Fspan\u003E=\u003Cspan class=\"hljs-string\"\u003E&quot;title&quot;\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E{{ .Title }}\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Eh1\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n    {{ range .Data.Pages }}\n      {{ .Render &quot;summary&quot;}}\n    {{ end }}\n  \u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Ediv\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-tag\"\u003E&lt;\u002F\u003Cspan class=\"hljs-name\"\u003Esection\u003C\u002Fspan\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cp\u003EAnd, for me, it accepts the following languages: awk, (e)bnf, make, bash (sh, shell), c, C,\ncss, lisp, coq, diff, docker, elisp, html, haskell, json, java, javascript, mason, nix,\nocaml (ml), prolog, python(3), R, rust, scheme, smalltalk, (la)tex, xml, yaml, markdown,\ntext (plain). Wow!\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2016"},base:{writable:true,enumerable:true,value:"2016-03-08-code-sample.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2016-03-08-code-sample.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});