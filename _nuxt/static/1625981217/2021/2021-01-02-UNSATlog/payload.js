__NUXT_JSONP__("/2021/2021-01-02-UNSATlog", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"UNSAT LOG, 2020, Dec.",subtitle:"Vol.1, No.12.",date:"2021-01-02T00:00:00.000Z",tags:["SAT","splr","unsatlog"],banner:"\u002Fimg\u002F2021\u002F01-02\u002Fbanner.jpg",bodyContent:"# UNSATlog\n\n## 2020年振り返り\n\n結局0.5.1はリリースできませんでした。12月にやったことは\n\n- リフェーズ(re-phasing to best phase)に関するチューニング\n- Sudoku 64への応用\n- Advent of Code 2020への応用\n\nというあたり。\n個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。\nやはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。\n\n## Best Phase Rewarding\n\nRephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして線型結合（単に和をとるだけ）してみたら考えてみる価値がある結果になった。\n混ぜない方がいい。やはり合議制のマルチエージェントの並行動作が行き着くところかもしれない。\n全然ベンチマークでのベストを更新できてないので、これが本当によい手法と言えるかどうかは微妙なんだけど、それまでのもっとも解に近い点を足掛かりにして探索を進めるのはあるかもしれないし、まあ納得できる。\n意外なのは極端な設定に振った方が結果が出ていること。\nStabilizationでいえばstabilizationしっぱなしが一番いいという感じ。\nなので現在のコードはマルチエージェント合議制に対しては否定的なんだがエビデンスを得るためには、色々試してみないといけない。\nLuby数列を使ったStabilizationとのコード的な組み合わせ爆発もあるし、なかなかこれでいいという踏ん切りがつけられない。\nということで一ヶ月では終わる話題ではなかったのでした。\n\n## Sudoku 64\n\nSudoku 64は[ここ](http:\u002F\u002Fwww.sudoku-download.net\u002Fsudoku_64x64.php)で見つけたもの。\nSudoku 25が1秒以下で解けたこと、一意な解答保証のため結構初期状態で埋まったものだったことから、これもすぐ解けるのかと思ったら[20秒も掛かってしまった](https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-12-18-sudoku64\u002F)。\nBCP 始める前に解けているのでこれは pre-processor が重いのだろう。外してみると8秒でした。\n\n```plaintext\n$ splr --ELI 0  sudoku64.cnf\nsudoku64.cnf                                262144,41048269 |time:     8.31\n #conflict:          0, #decision:            0, #propagate:         262144 \n  Assignment|#rem:   259891, #ass:     2253, #elm:        0, prg%:   0.8595 \n      Clause|Remv:        0, LBD2:        0, Binc: 41029632, Perm: 41037005 \n     Restart|#BLK:        0, #RST:        0, Lspn:        1, Lcyc:        0 \n         EMA|tLBD:      NaN, tASG:      NaN, core:   262144, \u002Fdpc:      NaN \n    Conflict|eLBD:     0.00, cnfl:     0.00, bjmp:     0.00, \u002Fppc:      inf \n        misc|elim:        0, cviv:        0, #vbv:        0, \u002Fcpr:      NaN \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku64.cnf\ns SATISFIABLE: sudoku64.cnf\n```\n\n## Advent of Code 2020\n\n[Advent of Code](https:\u002F\u002Fadventofcode.com\u002F)に初参加。面白かった。\nSATで解けそうな問題が2つほどあってSplrを使ってみましたが、一勝一敗。\n20日目のタイル組み合わせ問題では作ったCNFが10GBを超えてしまって、Splrにロードはできたものうんともすんとも言わなくなってしまいました。\n結局その問題は単純にforループで回したら解けました。残念。\n\n## 今後の展望\n\nまずは0.6.0をリファクタリングバージョンとしてリリースしてしばらく勉強します。\nそれから年2回のリリースが現実的なので5月位に0.6.0のパラメータチューニングあるいは過去のものとの再融合バージョンが出せたらいいなあ。\nあ、夏休みの宿題もしなければ。",bodyHtml:"\u003Ch1\u003EUNSATlog\u003C\u002Fh1\u003E\n\u003Ch2\u003E2020年振り返り\u003C\u002Fh2\u003E\n\u003Cp\u003E結局0.5.1はリリースできませんでした。12月にやったことは\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eリフェーズ(re-phasing to best phase)に関するチューニング\u003C\u002Fli\u003E\n\u003Cli\u003ESudoku 64への応用\u003C\u002Fli\u003E\n\u003Cli\u003EAdvent of Code 2020への応用\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eというあたり。\n個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。\nやはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。\u003C\u002Fp\u003E\n\u003Ch2\u003EBest Phase Rewarding\u003C\u002Fh2\u003E\n\u003Cp\u003ERephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして線型結合（単に和をとるだけ）してみたら考えてみる価値がある結果になった。\n混ぜない方がいい。やはり合議制のマルチエージェントの並行動作が行き着くところかもしれない。\n全然ベンチマークでのベストを更新できてないので、これが本当によい手法と言えるかどうかは微妙なんだけど、それまでのもっとも解に近い点を足掛かりにして探索を進めるのはあるかもしれないし、まあ納得できる。\n意外なのは極端な設定に振った方が結果が出ていること。\nStabilizationでいえばstabilizationしっぱなしが一番いいという感じ。\nなので現在のコードはマルチエージェント合議制に対しては否定的なんだがエビデンスを得るためには、色々試してみないといけない。\nLuby数列を使ったStabilizationとのコード的な組み合わせ爆発もあるし、なかなかこれでいいという踏ん切りがつけられない。\nということで一ヶ月では終わる話題ではなかったのでした。\u003C\u002Fp\u003E\n\u003Ch2\u003ESudoku 64\u003C\u002Fh2\u003E\n\u003Cp\u003ESudoku 64は\u003Ca href=\"http:\u002F\u002Fwww.sudoku-download.net\u002Fsudoku_64x64.php\"\u003Eここ\u003C\u002Fa\u003Eで見つけたもの。\nSudoku 25が1秒以下で解けたこと、一意な解答保証のため結構初期状態で埋まったものだったことから、これもすぐ解けるのかと思ったら\u003Ca href=\"https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-12-18-sudoku64\u002F\"\u003E20秒も掛かってしまった\u003C\u002Fa\u003E。\nBCP 始める前に解けているのでこれは pre-processor が重いのだろう。外してみると8秒でした。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr --ELI 0  sudoku64.cnf\nsudoku64.cnf                                262144,41048269 |time:     8.31\n #conflict:          0, #decision:            0, #propagate:         262144 \n  Assignment|#rem:   259891, #ass:     2253, #elm:        0, prg%:   0.8595 \n      Clause|Remv:        0, LBD2:        0, Binc: 41029632, Perm: 41037005 \n     Restart|#BLK:        0, #RST:        0, Lspn:        1, Lcyc:        0 \n         EMA|tLBD:      NaN, tASG:      NaN, core:   262144, \u002Fdpc:      NaN \n    Conflict|eLBD:     0.00, cnfl:     0.00, bjmp:     0.00, \u002Fppc:      inf \n        misc|elim:        0, cviv:        0, #vbv:        0, \u002Fcpr:      NaN \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku64.cnf\ns SATISFIABLE: sudoku64.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EAdvent of Code 2020\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fadventofcode.com\u002F\"\u003EAdvent of Code\u003C\u002Fa\u003Eに初参加。面白かった。\nSATで解けそうな問題が2つほどあってSplrを使ってみましたが、一勝一敗。\n20日目のタイル組み合わせ問題では作ったCNFが10GBを超えてしまって、Splrにロードはできたものうんともすんとも言わなくなってしまいました。\n結局その問題は単純にforループで回したら解けました。残念。\u003C\u002Fp\u003E\n\u003Ch2\u003E今後の展望\u003C\u002Fh2\u003E\n\u003Cp\u003Eまずは0.6.0をリファクタリングバージョンとしてリリースしてしばらく勉強します。\nそれから年2回のリリースが現実的なので5月位に0.6.0のパラメータチューニングあるいは過去のものとの再融合バージョンが出せたらいいなあ。\nあ、夏休みの宿題もしなければ。\u003C\u002Fp\u003E\n",dir:"article\u002F.json\u002F2021",base:"2021-01-02-UNSATlog.json",ext:".json",sourceBase:"2021-01-02-UNSATlog.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"UNSAT LOG, 2020, Dec."},subtitle:{writable:true,enumerable:true,value:"Vol.1, No.12."},date:{writable:true,enumerable:true,value:"2021-01-02T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","splr","unsatlog"]},banner:{writable:true,enumerable:true,value:"\u002Fimg\u002F2021\u002F01-02\u002Fbanner.jpg"},bodyContent:{writable:true,enumerable:true,value:"# UNSATlog\n\n## 2020年振り返り\n\n結局0.5.1はリリースできませんでした。12月にやったことは\n\n- リフェーズ(re-phasing to best phase)に関するチューニング\n- Sudoku 64への応用\n- Advent of Code 2020への応用\n\nというあたり。\n個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。\nやはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。\n\n## Best Phase Rewarding\n\nRephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして線型結合（単に和をとるだけ）してみたら考えてみる価値がある結果になった。\n混ぜない方がいい。やはり合議制のマルチエージェントの並行動作が行き着くところかもしれない。\n全然ベンチマークでのベストを更新できてないので、これが本当によい手法と言えるかどうかは微妙なんだけど、それまでのもっとも解に近い点を足掛かりにして探索を進めるのはあるかもしれないし、まあ納得できる。\n意外なのは極端な設定に振った方が結果が出ていること。\nStabilizationでいえばstabilizationしっぱなしが一番いいという感じ。\nなので現在のコードはマルチエージェント合議制に対しては否定的なんだがエビデンスを得るためには、色々試してみないといけない。\nLuby数列を使ったStabilizationとのコード的な組み合わせ爆発もあるし、なかなかこれでいいという踏ん切りがつけられない。\nということで一ヶ月では終わる話題ではなかったのでした。\n\n## Sudoku 64\n\nSudoku 64は[ここ](http:\u002F\u002Fwww.sudoku-download.net\u002Fsudoku_64x64.php)で見つけたもの。\nSudoku 25が1秒以下で解けたこと、一意な解答保証のため結構初期状態で埋まったものだったことから、これもすぐ解けるのかと思ったら[20秒も掛かってしまった](https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-12-18-sudoku64\u002F)。\nBCP 始める前に解けているのでこれは pre-processor が重いのだろう。外してみると8秒でした。\n\n```plaintext\n$ splr --ELI 0  sudoku64.cnf\nsudoku64.cnf                                262144,41048269 |time:     8.31\n #conflict:          0, #decision:            0, #propagate:         262144 \n  Assignment|#rem:   259891, #ass:     2253, #elm:        0, prg%:   0.8595 \n      Clause|Remv:        0, LBD2:        0, Binc: 41029632, Perm: 41037005 \n     Restart|#BLK:        0, #RST:        0, Lspn:        1, Lcyc:        0 \n         EMA|tLBD:      NaN, tASG:      NaN, core:   262144, \u002Fdpc:      NaN \n    Conflict|eLBD:     0.00, cnfl:     0.00, bjmp:     0.00, \u002Fppc:      inf \n        misc|elim:        0, cviv:        0, #vbv:        0, \u002Fcpr:      NaN \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku64.cnf\ns SATISFIABLE: sudoku64.cnf\n```\n\n## Advent of Code 2020\n\n[Advent of Code](https:\u002F\u002Fadventofcode.com\u002F)に初参加。面白かった。\nSATで解けそうな問題が2つほどあってSplrを使ってみましたが、一勝一敗。\n20日目のタイル組み合わせ問題では作ったCNFが10GBを超えてしまって、Splrにロードはできたものうんともすんとも言わなくなってしまいました。\n結局その問題は単純にforループで回したら解けました。残念。\n\n## 今後の展望\n\nまずは0.6.0をリファクタリングバージョンとしてリリースしてしばらく勉強します。\nそれから年2回のリリースが現実的なので5月位に0.6.0のパラメータチューニングあるいは過去のものとの再融合バージョンが出せたらいいなあ。\nあ、夏休みの宿題もしなければ。"},bodyHtml:{writable:true,enumerable:true,value:"\u003Ch1\u003EUNSATlog\u003C\u002Fh1\u003E\n\u003Ch2\u003E2020年振り返り\u003C\u002Fh2\u003E\n\u003Cp\u003E結局0.5.1はリリースできませんでした。12月にやったことは\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eリフェーズ(re-phasing to best phase)に関するチューニング\u003C\u002Fli\u003E\n\u003Cli\u003ESudoku 64への応用\u003C\u002Fli\u003E\n\u003Cli\u003EAdvent of Code 2020への応用\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eというあたり。\n個人的には、初めてVec以外のデータ構造(HashMap)を導入したことが大きいです。\nやはりリリース直前のベンチマークに時間を取られてしまったものの、ドキュメントの更新は終わっているので、ベンチマークさえいい結果、いやよくなくてもいいのでそこそこの結果が出ればリリースするつもりなので、最速で2021年元旦に出せるはず。\u003C\u002Fp\u003E\n\u003Ch2\u003EBest Phase Rewarding\u003C\u002Fh2\u003E\n\u003Cp\u003ERephasingの実現手法として変数のrewardに反映させてみた。活性度に反映させるのではなく独立した項目にして線型結合（単に和をとるだけ）してみたら考えてみる価値がある結果になった。\n混ぜない方がいい。やはり合議制のマルチエージェントの並行動作が行き着くところかもしれない。\n全然ベンチマークでのベストを更新できてないので、これが本当によい手法と言えるかどうかは微妙なんだけど、それまでのもっとも解に近い点を足掛かりにして探索を進めるのはあるかもしれないし、まあ納得できる。\n意外なのは極端な設定に振った方が結果が出ていること。\nStabilizationでいえばstabilizationしっぱなしが一番いいという感じ。\nなので現在のコードはマルチエージェント合議制に対しては否定的なんだがエビデンスを得るためには、色々試してみないといけない。\nLuby数列を使ったStabilizationとのコード的な組み合わせ爆発もあるし、なかなかこれでいいという踏ん切りがつけられない。\nということで一ヶ月では終わる話題ではなかったのでした。\u003C\u002Fp\u003E\n\u003Ch2\u003ESudoku 64\u003C\u002Fh2\u003E\n\u003Cp\u003ESudoku 64は\u003Ca href=\"http:\u002F\u002Fwww.sudoku-download.net\u002Fsudoku_64x64.php\"\u003Eここ\u003C\u002Fa\u003Eで見つけたもの。\nSudoku 25が1秒以下で解けたこと、一意な解答保証のため結構初期状態で埋まったものだったことから、これもすぐ解けるのかと思ったら\u003Ca href=\"https:\u002F\u002Fshnarazk.github.io\u002F2020\u002F2020-12-18-sudoku64\u002F\"\u003E20秒も掛かってしまった\u003C\u002Fa\u003E。\nBCP 始める前に解けているのでこれは pre-processor が重いのだろう。外してみると8秒でした。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E$ splr --ELI 0  sudoku64.cnf\nsudoku64.cnf                                262144,41048269 |time:     8.31\n #conflict:          0, #decision:            0, #propagate:         262144 \n  Assignment|#rem:   259891, #ass:     2253, #elm:        0, prg%:   0.8595 \n      Clause|Remv:        0, LBD2:        0, Binc: 41029632, Perm: 41037005 \n     Restart|#BLK:        0, #RST:        0, Lspn:        1, Lcyc:        0 \n         EMA|tLBD:      NaN, tASG:      NaN, core:   262144, \u002Fdpc:      NaN \n    Conflict|eLBD:     0.00, cnfl:     0.00, bjmp:     0.00, \u002Fppc:      inf \n        misc|elim:        0, cviv:        0, #vbv:        0, \u002Fcpr:      NaN \n    Strategy|mode: Initial search phase before a main strategy\n      Result|file: .\u002F.ans_sudoku64.cnf\ns SATISFIABLE: sudoku64.cnf\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch2\u003EAdvent of Code 2020\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fadventofcode.com\u002F\"\u003EAdvent of Code\u003C\u002Fa\u003Eに初参加。面白かった。\nSATで解けそうな問題が2つほどあってSplrを使ってみましたが、一勝一敗。\n20日目のタイル組み合わせ問題では作ったCNFが10GBを超えてしまって、Splrにロードはできたものうんともすんとも言わなくなってしまいました。\n結局その問題は単純にforループで回したら解けました。残念。\u003C\u002Fp\u003E\n\u003Ch2\u003E今後の展望\u003C\u002Fh2\u003E\n\u003Cp\u003Eまずは0.6.0をリファクタリングバージョンとしてリリースしてしばらく勉強します。\nそれから年2回のリリースが現実的なので5月位に0.6.0のパラメータチューニングあるいは過去のものとの再融合バージョンが出せたらいいなあ。\nあ、夏休みの宿題もしなければ。\u003C\u002Fp\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2021"},base:{writable:true,enumerable:true,value:"2021-01-02-UNSATlog.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2021-01-02-UNSATlog.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});