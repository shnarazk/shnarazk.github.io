__NUXT_JSONP__("/2020/2020-07-05-vivification2", {data:[{article:Object.create(null,{default:{writable:true,enumerable:true,value:{title:"Clause Vivification updated 2020",subtitle:"vivification part 2",date:"2020-08-23T00:00:00.000Z",tags:["SAT","vivification","splr"],banner:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1586508217007-6e8b3151a6f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80",bodyContent:"**cover image: https:\u002F\u002Funsplash.com\u002Fphotos\u002FtYs9rjaT8Vc**\n\nVivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。\n\n* Chu-Min Li *et al.*, \"Clause vivification by unit propagation in CDCL SAT solvers,”*Artif. Intell.*, vol. 279, 2019.\n\n* [part 2](\u002F2020\u002F2020-08-19-splr-with-vivification\u002F)\n\n### Errata\n\n* **Algorithm 3**のL17はforeachの内側\n* **Algorithm 4**のLL.9-10はthen節の中\n\n### Outline\n\nVivificationは魅力的な節削減手法のでSAT competitionに提出されるようなソルバに導入されたもの、その後改善が計算量に見合わないため、取り下げられることが続いてきた。\nこの論文はどのタイミングで、どの節を、どのリテラルからvivifyすればよいかについて論じている。\n特に[原論文](\u002F2020\u002F2020-06-20-vivification\u002F)では'future work'としてのみ触れられていたin-processorとして使う場合の改善に重きを置いている。\nなお、Cadicalはこの論文で提案された手法とは無関係。所与の節にもvivificationをするべきだという主張の傍証実験に使われただけ。ただし、Cadicalが使っているのは著者らの別の論文に基づくものなので、無関係とは言い過ぎかも。\n\n結論は以下の通り。\n\n* タイミング -- 節削減の後のリスタート\n* 対象節 -- LBD順で対象集合の半分\n  * 与えられた節 -- LBDが20以下の学習節の導出に使われており、LBDが1になる、またはLBDが3回減少すれば再び対象に加える。それとは別に pre-processing phase で$10^8$リテラルまで処理する。\n  * 学習節 -- LBDが1になる、またはLBDが2回減少すれば再び対象に加える\n* リテラル順 -- as is\n\nなお、以下のようにin-processor向けに `vivify` のアルゴリズムが変更されている。\n\n![](\u002Fimg\u002F2020\u002F07-05\u002Fvivi-algo3.jpg)\n\n* 節へのリテラルの追加は$\\vee$で、節集合および部分割り当てへの節または割り当ての追加は$\\cup$で表されている。つまり節が拡大するのはL17のみ。(**2020-08-21追記**)\n* ~~なんか怪しい。なぜ $\\phi \\cup \\neg C'$ なのだ？ どうして$C$に含まれていたリテラルの否定を集めた節が$\\text{vivified} C = C'$ なのだ~~ ここがミソ。\n* 何にせよ最初に存在した節は17行目で必ず削除される。\n* 17行目は一つ内側のループに含まれるはずですけど。\n* この関数は決定レベル0を想定していない。だから`conflictAnalysis`を呼び出している。もし決定レベル0を想定するなら、これは決定変数の否定からなる単位節を返す処理に帰着する。従ってL10は $C' \\leftarrow \\{l_i\\}$と等価だか、そもそも$l_i$は割り当て済みだから何もしないのと同等。一方L13に関しては、その前のステップで決定による割り当てを行っている可能性があるのでレベル0が仮定できない。従って通常の矛盾解析を行い、**学習節を追加する**ことが必要である。\n\n### 節$C$が冗長であることを言う。\n\n数学的準備：\n\n* $(\\phi, \\omega) \\models \\omega'$は節集合$\\phi$と部分割当集合$\\omega$から無矛盾な割り当て集合$\\omega'$が導出されることを意味する。割当が空でも$\\omega$を導出できるなら$\\phi \\models \\omega$とも書く。\n* $(\\phi, \\omega)$が矛盾を起こしているなら$\\bot$で矛盾を表し、$(\\phi, \\omega) \\models \\bot$と書くことにする。\n* 節$C$が冗長とは式$\\phi$と$\\phi\\setminus{C}$が論理的に等値であることを意味する。\n* 一般に節$C$に含まれる全てのリテラルを否定した節を$\\neg C$と書くと$\\forall C: (C \\cup \\neg C) \\models \\bot$が成立する。\n* （⭐️）一般に節$C$に対して自身の部分節$C'$の否定節$\\neg C'$を加えることで矛盾が生じる（$C \\cup \\neg C' \\models \\bot$）なら、節$C$は$C'$に包含される。節$C$はリテラル$l' \\in C\\setminus{C'}$に対して何の制約にもなっていない。\n\n1. 前提として$\\phi \\nvDash \\bot$であるとする。\n1. ある節Cの部分節$C'$の否定節を加えても矛盾を導出しないなら、それは節Cは$C\\setminus{C'}$に包摂できることを意味している。\n1. そのような部分節にリテラル$l' \\in C$の否定を加えた節を追加すると矛盾が起きたとする。それは部分節または$l'$のどちらかが充足することが必要であることを意味している。これは$\\phi$から導出された学習節である（$\\phi$の論理的帰結）。\n1. 学習節$\\neg \\neg C' \\cup \\{\\neg \\neg l'\\} = C' \\cup l'$は節$C$の部分節である。なので（⭐️）より置き換えてよい。\n\n### 余談\n\n* COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB は学習節の3層管理をしている。節削減対象はLOCALのみ。\n  * CORE -- LBDが小さいもの\n  * TIER2 --　LBDが中間のもの。長期間依存グラフに現れないと格下げ。\n  * LOCAL -- それ以外\n* COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB はGulcose的なリスタートフェーズとLuby列に基づくリスタートフェーズを交互に使っている。これはStabilizationの先駆け？\n\n\n### 2020-07-05 Splr approach\n\n```rust\nfn vivify(asg: &mut AssignStack, cdb: &mut ClauseDB) {\n    'next_clause: for ci in clauses.iter() {\n        let c: &Clause = &cdb[ci];\n        if c.is(Flag::DEAD) { continue; }\n        let mut copied: Vec\u003CLit\u003E = Vec::new();\n        let mut vivified: Vec\u003CLit\u003E = Vec::new();\n        for l in c.lits.clone().iter() {\n            match asg.assigned(*l) {\n                Some(false) =\u003E copied.push(!*l),            \u002F\u002F Rule 1\n                Some(true) =\u003E continue 'next_clause,        \u002F\u002F Rule 2'\n                None =\u003E {\n                    let cid: Option\u003CClauseId\u003E = match copied.len() {\n                        0 =\u003E None,\n                        1 =\u003E { asg.assign_by_decision(copied[0]); None }\n                        _ =\u003E Some(cdb.new_clause(asg, &mut copied)), \u002F\u002F L.12\n                    };\n                    asg.assign_by_decision(!*l);\n                    let cc = asg.propagate(cdb);\n                    if cc != ClauseId::default() {\n                        vivified = asg.minimize(cdb, &v, &cdb[cc].lits); \u002F\u002F Rule 3\n                    }\n                    if let Some(cj) = cid { cdb.remove_clause(cj); }\n                    asg.cancel_until(asg.root_level);\n                    if cc != ClauseId::default() { break; }\n                    copied.push(!*l);                       \u002F\u002F Rule 4\n                }\n            }\n        }\n        if vivified.is_empty() {\n            for l in &mut copied { *l = !*l; }\n            std::mem::swap(&mut vivified, &mut copied);\n        }\n        match vivified.len() {\n            0 =\u003E break 'next_clause,\n            1 =\u003E {\n                asg.assign_at_rootlevel(vivified[0]).expect(\"impossible\");\n                assert!(asg.propagate(cdb) == ClauseId::default(), \"UNSAT\");\n            }\n            _ =\u003E cdb.new_clause(asg, &mut vivified),\n        }\n        cdb.remove_clause(*ci);\n    }\n}\n```\n\n* 空節の取り扱い（Rule 1'）、充足節の除去（Rule 2）はsolverに任せるのがいいだろうから、こう変更することにした。ただ、空節があるのに先に行っていいものだろうかという疑問はある。また、空節の場合のみ31行が成立するから8行めは無意味かも。\n\n```diff\n-                 Some(false) =\u003E copied.push(!*l),            \u002F\u002F Rule 1\n+                 Some(false) =\u003E continue,                    \u002F\u002F Rule 1'\n```\n\n### 2020-07-07\n\n読了。そして理解した。プログラムを論文に忠実なものにした。\n読む前はその分量に抵抗を感じていたのだけど、意外に素直な読みやすい論文だった。\n「permanent clauseは `rank` を変更しない」というマイクロチューニングを放棄する日が来るとは。。。\n\n* Rule 1が正しいものに戻された\n* Rule 2が正しいものに戻された\n* 部分節なのかその否定なのかを変数`flipped`で保持\n* flippedの役割も担っていた変数`vivified`は削除\n* 部分節が空節の場合でも処理を続ける\n* 部分節が単位節の場合の検査は省略して、そのまま例外を上流に投げる\n\n```rust\nfn vivify(asg: &mut AssignStack, cdb: &mut ClauseDB) -\u003E MaybeInconsistent {\n    let mut clauses: Vec\u003CClauseId\u003E = Vec::new();\n    for (i, c) in cdb.iter_mut().enumerate() {\n        if c.to_vivify() { clauses.push(ClauseId::from(i)); }\n    }\n    clauses.sort_by_key(|ci| cdb[*ci].rank);\n    for ci in clauses.iter() {\n        let c: &mut Clause = &mut cdb[ci];\n        let mut copied: Vec\u003CLit\u003E = Vec::new();\n        let mut flipped = true;\n        'this_clause: for l in c.lits.iter() {\n            match asg.assigned(*l) {\n                Some(false) =\u003E continue 'this_clause,         \u002F\u002F Rule 1\n                Some(true) =\u003E {\n                    copied.push(!*l);\n                    let r = asg.reason_literals(cdb, *l);\n                    copied = asg.minimize(cdb, &copied, &r);  \u002F\u002F Rule 2\n                    flipped = false;\n                    break 'this_clause;\n                }\n                None =\u003E {\n                    let cid: Option\u003CClauseId\u003E = match copied.len() {\n                        0 =\u003E None,\n                        1 =\u003E { asg.assign_by_decision(copied[0]); None }\n                        _ =\u003E Some(cdb.new_clause(asg, &mut copied)),\n                    };\n                    asg.assign_by_decision(!*l);\n                    let cc = asg.propagate(cdb);\n                    copied.push(!*l);                         \u002F\u002F Rule 4\n                    if cc != ClauseId::default() {\n                        let r = cdb[cc].lits.clone();         \u002F\u002F Rule 3\n                        copied = asg.minimize(cdb, &copied, &r);\n                        flipped = false;\n                    }\n                    asg.cancel_until(asg.root_level);\n                    if let Some(cj) = cid { cdb.remove_clause(cj); }\n                    if cc != ClauseId::default() { break 'this_clause; }\n                }\n            }\n        }\n        if flipped { flip(&mut copied); }\n        match copied.len() {\n            0 =\u003E (),\n            1 =\u003E asg.assign_at_rootlevel(copied[0])?,\n            _ =\u003E cdb.new_clause(asg, &mut copied),\n        }\n        cdb.remove_clause(*ci);\n    }\n\tOk(())\n}\n```\n\n### 2020-07-08\n\nほぼ完成。\n色々とチューニング中。\n途中で答えの充足性が無茶苦茶になってしまってまた大変なデバッグが始まるのかと思いきや、原因を追っていくと決定レベルが0でないところでvivificationをしていただけだった。\n\n修正しながら、このコードは特に決定レベル0に依存するところはないなあ（lockされた節さえ避ければよい）と気づいたのだが、さて、そうすると、解の近くにきた場合にrandom walkというかbelief propagationというか、そういうのの代わりに使えないものだろうか。。。。\n\nそれは無理。12行目で割当てを調べているが、この値は現在の部分割当て列に依存している。これは単なる仮説。\n従ってこの結果に基づいてリテラルを削除したり簡略化したりはできない。\n\n### 2020-07-09\n\nL45で追加してL47削除するのは無駄なので対消滅させた。なぜかinconsistent errorが出た。\n`propagate`が矛盾を返す。なぜだろう。\n\nそのうちなくなった。。。\n\n### 2020-07-22\n\n250変数の問題でpanicを起こした！\nトレースしてみると、27行目の`assign_by_decision`が実際には矛盾を発生していたにも関わらず、この関数は例外を投げないので、後の伝播で問題が発生したようだ。\npropagate側の関数にはあまり手を入れたくなかったので、27行目の前にチェックを入れることにして対応した（24行目の方は論理的に大丈夫なはず）。\nまさか、こんな小さな問題でバグが検出されるとは。\n\nついでに45行目の前にbiclauseだったら重複検査もすることにしました。\n\n\n### 2020-08-14\n\nまだバグが出る。\nやはりL44の`asg.assign_at_rootlevel(copied[0])?`で変数がassertされたら直後に`propagate`しないと、伝播の取りこぼしが起きてしまうようだ。\nvivificationの対象リテラル数を増やすと現れてきたのでおそらくこの解釈でいいんだと思う。\n\n### 2020-08-15\n\nうーむ、ここではひっかかるまいとちょっとだけ期待していたのだが、天網恢恢疎にして漏らさず、やっぱり上で追加した`propagate`が矛盾を発生させることもあるわいなぁ。\nちゃんと返値をチェックして`SolverError::Inconsistent`を返すことにしました。\n\n```\nRunning on the 204-206th problem ezfact64_8.shuffled-as.sat03-1524-sc2002...SAT\u002FSR19\u002Ff10nidw-sc2012.cnf: thread 'main' panicked at 'Vivification found an uncatchable inconsistency.', src\u002Fsolver\u002Fvivify.rs:147:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```",bodyHtml:"\u003Cp\u003E\u003Cstrong\u003Ecover image: https:\u002F\u002Funsplash.com\u002Fphotos\u002FtYs9rjaT8Vc\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EVivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003EChu-Min Li \u003Cem\u003Eet al.\u003C\u002Fem\u003E, &quot;Clause vivification by unit propagation in CDCL SAT solvers,”\u003Cem\u003EArtif. Intell.\u003C\u002Fem\u003E, vol. 279, 2019.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca href=\"\u002F2020\u002F2020-08-19-splr-with-vivification\u002F\"\u003Epart 2\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EErrata\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EAlgorithm 3\u003C\u002Fstrong\u003EのL17はforeachの内側\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EAlgorithm 4\u003C\u002Fstrong\u003EのLL.9-10はthen節の中\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EOutline\u003C\u002Fh3\u003E\n\u003Cp\u003EVivificationは魅力的な節削減手法のでSAT competitionに提出されるようなソルバに導入されたもの、その後改善が計算量に見合わないため、取り下げられることが続いてきた。\nこの論文はどのタイミングで、どの節を、どのリテラルからvivifyすればよいかについて論じている。\n特に\u003Ca href=\"\u002F2020\u002F2020-06-20-vivification\u002F\"\u003E原論文\u003C\u002Fa\u003Eでは'future work'としてのみ触れられていたin-processorとして使う場合の改善に重きを置いている。\nなお、Cadicalはこの論文で提案された手法とは無関係。所与の節にもvivificationをするべきだという主張の傍証実験に使われただけ。ただし、Cadicalが使っているのは著者らの別の論文に基づくものなので、無関係とは言い過ぎかも。\u003C\u002Fp\u003E\n\u003Cp\u003E結論は以下の通り。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eタイミング -- 節削減の後のリスタート\u003C\u002Fli\u003E\n\u003Cli\u003E対象節 -- LBD順で対象集合の半分\n\u003Cul\u003E\n\u003Cli\u003E与えられた節 -- LBDが20以下の学習節の導出に使われており、LBDが1になる、またはLBDが3回減少すれば再び対象に加える。それとは別に pre-processing phase で$10^8$リテラルまで処理する。\u003C\u002Fli\u003E\n\u003Cli\u003E学習節 -- LBDが1になる、またはLBDが2回減少すれば再び対象に加える\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eリテラル順 -- as is\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eなお、以下のようにin-processor向けに \u003Ccode\u003Evivify\u003C\u002Fcode\u003E のアルゴリズムが変更されている。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F07-05\u002Fvivi-algo3.jpg\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E節へのリテラルの追加は$\\vee$で、節集合および部分割り当てへの節または割り当ての追加は$\\cup$で表されている。つまり節が拡大するのはL17のみ。(\u003Cstrong\u003E2020-08-21追記\u003C\u002Fstrong\u003E)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cs\u003Eなんか怪しい。なぜ $\\phi \\cup \\neg C'$ なのだ？ どうして$C$に含まれていたリテラルの否定を集めた節が$\\text{vivified} C = C'$ なのだ\u003C\u002Fs\u003E ここがミソ。\u003C\u002Fli\u003E\n\u003Cli\u003E何にせよ最初に存在した節は17行目で必ず削除される。\u003C\u002Fli\u003E\n\u003Cli\u003E17行目は一つ内側のループに含まれるはずですけど。\u003C\u002Fli\u003E\n\u003Cli\u003Eこの関数は決定レベル0を想定していない。だから\u003Ccode\u003EconflictAnalysis\u003C\u002Fcode\u003Eを呼び出している。もし決定レベル0を想定するなら、これは決定変数の否定からなる単位節を返す処理に帰着する。従ってL10は $C' \\leftarrow {l_i}$と等価だか、そもそも$l_i$は割り当て済みだから何もしないのと同等。一方L13に関しては、その前のステップで決定による割り当てを行っている可能性があるのでレベル0が仮定できない。従って通常の矛盾解析を行い、\u003Cstrong\u003E学習節を追加する\u003C\u002Fstrong\u003Eことが必要である。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E節$C$が冗長であることを言う。\u003C\u002Fh3\u003E\n\u003Cp\u003E数学的準備：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E$(\\phi, \\omega) \\models \\omega'$は節集合$\\phi$と部分割当集合$\\omega$から無矛盾な割り当て集合$\\omega'$が導出されることを意味する。割当が空でも$\\omega$を導出できるなら$\\phi \\models \\omega$とも書く。\u003C\u002Fli\u003E\n\u003Cli\u003E$(\\phi, \\omega)$が矛盾を起こしているなら$\\bot$で矛盾を表し、$(\\phi, \\omega) \\models \\bot$と書くことにする。\u003C\u002Fli\u003E\n\u003Cli\u003E節$C$が冗長とは式$\\phi$と$\\phi\\setminus{C}$が論理的に等値であることを意味する。\u003C\u002Fli\u003E\n\u003Cli\u003E一般に節$C$に含まれる全てのリテラルを否定した節を$\\neg C$と書くと$\\forall C: (C \\cup \\neg C) \\models \\bot$が成立する。\u003C\u002Fli\u003E\n\u003Cli\u003E（⭐️）一般に節$C$に対して自身の部分節$C'$の否定節$\\neg C'$を加えることで矛盾が生じる（$C \\cup \\neg C' \\models \\bot$）なら、節$C$は$C'$に包含される。節$C$はリテラル$l' \\in C\\setminus{C'}$に対して何の制約にもなっていない。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Col\u003E\n\u003Cli\u003E前提として$\\phi \\nvDash \\bot$であるとする。\u003C\u002Fli\u003E\n\u003Cli\u003Eある節Cの部分節$C'$の否定節を加えても矛盾を導出しないなら、それは節Cは$C\\setminus{C'}$に包摂できることを意味している。\u003C\u002Fli\u003E\n\u003Cli\u003Eそのような部分節にリテラル$l' \\in C$の否定を加えた節を追加すると矛盾が起きたとする。それは部分節または$l'$のどちらかが充足することが必要であることを意味している。これは$\\phi$から導出された学習節である（$\\phi$の論理的帰結）。\u003C\u002Fli\u003E\n\u003Cli\u003E学習節$\\neg \\neg C' \\cup {\\neg \\neg l'} = C' \\cup l'$は節$C$の部分節である。なので（⭐️）より置き換えてよい。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003E余談\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003ECOMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB は学習節の3層管理をしている。節削減対象はLOCALのみ。\n\u003Cul\u003E\n\u003Cli\u003ECORE -- LBDが小さいもの\u003C\u002Fli\u003E\n\u003Cli\u003ETIER2 --　LBDが中間のもの。長期間依存グラフに現れないと格下げ。\u003C\u002Fli\u003E\n\u003Cli\u003ELOCAL -- それ以外\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ECOMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB はGulcose的なリスタートフェーズとLuby列に基づくリスタートフェーズを交互に使っている。これはStabilizationの先駆け？\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E2020-07-05 Splr approach\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Evivify\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(asg: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E AssignStack, cdb: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E ClauseDB) {\n    \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ci \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E clauses.iter() {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E c: &amp;Clause = &amp;cdb[ci];\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E c.is(Flag::DEAD) { \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E; }\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E c.lits.clone().iter() {\n            \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E asg.assigned(*l) {\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E) =&gt; copied.push(!*l),            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 1\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E) =&gt; \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E,        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 2&#x27;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E =&gt; {\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cid: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n                        \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E,\n                        \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; { asg.assign_by_decision(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]); \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E }\n                        _ =&gt; \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied)), \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F L.12\u003C\u002Fspan\u003E\n                    };\n                    asg.assign_by_decision(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cc = asg.propagate(cdb);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() {\n                        vivified = asg.minimize(cdb, &amp;v, &amp;cdb[cc].lits); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 3\u003C\u002Fspan\u003E\n                    }\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cj) = cid { cdb.remove_clause(cj); }\n                    asg.cancel_until(asg.root_level);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() { \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E; }\n                    copied.push(!*l);                       \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 4\u003C\u002Fspan\u003E\n                }\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E vivified.is_empty() {\n            \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied { *l = !*l; }\n            std::mem::swap(&amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied);\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E vivified.len() {\n            \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; {\n                asg.assign_at_rootlevel(vivified[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]).expect(\u003Cspan class=\"hljs-string\"\u003E&quot;impossible&quot;\u003C\u002Fspan\u003E);\n                \u003Cspan class=\"hljs-built_in\"\u003Eassert!\u003C\u002Fspan\u003E(asg.propagate(cdb) == ClauseId::default(), \u003Cspan class=\"hljs-string\"\u003E&quot;UNSAT&quot;\u003C\u002Fspan\u003E);\n            }\n            _ =&gt; cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified),\n        }\n        cdb.remove_clause(*ci);\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E空節の取り扱い（Rule 1'）、充足節の除去（Rule 2）はsolverに任せるのがいいだろうから、こう変更することにした。ただ、空節があるのに先に行っていいものだろうかという疑問はある。また、空節の場合のみ31行が成立するから8行めは無意味かも。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-deletion\"\u003E-                 Some(false) =&gt; copied.push(!*l),            \u002F\u002F Rule 1\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+                 Some(false) =&gt; continue,                    \u002F\u002F Rule 1&#x27;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-07-07\u003C\u002Fh3\u003E\n\u003Cp\u003E読了。そして理解した。プログラムを論文に忠実なものにした。\n読む前はその分量に抵抗を感じていたのだけど、意外に素直な読みやすい論文だった。\n「permanent clauseは \u003Ccode\u003Erank\u003C\u002Fcode\u003E を変更しない」というマイクロチューニングを放棄する日が来るとは。。。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ERule 1が正しいものに戻された\u003C\u002Fli\u003E\n\u003Cli\u003ERule 2が正しいものに戻された\u003C\u002Fli\u003E\n\u003Cli\u003E部分節なのかその否定なのかを変数\u003Ccode\u003Eflipped\u003C\u002Fcode\u003Eで保持\u003C\u002Fli\u003E\n\u003Cli\u003Eflippedの役割も担っていた変数\u003Ccode\u003Evivified\u003C\u002Fcode\u003Eは削除\u003C\u002Fli\u003E\n\u003Cli\u003E部分節が空節の場合でも処理を続ける\u003C\u002Fli\u003E\n\u003Cli\u003E部分節が単位節の場合の検査は省略して、そのまま例外を上流に投げる\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Evivify\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(asg: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E AssignStack, cdb: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E ClauseDB) -&gt; MaybeInconsistent {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E clauses: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (i, c) \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E cdb.iter_mut().enumerate() {\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E c.to_vivify() { clauses.push(ClauseId::from(i)); }\n    }\n    clauses.sort_by_key(|ci| cdb[*ci].rank);\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ci \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E clauses.iter() {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E c: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E Clause = &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E cdb[ci];\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E flipped = \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E c.lits.iter() {\n            \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E asg.assigned(*l) {\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E) =&gt; \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E,         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 1\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E) =&gt; {\n                    copied.push(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E r = asg.reason_literals(cdb, *l);\n                    copied = asg.minimize(cdb, &amp;copied, &amp;r);  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 2\u003C\u002Fspan\u003E\n                    flipped = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n                    \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E;\n                }\n                \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E =&gt; {\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cid: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n                        \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E,\n                        \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; { asg.assign_by_decision(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]); \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E }\n                        _ =&gt; \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied)),\n                    };\n                    asg.assign_by_decision(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cc = asg.propagate(cdb);\n                    copied.push(!*l);                         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 4\u003C\u002Fspan\u003E\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() {\n                        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E r = cdb[cc].lits.clone();         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 3\u003C\u002Fspan\u003E\n                        copied = asg.minimize(cdb, &amp;copied, &amp;r);\n                        flipped = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n                    }\n                    asg.cancel_until(asg.root_level);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cj) = cid { cdb.remove_clause(cj); }\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() { \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E; }\n                }\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E flipped { flip(&amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied); }\n        \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n            \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; (),\n            \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; asg.assign_at_rootlevel(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E])?,\n            _ =&gt; cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied),\n        }\n        cdb.remove_clause(*ci);\n    }\n\t\u003Cspan class=\"hljs-literal\"\u003EOk\u003C\u002Fspan\u003E(())\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-07-08\u003C\u002Fh3\u003E\n\u003Cp\u003Eほぼ完成。\n色々とチューニング中。\n途中で答えの充足性が無茶苦茶になってしまってまた大変なデバッグが始まるのかと思いきや、原因を追っていくと決定レベルが0でないところでvivificationをしていただけだった。\u003C\u002Fp\u003E\n\u003Cp\u003E修正しながら、このコードは特に決定レベル0に依存するところはないなあ（lockされた節さえ避ければよい）と気づいたのだが、さて、そうすると、解の近くにきた場合にrandom walkというかbelief propagationというか、そういうのの代わりに使えないものだろうか。。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eそれは無理。12行目で割当てを調べているが、この値は現在の部分割当て列に依存している。これは単なる仮説。\n従ってこの結果に基づいてリテラルを削除したり簡略化したりはできない。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-07-09\u003C\u002Fh3\u003E\n\u003Cp\u003EL45で追加してL47削除するのは無駄なので対消滅させた。なぜかinconsistent errorが出た。\n\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eが矛盾を返す。なぜだろう。\u003C\u002Fp\u003E\n\u003Cp\u003Eそのうちなくなった。。。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-07-22\u003C\u002Fh3\u003E\n\u003Cp\u003E250変数の問題でpanicを起こした！\nトレースしてみると、27行目の\u003Ccode\u003Eassign_by_decision\u003C\u002Fcode\u003Eが実際には矛盾を発生していたにも関わらず、この関数は例外を投げないので、後の伝播で問題が発生したようだ。\npropagate側の関数にはあまり手を入れたくなかったので、27行目の前にチェックを入れることにして対応した（24行目の方は論理的に大丈夫なはず）。\nまさか、こんな小さな問題でバグが検出されるとは。\u003C\u002Fp\u003E\n\u003Cp\u003Eついでに45行目の前にbiclauseだったら重複検査もすることにしました。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-08-14\u003C\u002Fh3\u003E\n\u003Cp\u003Eまだバグが出る。\nやはりL44の\u003Ccode\u003Easg.assign_at_rootlevel(copied[0])?\u003C\u002Fcode\u003Eで変数がassertされたら直後に\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eしないと、伝播の取りこぼしが起きてしまうようだ。\nvivificationの対象リテラル数を増やすと現れてきたのでおそらくこの解釈でいいんだと思う。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-08-15\u003C\u002Fh3\u003E\n\u003Cp\u003Eうーむ、ここではひっかかるまいとちょっとだけ期待していたのだが、天網恢恢疎にして漏らさず、やっぱり上で追加した\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eが矛盾を発生させることもあるわいなぁ。\nちゃんと返値をチェックして\u003Ccode\u003ESolverError::Inconsistent\u003C\u002Fcode\u003Eを返すことにしました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003ERunning on the 204-206th problem ezfact64_8.shuffled-as.sat03-1524-sc2002...SAT\u002FSR19\u002Ff10nidw-sc2012.cnf: thread 'main' panicked at 'Vivification found an uncatchable inconsistency.', src\u002Fsolver\u002Fvivify.rs:147:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n",dir:"article\u002F.json\u002F2020",base:"2020-07-05-vivification2.json",ext:".json",sourceBase:"2020-07-05-vivification2.md",sourceExt:".md"}},title:{writable:true,enumerable:true,value:"Clause Vivification updated 2020"},subtitle:{writable:true,enumerable:true,value:"vivification part 2"},date:{writable:true,enumerable:true,value:"2020-08-23T00:00:00.000Z"},tags:{writable:true,enumerable:true,value:["SAT","vivification","splr"]},banner:{writable:true,enumerable:true,value:"https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1586508217007-6e8b3151a6f2?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=80"},bodyContent:{writable:true,enumerable:true,value:"**cover image: https:\u002F\u002Funsplash.com\u002Fphotos\u002FtYs9rjaT8Vc**\n\nVivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。\n\n* Chu-Min Li *et al.*, \"Clause vivification by unit propagation in CDCL SAT solvers,”*Artif. Intell.*, vol. 279, 2019.\n\n* [part 2](\u002F2020\u002F2020-08-19-splr-with-vivification\u002F)\n\n### Errata\n\n* **Algorithm 3**のL17はforeachの内側\n* **Algorithm 4**のLL.9-10はthen節の中\n\n### Outline\n\nVivificationは魅力的な節削減手法のでSAT competitionに提出されるようなソルバに導入されたもの、その後改善が計算量に見合わないため、取り下げられることが続いてきた。\nこの論文はどのタイミングで、どの節を、どのリテラルからvivifyすればよいかについて論じている。\n特に[原論文](\u002F2020\u002F2020-06-20-vivification\u002F)では'future work'としてのみ触れられていたin-processorとして使う場合の改善に重きを置いている。\nなお、Cadicalはこの論文で提案された手法とは無関係。所与の節にもvivificationをするべきだという主張の傍証実験に使われただけ。ただし、Cadicalが使っているのは著者らの別の論文に基づくものなので、無関係とは言い過ぎかも。\n\n結論は以下の通り。\n\n* タイミング -- 節削減の後のリスタート\n* 対象節 -- LBD順で対象集合の半分\n  * 与えられた節 -- LBDが20以下の学習節の導出に使われており、LBDが1になる、またはLBDが3回減少すれば再び対象に加える。それとは別に pre-processing phase で$10^8$リテラルまで処理する。\n  * 学習節 -- LBDが1になる、またはLBDが2回減少すれば再び対象に加える\n* リテラル順 -- as is\n\nなお、以下のようにin-processor向けに `vivify` のアルゴリズムが変更されている。\n\n![](\u002Fimg\u002F2020\u002F07-05\u002Fvivi-algo3.jpg)\n\n* 節へのリテラルの追加は$\\vee$で、節集合および部分割り当てへの節または割り当ての追加は$\\cup$で表されている。つまり節が拡大するのはL17のみ。(**2020-08-21追記**)\n* ~~なんか怪しい。なぜ $\\phi \\cup \\neg C'$ なのだ？ どうして$C$に含まれていたリテラルの否定を集めた節が$\\text{vivified} C = C'$ なのだ~~ ここがミソ。\n* 何にせよ最初に存在した節は17行目で必ず削除される。\n* 17行目は一つ内側のループに含まれるはずですけど。\n* この関数は決定レベル0を想定していない。だから`conflictAnalysis`を呼び出している。もし決定レベル0を想定するなら、これは決定変数の否定からなる単位節を返す処理に帰着する。従ってL10は $C' \\leftarrow \\{l_i\\}$と等価だか、そもそも$l_i$は割り当て済みだから何もしないのと同等。一方L13に関しては、その前のステップで決定による割り当てを行っている可能性があるのでレベル0が仮定できない。従って通常の矛盾解析を行い、**学習節を追加する**ことが必要である。\n\n### 節$C$が冗長であることを言う。\n\n数学的準備：\n\n* $(\\phi, \\omega) \\models \\omega'$は節集合$\\phi$と部分割当集合$\\omega$から無矛盾な割り当て集合$\\omega'$が導出されることを意味する。割当が空でも$\\omega$を導出できるなら$\\phi \\models \\omega$とも書く。\n* $(\\phi, \\omega)$が矛盾を起こしているなら$\\bot$で矛盾を表し、$(\\phi, \\omega) \\models \\bot$と書くことにする。\n* 節$C$が冗長とは式$\\phi$と$\\phi\\setminus{C}$が論理的に等値であることを意味する。\n* 一般に節$C$に含まれる全てのリテラルを否定した節を$\\neg C$と書くと$\\forall C: (C \\cup \\neg C) \\models \\bot$が成立する。\n* （⭐️）一般に節$C$に対して自身の部分節$C'$の否定節$\\neg C'$を加えることで矛盾が生じる（$C \\cup \\neg C' \\models \\bot$）なら、節$C$は$C'$に包含される。節$C$はリテラル$l' \\in C\\setminus{C'}$に対して何の制約にもなっていない。\n\n1. 前提として$\\phi \\nvDash \\bot$であるとする。\n1. ある節Cの部分節$C'$の否定節を加えても矛盾を導出しないなら、それは節Cは$C\\setminus{C'}$に包摂できることを意味している。\n1. そのような部分節にリテラル$l' \\in C$の否定を加えた節を追加すると矛盾が起きたとする。それは部分節または$l'$のどちらかが充足することが必要であることを意味している。これは$\\phi$から導出された学習節である（$\\phi$の論理的帰結）。\n1. 学習節$\\neg \\neg C' \\cup \\{\\neg \\neg l'\\} = C' \\cup l'$は節$C$の部分節である。なので（⭐️）より置き換えてよい。\n\n### 余談\n\n* COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB は学習節の3層管理をしている。節削減対象はLOCALのみ。\n  * CORE -- LBDが小さいもの\n  * TIER2 --　LBDが中間のもの。長期間依存グラフに現れないと格下げ。\n  * LOCAL -- それ以外\n* COMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB はGulcose的なリスタートフェーズとLuby列に基づくリスタートフェーズを交互に使っている。これはStabilizationの先駆け？\n\n\n### 2020-07-05 Splr approach\n\n```rust\nfn vivify(asg: &mut AssignStack, cdb: &mut ClauseDB) {\n    'next_clause: for ci in clauses.iter() {\n        let c: &Clause = &cdb[ci];\n        if c.is(Flag::DEAD) { continue; }\n        let mut copied: Vec\u003CLit\u003E = Vec::new();\n        let mut vivified: Vec\u003CLit\u003E = Vec::new();\n        for l in c.lits.clone().iter() {\n            match asg.assigned(*l) {\n                Some(false) =\u003E copied.push(!*l),            \u002F\u002F Rule 1\n                Some(true) =\u003E continue 'next_clause,        \u002F\u002F Rule 2'\n                None =\u003E {\n                    let cid: Option\u003CClauseId\u003E = match copied.len() {\n                        0 =\u003E None,\n                        1 =\u003E { asg.assign_by_decision(copied[0]); None }\n                        _ =\u003E Some(cdb.new_clause(asg, &mut copied)), \u002F\u002F L.12\n                    };\n                    asg.assign_by_decision(!*l);\n                    let cc = asg.propagate(cdb);\n                    if cc != ClauseId::default() {\n                        vivified = asg.minimize(cdb, &v, &cdb[cc].lits); \u002F\u002F Rule 3\n                    }\n                    if let Some(cj) = cid { cdb.remove_clause(cj); }\n                    asg.cancel_until(asg.root_level);\n                    if cc != ClauseId::default() { break; }\n                    copied.push(!*l);                       \u002F\u002F Rule 4\n                }\n            }\n        }\n        if vivified.is_empty() {\n            for l in &mut copied { *l = !*l; }\n            std::mem::swap(&mut vivified, &mut copied);\n        }\n        match vivified.len() {\n            0 =\u003E break 'next_clause,\n            1 =\u003E {\n                asg.assign_at_rootlevel(vivified[0]).expect(\"impossible\");\n                assert!(asg.propagate(cdb) == ClauseId::default(), \"UNSAT\");\n            }\n            _ =\u003E cdb.new_clause(asg, &mut vivified),\n        }\n        cdb.remove_clause(*ci);\n    }\n}\n```\n\n* 空節の取り扱い（Rule 1'）、充足節の除去（Rule 2）はsolverに任せるのがいいだろうから、こう変更することにした。ただ、空節があるのに先に行っていいものだろうかという疑問はある。また、空節の場合のみ31行が成立するから8行めは無意味かも。\n\n```diff\n-                 Some(false) =\u003E copied.push(!*l),            \u002F\u002F Rule 1\n+                 Some(false) =\u003E continue,                    \u002F\u002F Rule 1'\n```\n\n### 2020-07-07\n\n読了。そして理解した。プログラムを論文に忠実なものにした。\n読む前はその分量に抵抗を感じていたのだけど、意外に素直な読みやすい論文だった。\n「permanent clauseは `rank` を変更しない」というマイクロチューニングを放棄する日が来るとは。。。\n\n* Rule 1が正しいものに戻された\n* Rule 2が正しいものに戻された\n* 部分節なのかその否定なのかを変数`flipped`で保持\n* flippedの役割も担っていた変数`vivified`は削除\n* 部分節が空節の場合でも処理を続ける\n* 部分節が単位節の場合の検査は省略して、そのまま例外を上流に投げる\n\n```rust\nfn vivify(asg: &mut AssignStack, cdb: &mut ClauseDB) -\u003E MaybeInconsistent {\n    let mut clauses: Vec\u003CClauseId\u003E = Vec::new();\n    for (i, c) in cdb.iter_mut().enumerate() {\n        if c.to_vivify() { clauses.push(ClauseId::from(i)); }\n    }\n    clauses.sort_by_key(|ci| cdb[*ci].rank);\n    for ci in clauses.iter() {\n        let c: &mut Clause = &mut cdb[ci];\n        let mut copied: Vec\u003CLit\u003E = Vec::new();\n        let mut flipped = true;\n        'this_clause: for l in c.lits.iter() {\n            match asg.assigned(*l) {\n                Some(false) =\u003E continue 'this_clause,         \u002F\u002F Rule 1\n                Some(true) =\u003E {\n                    copied.push(!*l);\n                    let r = asg.reason_literals(cdb, *l);\n                    copied = asg.minimize(cdb, &copied, &r);  \u002F\u002F Rule 2\n                    flipped = false;\n                    break 'this_clause;\n                }\n                None =\u003E {\n                    let cid: Option\u003CClauseId\u003E = match copied.len() {\n                        0 =\u003E None,\n                        1 =\u003E { asg.assign_by_decision(copied[0]); None }\n                        _ =\u003E Some(cdb.new_clause(asg, &mut copied)),\n                    };\n                    asg.assign_by_decision(!*l);\n                    let cc = asg.propagate(cdb);\n                    copied.push(!*l);                         \u002F\u002F Rule 4\n                    if cc != ClauseId::default() {\n                        let r = cdb[cc].lits.clone();         \u002F\u002F Rule 3\n                        copied = asg.minimize(cdb, &copied, &r);\n                        flipped = false;\n                    }\n                    asg.cancel_until(asg.root_level);\n                    if let Some(cj) = cid { cdb.remove_clause(cj); }\n                    if cc != ClauseId::default() { break 'this_clause; }\n                }\n            }\n        }\n        if flipped { flip(&mut copied); }\n        match copied.len() {\n            0 =\u003E (),\n            1 =\u003E asg.assign_at_rootlevel(copied[0])?,\n            _ =\u003E cdb.new_clause(asg, &mut copied),\n        }\n        cdb.remove_clause(*ci);\n    }\n\tOk(())\n}\n```\n\n### 2020-07-08\n\nほぼ完成。\n色々とチューニング中。\n途中で答えの充足性が無茶苦茶になってしまってまた大変なデバッグが始まるのかと思いきや、原因を追っていくと決定レベルが0でないところでvivificationをしていただけだった。\n\n修正しながら、このコードは特に決定レベル0に依存するところはないなあ（lockされた節さえ避ければよい）と気づいたのだが、さて、そうすると、解の近くにきた場合にrandom walkというかbelief propagationというか、そういうのの代わりに使えないものだろうか。。。。\n\nそれは無理。12行目で割当てを調べているが、この値は現在の部分割当て列に依存している。これは単なる仮説。\n従ってこの結果に基づいてリテラルを削除したり簡略化したりはできない。\n\n### 2020-07-09\n\nL45で追加してL47削除するのは無駄なので対消滅させた。なぜかinconsistent errorが出た。\n`propagate`が矛盾を返す。なぜだろう。\n\nそのうちなくなった。。。\n\n### 2020-07-22\n\n250変数の問題でpanicを起こした！\nトレースしてみると、27行目の`assign_by_decision`が実際には矛盾を発生していたにも関わらず、この関数は例外を投げないので、後の伝播で問題が発生したようだ。\npropagate側の関数にはあまり手を入れたくなかったので、27行目の前にチェックを入れることにして対応した（24行目の方は論理的に大丈夫なはず）。\nまさか、こんな小さな問題でバグが検出されるとは。\n\nついでに45行目の前にbiclauseだったら重複検査もすることにしました。\n\n\n### 2020-08-14\n\nまだバグが出る。\nやはりL44の`asg.assign_at_rootlevel(copied[0])?`で変数がassertされたら直後に`propagate`しないと、伝播の取りこぼしが起きてしまうようだ。\nvivificationの対象リテラル数を増やすと現れてきたのでおそらくこの解釈でいいんだと思う。\n\n### 2020-08-15\n\nうーむ、ここではひっかかるまいとちょっとだけ期待していたのだが、天網恢恢疎にして漏らさず、やっぱり上で追加した`propagate`が矛盾を発生させることもあるわいなぁ。\nちゃんと返値をチェックして`SolverError::Inconsistent`を返すことにしました。\n\n```\nRunning on the 204-206th problem ezfact64_8.shuffled-as.sat03-1524-sc2002...SAT\u002FSR19\u002Ff10nidw-sc2012.cnf: thread 'main' panicked at 'Vivification found an uncatchable inconsistency.', src\u002Fsolver\u002Fvivify.rs:147:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n```"},bodyHtml:{writable:true,enumerable:true,value:"\u003Cp\u003E\u003Cstrong\u003Ecover image: https:\u002F\u002Funsplash.com\u002Fphotos\u002FtYs9rjaT8Vc\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003Cp\u003EVivification についての調査第2弾、2018年投稿2019年公開の論文をまとめてみた。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003EChu-Min Li \u003Cem\u003Eet al.\u003C\u002Fem\u003E, &quot;Clause vivification by unit propagation in CDCL SAT solvers,”\u003Cem\u003EArtif. Intell.\u003C\u002Fem\u003E, vol. 279, 2019.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Ca href=\"\u002F2020\u002F2020-08-19-splr-with-vivification\u002F\"\u003Epart 2\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EErrata\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EAlgorithm 3\u003C\u002Fstrong\u003EのL17はforeachの内側\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EAlgorithm 4\u003C\u002Fstrong\u003EのLL.9-10はthen節の中\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003EOutline\u003C\u002Fh3\u003E\n\u003Cp\u003EVivificationは魅力的な節削減手法のでSAT competitionに提出されるようなソルバに導入されたもの、その後改善が計算量に見合わないため、取り下げられることが続いてきた。\nこの論文はどのタイミングで、どの節を、どのリテラルからvivifyすればよいかについて論じている。\n特に\u003Ca href=\"\u002F2020\u002F2020-06-20-vivification\u002F\"\u003E原論文\u003C\u002Fa\u003Eでは'future work'としてのみ触れられていたin-processorとして使う場合の改善に重きを置いている。\nなお、Cadicalはこの論文で提案された手法とは無関係。所与の節にもvivificationをするべきだという主張の傍証実験に使われただけ。ただし、Cadicalが使っているのは著者らの別の論文に基づくものなので、無関係とは言い過ぎかも。\u003C\u002Fp\u003E\n\u003Cp\u003E結論は以下の通り。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003Eタイミング -- 節削減の後のリスタート\u003C\u002Fli\u003E\n\u003Cli\u003E対象節 -- LBD順で対象集合の半分\n\u003Cul\u003E\n\u003Cli\u003E与えられた節 -- LBDが20以下の学習節の導出に使われており、LBDが1になる、またはLBDが3回減少すれば再び対象に加える。それとは別に pre-processing phase で$10^8$リテラルまで処理する。\u003C\u002Fli\u003E\n\u003Cli\u003E学習節 -- LBDが1になる、またはLBDが2回減少すれば再び対象に加える\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eリテラル順 -- as is\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003Eなお、以下のようにin-processor向けに \u003Ccode\u003Evivify\u003C\u002Fcode\u003E のアルゴリズムが変更されている。\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"\u002Fimg\u002F2020\u002F07-05\u002Fvivi-algo3.jpg\" alt=\"\"\u003E\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E節へのリテラルの追加は$\\vee$で、節集合および部分割り当てへの節または割り当ての追加は$\\cup$で表されている。つまり節が拡大するのはL17のみ。(\u003Cstrong\u003E2020-08-21追記\u003C\u002Fstrong\u003E)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cs\u003Eなんか怪しい。なぜ $\\phi \\cup \\neg C'$ なのだ？ どうして$C$に含まれていたリテラルの否定を集めた節が$\\text{vivified} C = C'$ なのだ\u003C\u002Fs\u003E ここがミソ。\u003C\u002Fli\u003E\n\u003Cli\u003E何にせよ最初に存在した節は17行目で必ず削除される。\u003C\u002Fli\u003E\n\u003Cli\u003E17行目は一つ内側のループに含まれるはずですけど。\u003C\u002Fli\u003E\n\u003Cli\u003Eこの関数は決定レベル0を想定していない。だから\u003Ccode\u003EconflictAnalysis\u003C\u002Fcode\u003Eを呼び出している。もし決定レベル0を想定するなら、これは決定変数の否定からなる単位節を返す処理に帰着する。従ってL10は $C' \\leftarrow {l_i}$と等価だか、そもそも$l_i$は割り当て済みだから何もしないのと同等。一方L13に関しては、その前のステップで決定による割り当てを行っている可能性があるのでレベル0が仮定できない。従って通常の矛盾解析を行い、\u003Cstrong\u003E学習節を追加する\u003C\u002Fstrong\u003Eことが必要である。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E節$C$が冗長であることを言う。\u003C\u002Fh3\u003E\n\u003Cp\u003E数学的準備：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E$(\\phi, \\omega) \\models \\omega'$は節集合$\\phi$と部分割当集合$\\omega$から無矛盾な割り当て集合$\\omega'$が導出されることを意味する。割当が空でも$\\omega$を導出できるなら$\\phi \\models \\omega$とも書く。\u003C\u002Fli\u003E\n\u003Cli\u003E$(\\phi, \\omega)$が矛盾を起こしているなら$\\bot$で矛盾を表し、$(\\phi, \\omega) \\models \\bot$と書くことにする。\u003C\u002Fli\u003E\n\u003Cli\u003E節$C$が冗長とは式$\\phi$と$\\phi\\setminus{C}$が論理的に等値であることを意味する。\u003C\u002Fli\u003E\n\u003Cli\u003E一般に節$C$に含まれる全てのリテラルを否定した節を$\\neg C$と書くと$\\forall C: (C \\cup \\neg C) \\models \\bot$が成立する。\u003C\u002Fli\u003E\n\u003Cli\u003E（⭐️）一般に節$C$に対して自身の部分節$C'$の否定節$\\neg C'$を加えることで矛盾が生じる（$C \\cup \\neg C' \\models \\bot$）なら、節$C$は$C'$に包含される。節$C$はリテラル$l' \\in C\\setminus{C'}$に対して何の制約にもなっていない。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Col\u003E\n\u003Cli\u003E前提として$\\phi \\nvDash \\bot$であるとする。\u003C\u002Fli\u003E\n\u003Cli\u003Eある節Cの部分節$C'$の否定節を加えても矛盾を導出しないなら、それは節Cは$C\\setminus{C'}$に包摂できることを意味している。\u003C\u002Fli\u003E\n\u003Cli\u003Eそのような部分節にリテラル$l' \\in C$の否定を加えた節を追加すると矛盾が起きたとする。それは部分節または$l'$のどちらかが充足することが必要であることを意味している。これは$\\phi$から導出された学習節である（$\\phi$の論理的帰結）。\u003C\u002Fli\u003E\n\u003Cli\u003E学習節$\\neg \\neg C' \\cup {\\neg \\neg l'} = C' \\cup l'$は節$C$の部分節である。なので（⭐️）より置き換えてよい。\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch3\u003E余談\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003ECOMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB は学習節の3層管理をしている。節削減対象はLOCALのみ。\n\u003Cul\u003E\n\u003Cli\u003ECORE -- LBDが小さいもの\u003C\u002Fli\u003E\n\u003Cli\u003ETIER2 --　LBDが中間のもの。長期間依存グラフに現れないと格下げ。\u003C\u002Fli\u003E\n\u003Cli\u003ELOCAL -- それ以外\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ECOMiniSATPS, MapleCOMSPS, MapleCOMSPS_LRB はGulcose的なリスタートフェーズとLuby列に基づくリスタートフェーズを交互に使っている。これはStabilizationの先駆け？\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E2020-07-05 Splr approach\u003C\u002Fh3\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Evivify\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(asg: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E AssignStack, cdb: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E ClauseDB) {\n    \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ci \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E clauses.iter() {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E c: &amp;Clause = &amp;cdb[ci];\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E c.is(Flag::DEAD) { \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E; }\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E c.lits.clone().iter() {\n            \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E asg.assigned(*l) {\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E) =&gt; copied.push(!*l),            \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 1\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E) =&gt; \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E,        \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 2&#x27;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E =&gt; {\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cid: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n                        \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E,\n                        \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; { asg.assign_by_decision(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]); \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E }\n                        _ =&gt; \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied)), \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F L.12\u003C\u002Fspan\u003E\n                    };\n                    asg.assign_by_decision(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cc = asg.propagate(cdb);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() {\n                        vivified = asg.minimize(cdb, &amp;v, &amp;cdb[cc].lits); \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 3\u003C\u002Fspan\u003E\n                    }\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cj) = cid { cdb.remove_clause(cj); }\n                    asg.cancel_until(asg.root_level);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() { \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E; }\n                    copied.push(!*l);                       \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 4\u003C\u002Fspan\u003E\n                }\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E vivified.is_empty() {\n            \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied { *l = !*l; }\n            std::mem::swap(&amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied);\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E vivified.len() {\n            \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;next_clause\u003C\u002Fspan\u003E,\n            \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; {\n                asg.assign_at_rootlevel(vivified[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]).expect(\u003Cspan class=\"hljs-string\"\u003E&quot;impossible&quot;\u003C\u002Fspan\u003E);\n                \u003Cspan class=\"hljs-built_in\"\u003Eassert!\u003C\u002Fspan\u003E(asg.propagate(cdb) == ClauseId::default(), \u003Cspan class=\"hljs-string\"\u003E&quot;UNSAT&quot;\u003C\u002Fspan\u003E);\n            }\n            _ =&gt; cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E vivified),\n        }\n        cdb.remove_clause(*ci);\n    }\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cul\u003E\n\u003Cli\u003E空節の取り扱い（Rule 1'）、充足節の除去（Rule 2）はsolverに任せるのがいいだろうから、こう変更することにした。ただ、空節があるのに先に行っていいものだろうかという疑問はある。また、空節の場合のみ31行が成立するから8行めは無意味かも。\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-deletion\"\u003E-                 Some(false) =&gt; copied.push(!*l),            \u002F\u002F Rule 1\u003C\u002Fspan\u003E\n\u003Cspan class=\"hljs-addition\"\u003E+                 Some(false) =&gt; continue,                    \u002F\u002F Rule 1&#x27;\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-07-07\u003C\u002Fh3\u003E\n\u003Cp\u003E読了。そして理解した。プログラムを論文に忠実なものにした。\n読む前はその分量に抵抗を感じていたのだけど、意外に素直な読みやすい論文だった。\n「permanent clauseは \u003Ccode\u003Erank\u003C\u002Fcode\u003E を変更しない」というマイクロチューニングを放棄する日が来るとは。。。\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003ERule 1が正しいものに戻された\u003C\u002Fli\u003E\n\u003Cli\u003ERule 2が正しいものに戻された\u003C\u002Fli\u003E\n\u003Cli\u003E部分節なのかその否定なのかを変数\u003Ccode\u003Eflipped\u003C\u002Fcode\u003Eで保持\u003C\u002Fli\u003E\n\u003Cli\u003Eflippedの役割も担っていた変数\u003Ccode\u003Evivified\u003C\u002Fcode\u003Eは削除\u003C\u002Fli\u003E\n\u003Cli\u003E部分節が空節の場合でも処理を続ける\u003C\u002Fli\u003E\n\u003Cli\u003E部分節が単位節の場合の検査は省略して、そのまま例外を上流に投げる\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cpre\u003E\u003Ccode class=\"hljs\"\u003E\u003Cspan class=\"hljs-function\"\u003E\u003Cspan class=\"hljs-keyword\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-title\"\u003Evivify\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E(asg: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E AssignStack, cdb: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E ClauseDB) -&gt; MaybeInconsistent {\n    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E clauses: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E (i, c) \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E cdb.iter_mut().enumerate() {\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E c.to_vivify() { clauses.push(ClauseId::from(i)); }\n    }\n    clauses.sort_by_key(|ci| cdb[*ci].rank);\n    \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E ci \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E clauses.iter() {\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E c: &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E Clause = &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E cdb[ci];\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied: \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E&lt;Lit&gt; = \u003Cspan class=\"hljs-built_in\"\u003EVec\u003C\u002Fspan\u003E::new();\n        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E flipped = \u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E;\n        \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E: \u003Cspan class=\"hljs-keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"hljs-keyword\"\u003Ein\u003C\u002Fspan\u003E c.lits.iter() {\n            \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E asg.assigned(*l) {\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E) =&gt; \u003Cspan class=\"hljs-keyword\"\u003Econtinue\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E,         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 1\u003C\u002Fspan\u003E\n                \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(\u003Cspan class=\"hljs-literal\"\u003Etrue\u003C\u002Fspan\u003E) =&gt; {\n                    copied.push(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E r = asg.reason_literals(cdb, *l);\n                    copied = asg.minimize(cdb, &amp;copied, &amp;r);  \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 2\u003C\u002Fspan\u003E\n                    flipped = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n                    \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E;\n                }\n                \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E =&gt; {\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cid: \u003Cspan class=\"hljs-built_in\"\u003EOption\u003C\u002Fspan\u003E&lt;ClauseId&gt; = \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n                        \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E,\n                        \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; { asg.assign_by_decision(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E]); \u003Cspan class=\"hljs-literal\"\u003ENone\u003C\u002Fspan\u003E }\n                        _ =&gt; \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied)),\n                    };\n                    asg.assign_by_decision(!*l);\n                    \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E cc = asg.propagate(cdb);\n                    copied.push(!*l);                         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 4\u003C\u002Fspan\u003E\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() {\n                        \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E r = cdb[cc].lits.clone();         \u003Cspan class=\"hljs-comment\"\u003E\u002F\u002F Rule 3\u003C\u002Fspan\u003E\n                        copied = asg.minimize(cdb, &amp;copied, &amp;r);\n                        flipped = \u003Cspan class=\"hljs-literal\"\u003Efalse\u003C\u002Fspan\u003E;\n                    }\n                    asg.cancel_until(asg.root_level);\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-keyword\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-literal\"\u003ESome\u003C\u002Fspan\u003E(cj) = cid { cdb.remove_clause(cj); }\n                    \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E cc != ClauseId::default() { \u003Cspan class=\"hljs-keyword\"\u003Ebreak\u003C\u002Fspan\u003E \u003Cspan class=\"hljs-symbol\"\u003E&#x27;this_clause\u003C\u002Fspan\u003E; }\n                }\n            }\n        }\n        \u003Cspan class=\"hljs-keyword\"\u003Eif\u003C\u002Fspan\u003E flipped { flip(&amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied); }\n        \u003Cspan class=\"hljs-keyword\"\u003Ematch\u003C\u002Fspan\u003E copied.len() {\n            \u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E =&gt; (),\n            \u003Cspan class=\"hljs-number\"\u003E1\u003C\u002Fspan\u003E =&gt; asg.assign_at_rootlevel(copied[\u003Cspan class=\"hljs-number\"\u003E0\u003C\u002Fspan\u003E])?,\n            _ =&gt; cdb.new_clause(asg, &amp;\u003Cspan class=\"hljs-keyword\"\u003Emut\u003C\u002Fspan\u003E copied),\n        }\n        cdb.remove_clause(*ci);\n    }\n\t\u003Cspan class=\"hljs-literal\"\u003EOk\u003C\u002Fspan\u003E(())\n}\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Ch3\u003E2020-07-08\u003C\u002Fh3\u003E\n\u003Cp\u003Eほぼ完成。\n色々とチューニング中。\n途中で答えの充足性が無茶苦茶になってしまってまた大変なデバッグが始まるのかと思いきや、原因を追っていくと決定レベルが0でないところでvivificationをしていただけだった。\u003C\u002Fp\u003E\n\u003Cp\u003E修正しながら、このコードは特に決定レベル0に依存するところはないなあ（lockされた節さえ避ければよい）と気づいたのだが、さて、そうすると、解の近くにきた場合にrandom walkというかbelief propagationというか、そういうのの代わりに使えないものだろうか。。。。\u003C\u002Fp\u003E\n\u003Cp\u003Eそれは無理。12行目で割当てを調べているが、この値は現在の部分割当て列に依存している。これは単なる仮説。\n従ってこの結果に基づいてリテラルを削除したり簡略化したりはできない。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-07-09\u003C\u002Fh3\u003E\n\u003Cp\u003EL45で追加してL47削除するのは無駄なので対消滅させた。なぜかinconsistent errorが出た。\n\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eが矛盾を返す。なぜだろう。\u003C\u002Fp\u003E\n\u003Cp\u003Eそのうちなくなった。。。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-07-22\u003C\u002Fh3\u003E\n\u003Cp\u003E250変数の問題でpanicを起こした！\nトレースしてみると、27行目の\u003Ccode\u003Eassign_by_decision\u003C\u002Fcode\u003Eが実際には矛盾を発生していたにも関わらず、この関数は例外を投げないので、後の伝播で問題が発生したようだ。\npropagate側の関数にはあまり手を入れたくなかったので、27行目の前にチェックを入れることにして対応した（24行目の方は論理的に大丈夫なはず）。\nまさか、こんな小さな問題でバグが検出されるとは。\u003C\u002Fp\u003E\n\u003Cp\u003Eついでに45行目の前にbiclauseだったら重複検査もすることにしました。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-08-14\u003C\u002Fh3\u003E\n\u003Cp\u003Eまだバグが出る。\nやはりL44の\u003Ccode\u003Easg.assign_at_rootlevel(copied[0])?\u003C\u002Fcode\u003Eで変数がassertされたら直後に\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eしないと、伝播の取りこぼしが起きてしまうようだ。\nvivificationの対象リテラル数を増やすと現れてきたのでおそらくこの解釈でいいんだと思う。\u003C\u002Fp\u003E\n\u003Ch3\u003E2020-08-15\u003C\u002Fh3\u003E\n\u003Cp\u003Eうーむ、ここではひっかかるまいとちょっとだけ期待していたのだが、天網恢恢疎にして漏らさず、やっぱり上で追加した\u003Ccode\u003Epropagate\u003C\u002Fcode\u003Eが矛盾を発生させることもあるわいなぁ。\nちゃんと返値をチェックして\u003Ccode\u003ESolverError::Inconsistent\u003C\u002Fcode\u003Eを返すことにしました。\u003C\u002Fp\u003E\n\u003Cpre\u003E\u003Ccode\u003ERunning on the 204-206th problem ezfact64_8.shuffled-as.sat03-1524-sc2002...SAT\u002FSR19\u002Ff10nidw-sc2012.cnf: thread 'main' panicked at 'Vivification found an uncatchable inconsistency.', src\u002Fsolver\u002Fvivify.rs:147:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n"},dir:{writable:true,enumerable:true,value:"article\u002F.json\u002F2020"},base:{writable:true,enumerable:true,value:"2020-07-05-vivification2.json"},ext:{writable:true,enumerable:true,value:".json"},sourceBase:{writable:true,enumerable:true,value:"2020-07-05-vivification2.md"},sourceExt:{writable:true,enumerable:true,value:".md"}})}],fetch:[],mutations:[]});