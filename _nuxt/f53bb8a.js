(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{617:function(n){n.exports=JSON.parse('{"title":"Swiftでcrawling","subtitle":null,"date":"2021-07-10T00:00:00.000Z","tags":["Swift","Covid19"],"bodyContent":"福岡市の[COVID19オープンデータ](https://ckan.open-governmentdata.org/dataset/401000_pref_fukuoka_covid19_patients)は更新されるたびにURLが更新される（そして古いURLは削除される）という意味不明な[運用](https://ckan.open-governmentdata.org/dataset/activity/401000_pref_fukuoka_covid19_patients)なので、毎日swiftプログラムを書き換えるという馬鹿なことをしていたのだけど、半年たってようやくcrawlingしようという気になりました。\\n\\n適当なサイトでそのやり方を調べるとそれなりに簡単みたいだっただけど、コピペで動かない。\\nそもそもこの正規表現は何?というレベルでコードに不信感を抱いたのでplaygroundで色々修正して正解を探した。\\n\\n結局こうなった。`parse`の中身をほぼ作り直し。\\nしかし、それにしても正規表現を使うのに`NSなんとか`を使うというあたりが、言語が「閉じてない」感。ちょっとねえ。\\n\\n```swift\\nimport Foundation\\n\\n// Input your parameters here\\nlet startUrl = URL(string: \\"https://ckan.open-governmentdata.org/dataset/401000_pref_fukuoka_covid19_patients\\")!\\nlet wordToSearch = \\"Swift\\"\\nlet maximumPagesToVisit = 10\\n\\n// Crawler Parameters\\nlet semaphore = DispatchSemaphore(value: 0)\\nvar visitedPages: Set<URL> = []\\nvar pagesToVisit: Set<URL> = [startUrl]\\n\\n// Crawler Core\\nfunc crawl() {\\n    guard visitedPages.count <= maximumPagesToVisit else {\\n        print(\\"🏁 Reached max number of pages to visit\\")\\n        semaphore.signal()\\n        return\\n    }\\n    guard let pageToVisit = pagesToVisit.popFirst() else {\\n        print(\\"🏁 No more pages to visit\\")\\n        semaphore.signal()\\n        return\\n    }\\n    if visitedPages.contains(pageToVisit) {\\n        crawl()\\n    } else {\\n        visit(page: pageToVisit)\\n    }\\n}\\n\\nfunc visit(page url: URL) {\\n    visitedPages.insert(url)\\n    \\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\\n        defer { crawl() }\\n        guard\\n            let data = data,\\n            error == nil,\\n            let document = String(data: data, encoding: .utf8) else { return }\\n        parse(document: document, url: url)\\n    }\\n    \\n    print(\\"🔎 Visiting page: \\\\(url)\\")\\n    task.resume()\\n}\\n\\nfunc parse(document: String, url: URL) {\\n    func collectLinks() -> [URL] {\\n        let regex = try! NSRegularExpression(pattern: \\"https://[^\\\\\\"]*\\", options: [])\\n        let matches = regex.matches(in: document, options: [], range: NSRange(document.startIndex..<document.endIndex, in: document))\\n        print(matches.map { m in document[Range(m.range, in: document)!]} )\\n        return matches.compactMap { m in URL(string: String(document[Range(m.range, in: document)!])) }\\n    }\\n    print(collectLinks())\\n    collectLinks().forEach { pagesToVisit.insert($0) }\\n}\\n\\ncrawl()\\n//semaphore.wait()\\n```","bodyHtml":"<p>福岡市の<a href=\\"https://ckan.open-governmentdata.org/dataset/401000_pref_fukuoka_covid19_patients\\">COVID19オープンデータ</a>は更新されるたびにURLが更新される（そして古いURLは削除される）という意味不明な<a href=\\"https://ckan.open-governmentdata.org/dataset/activity/401000_pref_fukuoka_covid19_patients\\">運用</a>なので、毎日swiftプログラムを書き換えるという馬鹿なことをしていたのだけど、半年たってようやくcrawlingしようという気になりました。</p>\\n<p>適当なサイトでそのやり方を調べるとそれなりに簡単みたいだっただけど、コピペで動かない。\\nそもそもこの正規表現は何?というレベルでコードに不信感を抱いたのでplaygroundで色々修正して正解を探した。</p>\\n<p>結局こうなった。<code>parse</code>の中身をほぼ作り直し。\\nしかし、それにしても正規表現を使うのに<code>NSなんとか</code>を使うというあたりが、言語が「閉じてない」感。ちょっとねえ。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">import</span> Foundation\\n\\n<span class=\\"hljs-comment\\">// Input your parameters here</span>\\n<span class=\\"hljs-keyword\\">let</span> startUrl <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-type\\">URL</span>(string: <span class=\\"hljs-string\\">&quot;https://ckan.open-governmentdata.org/dataset/401000_pref_fukuoka_covid19_patients&quot;</span>)<span class=\\"hljs-operator\\">!</span>\\n<span class=\\"hljs-keyword\\">let</span> wordToSearch <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-string\\">&quot;Swift&quot;</span>\\n<span class=\\"hljs-keyword\\">let</span> maximumPagesToVisit <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-number\\">10</span>\\n\\n<span class=\\"hljs-comment\\">// Crawler Parameters</span>\\n<span class=\\"hljs-keyword\\">let</span> semaphore <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-type\\">DispatchSemaphore</span>(value: <span class=\\"hljs-number\\">0</span>)\\n<span class=\\"hljs-keyword\\">var</span> visitedPages: <span class=\\"hljs-type\\">Set</span>&lt;<span class=\\"hljs-type\\">URL</span>&gt; <span class=\\"hljs-operator\\">=</span> []\\n<span class=\\"hljs-keyword\\">var</span> pagesToVisit: <span class=\\"hljs-type\\">Set</span>&lt;<span class=\\"hljs-type\\">URL</span>&gt; <span class=\\"hljs-operator\\">=</span> [startUrl]\\n\\n<span class=\\"hljs-comment\\">// Crawler Core</span>\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">func</span> <span class=\\"hljs-title\\">crawl</span><span class=\\"hljs-params\\">()</span></span> {\\n    <span class=\\"hljs-keyword\\">guard</span> visitedPages.count <span class=\\"hljs-operator\\">&lt;=</span> maximumPagesToVisit <span class=\\"hljs-keyword\\">else</span> {\\n        <span class=\\"hljs-built_in\\">print</span>(<span class=\\"hljs-string\\">&quot;🏁 Reached max number of pages to visit&quot;</span>)\\n        semaphore.signal()\\n        <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">guard</span> <span class=\\"hljs-keyword\\">let</span> pageToVisit <span class=\\"hljs-operator\\">=</span> pagesToVisit.popFirst() <span class=\\"hljs-keyword\\">else</span> {\\n        <span class=\\"hljs-built_in\\">print</span>(<span class=\\"hljs-string\\">&quot;🏁 No more pages to visit&quot;</span>)\\n        semaphore.signal()\\n        <span class=\\"hljs-keyword\\">return</span>\\n    }\\n    <span class=\\"hljs-keyword\\">if</span> visitedPages.contains(pageToVisit) {\\n        crawl()\\n    } <span class=\\"hljs-keyword\\">else</span> {\\n        visit(page: pageToVisit)\\n    }\\n}\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">func</span> <span class=\\"hljs-title\\">visit</span><span class=\\"hljs-params\\">(page url: URL)</span></span> {\\n    visitedPages.insert(url)\\n    \\n    <span class=\\"hljs-keyword\\">let</span> task <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-type\\">URLSession</span>.shared.dataTask(with: url) { data, response, error <span class=\\"hljs-keyword\\">in</span>\\n        <span class=\\"hljs-keyword\\">defer</span> { crawl() }\\n        <span class=\\"hljs-keyword\\">guard</span>\\n            <span class=\\"hljs-keyword\\">let</span> data <span class=\\"hljs-operator\\">=</span> data,\\n            error <span class=\\"hljs-operator\\">==</span> <span class=\\"hljs-literal\\">nil</span>,\\n            <span class=\\"hljs-keyword\\">let</span> document <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-type\\">String</span>(data: data, encoding: .utf8) <span class=\\"hljs-keyword\\">else</span> { <span class=\\"hljs-keyword\\">return</span> }\\n        parse(document: document, url: url)\\n    }\\n    \\n    <span class=\\"hljs-built_in\\">print</span>(<span class=\\"hljs-string\\">&quot;🔎 Visiting page: <span class=\\"hljs-subst\\">\\\\(url)</span>&quot;</span>)\\n    task.resume()\\n}\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">func</span> <span class=\\"hljs-title\\">parse</span><span class=\\"hljs-params\\">(document: String, url: URL)</span></span> {\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">func</span> <span class=\\"hljs-title\\">collectLinks</span><span class=\\"hljs-params\\">()</span></span> -&gt; [<span class=\\"hljs-type\\">URL</span>] {\\n        <span class=\\"hljs-keyword\\">let</span> regex <span class=\\"hljs-operator\\">=</span> <span class=\\"hljs-keyword\\">try!</span> <span class=\\"hljs-type\\">NSRegularExpression</span>(pattern: <span class=\\"hljs-string\\">&quot;https://[^<span class=\\"hljs-subst\\">\\\\&quot;</span>]*&quot;</span>, options: [])\\n        <span class=\\"hljs-keyword\\">let</span> matches <span class=\\"hljs-operator\\">=</span> regex.matches(<span class=\\"hljs-keyword\\">in</span>: document, options: [], range: <span class=\\"hljs-type\\">NSRange</span>(document.startIndex<span class=\\"hljs-operator\\">..&lt;</span>document.endIndex, <span class=\\"hljs-keyword\\">in</span>: document))\\n        <span class=\\"hljs-built_in\\">print</span>(matches.map { m <span class=\\"hljs-keyword\\">in</span> document[<span class=\\"hljs-type\\">Range</span>(m.range, <span class=\\"hljs-keyword\\">in</span>: document)<span class=\\"hljs-operator\\">!</span>]} )\\n        <span class=\\"hljs-keyword\\">return</span> matches.compactMap { m <span class=\\"hljs-keyword\\">in</span> <span class=\\"hljs-type\\">URL</span>(string: <span class=\\"hljs-type\\">String</span>(document[<span class=\\"hljs-type\\">Range</span>(m.range, <span class=\\"hljs-keyword\\">in</span>: document)<span class=\\"hljs-operator\\">!</span>])) }\\n    }\\n    <span class=\\"hljs-built_in\\">print</span>(collectLinks())\\n    collectLinks().forEach { pagesToVisit.insert(<span class=\\"hljs-variable\\">$0</span>) }\\n}\\n\\ncrawl()\\n<span class=\\"hljs-comment\\">//semaphore.wait()</span></code></pre>","dir":"article/.json/2021","base":"2021-07-10-crawler-in-swift.json","ext":".json","sourceBase":"2021-07-10-crawler-in-swift.md","sourceExt":".md"}')}}]);