(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{609:function(n){n.exports=JSON.parse('{"title":"New Implementation of vivification on Splr","subtitle":"vivification part 4","date":"2021-04-10T00:00:00.000Z","tags":["SAT","vivification","splr"],"banner":"https://unsplash.com/photos/GWtOJTUyDfc/download?force=true&w=2400","banner_caption":"https://unsplash.com/photos/GWtOJTUyDfc","bodyContent":"Splr-0.7.1で発見された決定性誤りバグの一因がどうもvivificationにあるようなので、徹底的に見直してみた。\\nその結果、バグ修正の副産物として大変更に至りました。\\n\\nこれまではひたすら論文のオリジナル疑似コードに忠実な実装を心がけていた。\\n\\n![](/img/2020/07-05/vivi-algo3.jpg)\\n\\n見ての通り、節を追加して伝播させて、節を削除して、ということを繰り返している。\\nそのためsandboxなんてものをサブモジュールに追加したりしていたのだけど、この\\"clause vivification\\"とは\\n\\n- 節に含まれるリテラルを順に否定して行った時に、いくつ目のリテラルで（この節ひいては式が）矛盾するかを考え、それ以上のリテラルはあっても無駄なので省きましょう\\n\\nというだけのこと。だったらこの通りに実装すればいいんじゃない？\\n\\n```rust\\n  let c = cdb.clause[cid];\\n  for lit in c.lits.iter() {  // 準備に\\n    vivified.push(lit);\\n    asg.assign_by_decision(!lit); // 否定してみて\\n    let cc = asg.propagate();\\n    if cc.is_some() && vivified.len() < c.lits.len() {   // 短くなっていたら\\n      cdb.new_clause(vivified);  // 新しい節に置き換え\\n      cdb.detach(cid);\\n      break;\\n    }\\n  }\\n  asg.cancel_until(self.root_level); // クリーンアップ\\n```\\n\\n節の出し入れが一切なくなってclauseDB的な負荷が一切消えてしまった!\\nこれで決まり。","bodyHtml":"<p>Splr-0.7.1で発見された決定性誤りバグの一因がどうもvivificationにあるようなので、徹底的に見直してみた。\\nその結果、バグ修正の副産物として大変更に至りました。</p>\\n<p>これまではひたすら論文のオリジナル疑似コードに忠実な実装を心がけていた。</p>\\n<p><img src=\\"/img/2020/07-05/vivi-algo3.jpg\\" alt=\\"\\"></p>\\n<p>見ての通り、節を追加して伝播させて、節を削除して、ということを繰り返している。\\nそのためsandboxなんてものをサブモジュールに追加したりしていたのだけど、この&quot;clause vivification&quot;とは</p>\\n<ul>\\n<li>節に含まれるリテラルを順に否定して行った時に、いくつ目のリテラルで（この節ひいては式が）矛盾するかを考え、それ以上のリテラルはあっても無駄なので省きましょう</li>\\n</ul>\\n<p>というだけのこと。だったらこの通りに実装すればいいんじゃない？</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">let</span> c = cdb.clause[cid];\\n  <span class=\\"hljs-keyword\\">for</span> lit <span class=\\"hljs-keyword\\">in</span> c.lits.iter() {  <span class=\\"hljs-comment\\">// 準備に</span>\\n    vivified.push(lit);\\n    asg.assign_by_decision(!lit); <span class=\\"hljs-comment\\">// 否定してみて</span>\\n    <span class=\\"hljs-keyword\\">let</span> cc = asg.propagate();\\n    <span class=\\"hljs-keyword\\">if</span> cc.is_some() &amp;&amp; vivified.len() &lt; c.lits.len() {   <span class=\\"hljs-comment\\">// 短くなっていたら</span>\\n      cdb.new_clause(vivified);  <span class=\\"hljs-comment\\">// 新しい節に置き換え</span>\\n      cdb.detach(cid);\\n      <span class=\\"hljs-keyword\\">break</span>;\\n    }\\n  }\\n  asg.cancel_until(<span class=\\"hljs-keyword\\">self</span>.root_level); <span class=\\"hljs-comment\\">// クリーンアップ</span></code></pre><p>節の出し入れが一切なくなってclauseDB的な負荷が一切消えてしまった!\\nこれで決まり。</p>\\n","dir":"article/.json/2021","base":"2021-04-10-splr-vivification.json","ext":".json","sourceBase":"2021-04-10-splr-vivification.md","sourceExt":".md"}')}}]);