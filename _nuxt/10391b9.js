(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{528:function(n){n.exports=JSON.parse('{"title":"Memo about @now/rust by Zeit","subtitle":"@now/rustを使ったサーバーレスコンピューティング","date":"2019-03-10T00:00:00.000Z","tags":["Rust"],"bodyContent":"## 準備\\n\\nまずシステムを汚染しないようにnowをインストール：\\n\\n```\\nnpm config set prefix ~/.local/npm/\\nnpm install -g now\\nln -s ~/.local/npm/bin/now `/.local/bin/now\\n```\\n\\n## 試行\\n\\n[紹介ポスト](https://zeit.co/blog/introducing-now-rust)は色々と内容が古くなっているので[Document](https://zeit.co/docs/v2/deployments/official-builders/now-rust/)をたどる方がよい。\\n\\n## Tips\\n\\n### 要求: `$TOP/index.rs`ではなくsrc/の下においてcargoでコンパイルしたい。\\n\\nnow.jsonでビルド元を指定すればよい。\\n\\n```json\\n    \\"builds\\": [\\n\\t{\\n\\t    \\"src\\": \\"src/index.rs\\",\\n\\t    \\"use\\": \\"@now/rust\\"\\n\\t}\\n    ],\\n```\\n\\nただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。\\n\\n```json\\n    \\"routes\\": [\\n\\t{\\n\\t    \\"src\\": \\"/\\",\\n\\t    \\"dest\\": \\"/src/\\"\\n\\t}\\n    ]\\n```\\n\\n### 要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい\\n\\nデプロイするのはsrc/index.rsなので、それ以外のソースにmain関数があればいい。\\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。\\n\\n```\\n/target\\n/src/bin\\n...\\n```\\n\\nそもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\\nなのでそこに実行ファイルを置きたいならsrc/binの下のファイルを`cargo run -bin`で実行しろと\\nいう話。\\n\\n### 要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない\\n\\ncargoのfeatureを使えばいい\\n\\n\\n```\\n# Cargo.toml\\n\\n[dependencies]\\nhttp = \\"0.1\\"\\nregex = \\"1.1.0\\"\\nreqwest = { version = \\"0.9.12\\", optional = true }\\nscraper = { version = \\"0.9.2\\", optional = true }\\nserde = { version = \\"1.0.89\\", features = [\\"derive\\"] }\\nserde_json = \\"1.0\\"\\nurl = { version = \\"1.7.2\\", features = [ \\"query_encoding\\" ] }\\n\\n[features]\\nprepare = [\\"reqwest\\", \\"scraper\\"]\\n```\\n\\nこうしておいて、手元で実行するときは以下を実行。\\n\\n```\\ncargo run --bin xxx --features prepare\\n```\\n\\nデプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。\\n\\n### 要求：handlerを手元で実行する時も流用したい\\n\\nhandlerの型は\\n\\n```\\nfn handler(request: http::Request<()>) -> http::Result<http::Response<String>>;\\n```\\n\\nなのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。\\n\\nまあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。","bodyHtml":"<h2>準備</h2>\\n<p>まずシステムを汚染しないようにnowをインストール：</p>\\n<pre><code>npm config set prefix ~/.local/npm/\\nnpm install -g now\\nln -s ~/.local/npm/bin/now `/.local/bin/now\\n</code></pre>\\n<h2>試行</h2>\\n<p><a href=\\"https://zeit.co/blog/introducing-now-rust\\">紹介ポスト</a>は色々と内容が古くなっているので<a href=\\"https://zeit.co/docs/v2/deployments/official-builders/now-rust/\\">Document</a>をたどる方がよい。</p>\\n<h2>Tips</h2>\\n<h3>要求: <code>$TOP/index.rs</code>ではなくsrc/の下においてcargoでコンパイルしたい。</h3>\\n<p>now.jsonでビルド元を指定すればよい。</p>\\n<pre><code class=\\"hljs\\">\\"builds\\": [\\n\\t{\\n\\t    \\"src\\": \\"src/index.rs\\",\\n\\t    \\"use\\": \\"@now/rust\\"\\n\\t}\\n    ],</code></pre><p>ただし、これだけだとendpointの対応が取れなくなるのでroutesも指定する。</p>\\n<pre><code class=\\"hljs\\">\\"routes\\": [\\n\\t{\\n\\t    \\"src\\": \\"/\\",\\n\\t    \\"dest\\": \\"/src/\\"\\n\\t}\\n    ]</code></pre><h3>要求：手元でも実行できるようにして、ソースを変えずにデプロイしたい</h3>\\n<p>デプロイするのはsrc/index.rsなので、それ以外のソースにmain関数があればいい。\\n実行ファイルを生成するためのファイルは.nowignoreで隠してしまえばよい。</p>\\n<pre><code>/target\\n/src/bin\\n...\\n</code></pre>\\n<p>そもそも、デプロイ時にはhandler関数を提供するRustライブラリパッケージという位置付けのようだ。\\nなのでそこに実行ファイルを置きたいならsrc/binの下のファイルを<code>cargo run -bin</code>で実行しろと\\nいう話。</p>\\n<h3>要求：手元で実行するための依存パッケージをデプロイ先でコンパイルしたくない</h3>\\n<p>cargoのfeatureを使えばいい</p>\\n<pre><code># Cargo.toml\\n\\n[dependencies]\\nhttp = &quot;0.1&quot;\\nregex = &quot;1.1.0&quot;\\nreqwest = { version = &quot;0.9.12&quot;, optional = true }\\nscraper = { version = &quot;0.9.2&quot;, optional = true }\\nserde = { version = &quot;1.0.89&quot;, features = [&quot;derive&quot;] }\\nserde_json = &quot;1.0&quot;\\nurl = { version = &quot;1.7.2&quot;, features = [ &quot;query_encoding&quot; ] }\\n\\n[features]\\nprepare = [&quot;reqwest&quot;, &quot;scraper&quot;]\\n</code></pre>\\n<p>こうしておいて、手元で実行するときは以下を実行。</p>\\n<pre><code>cargo run --bin xxx --features prepare\\n</code></pre>\\n<p>デプロイ時にはfeaturesは指定されないので依存パッケージも取得、コンパイルされない。</p>\\n<h3>要求：handlerを手元で実行する時も流用したい</h3>\\n<p>handlerの型は</p>\\n<pre><code>fn handler(request: http::Request&lt;()&gt;) -&gt; http::Result&lt;http::Response&lt;String&gt;&gt;;\\n</code></pre>\\n<p>なのでこれと同じであればいいのだが、例えばactix-webではRequsetなどを自前で定義しているので\\n難しそうだ。traitオブジェクト的にコンパチかもしれないが。。。</p>\\n<p>まあ、htmlを返す下請け関数を作ってどちらからもこの関数を使うというあたりが落とし所か。</p>\\n","dir":"article/.json/2019","base":"2019-03-17-now.json","ext":".json","sourceBase":"2019-03-17-now.md","sourceExt":".md"}')}}]);