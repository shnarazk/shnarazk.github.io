(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{545:function(n){n.exports=JSON.parse('{"title":"A Consideration about Restart (2019-07-31)","subtitle":"（部分的）リスタートの意義","date":"2019-09-10T00:00:00.000Z","tags":["SAT","issue"],"bodyContent":"### これまでのまとめ\\n\\n- [First UIP distribution (2019-07-21)](/2019/2019-07-21-first-UIP-distribution/)\\n- [Development of Var activities (2019-07-11)](/2019/2019-07-11-varact-distribution/)\\n- [Some Stats about Partial Restart (2019-08-04)](/2019/4f2a110a30ee837b/obs/)\\n\\n求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\\nしかし、リスタートは本当に必要なのだろうか。\\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。\\n\\n何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。\\n\\n- クラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行\\n- 停滞したら大きくジャンプして次のクラスタを探す\\n- クラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\\n  これは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\\n  それらを集めればこれは非常によい局所性を示すようになるのではなかろうか。\\n\\nこの仮定が正しいなら、**変数の最終割当て**と**求解対象のクラスタの時刻分布**\\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。\\n\\nただ、ここの「変数割当て」というのは定義が難しい。\\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。\\n\\n結局、その意味するものは[Development of Var activities (2019-07-11)](/2019/2019-07-11-varact-distribution/)で考えた\\n`変数活性度の分散`、あるいはその近似のFUP集合の大きさに帰着するようだ。\\n\\nこの結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\\nということで[Some Stats about Partial Restart (2019-08-04)](/2019/4f2a110a30ee837b/obs/)で実装を試し\\nてみたのだが、いい成果にはならなかった。\\n\\n# 2019-08-20\\n\\nおよそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。\\n\\nリテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\\n**だからリスタートには意味がある。**\\n\\n問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。\\n\\n現在のrewarding & phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\\nこれは矛盾している部分から割り当てようとするため。\\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。\\n\\nクラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\\nその不動点は問題を構成する閉集合そのものになってしまう。\\n\\nにも関わらず、その増え方には特徴が見られる。\\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。\\n\\n停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\\n実験結果はこの方向性を強く示唆しているようだ。\\n\\n# 2019-08-24\\n\\nさらにscrap and build。\\n\\nEMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。\\n\\n求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。\\n\\n# 2019-08-28\\n\\n名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。\\n\\nリスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。\\n\\n![](/img/2019/08-28/effect-of-restarts.png)\\n\\n図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。\\n\\nリスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。\\n\\nまた、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。\\n\\n一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。\\n\\n面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。\\n\\n# 2019-09-03 Restart-As-Swapping-FULs\\n\\ngive up中。\\n\\n大域的な尺度が出たとしてそれをどう使えばよいかわからない。\\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。\\n\\nそもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。\\n\\nということからローカルな尺度 + **リスタートの意義を反映した変数の重み付け** が重要な気がしてきた。\\nこの視点から見てCHBはどうなんだろうか。\\n複雑すぎやしないだろうか。\\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。\\n\\n# 2019-09-10\\n\\n一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\\nようだ。で、今のところ**リスタートの意義を反映した変数の重み付け** はうまくいっていない。\\n\\n- ASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\\n  まあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\\n  だとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\\n  うーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。\\n- LBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\\n  これもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\\n  判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。\\n\\nというわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。\\n\\nさらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。","bodyHtml":"<h3>これまでのまとめ</h3>\\n<ul>\\n<li><a href=\\"/2019/2019-07-21-first-UIP-distribution/\\">First UIP distribution (2019-07-21)</a></li>\\n<li><a href=\\"/2019/2019-07-11-varact-distribution/\\">Development of Var activities (2019-07-11)</a></li>\\n<li><a href=\\"/2019/4f2a110a30ee837b/obs/\\">Some Stats about Partial Restart (2019-08-04)</a></li>\\n</ul>\\n<p>求解状況の平滑化された数値化を実現して、それをリスタートに反映させようとしてきた。\\nしかし、リスタートは本当に必要なのだろうか。\\n途中で打ち切るという非連続な、余計なものを持ち込むから制御が複雑怪奇になるのであって、\\n適切なバックトラックレベルの計算の中に部分的リスタートとして組み込んでしまえばいいだけではなかろうか。</p>\\n<p>何故なら、ランダムウォークよりもクラスタ（部分問題を構成する変数集合）間の遷移モデルの方がよさそうだから。</p>\\n<ul>\\n<li>クラスタから出ないように（そのためにはリスタートは掛けない）、部分的リスタートを実行</li>\\n<li>停滞したら大きくジャンプして次のクラスタを探す</li>\\n<li>クラスタを定義する候補の一つが割り当て履歴に依存する First UIP 集合。\\nこれは定義から、他のクラスタとのリンクを切る可能性を持つ変数である。\\nそれらを集めればこれは非常によい局所性を示すようになるのではなかろうか。</li>\\n</ul>\\n<p>この仮定が正しいなら、<strong>変数の最終割当て</strong>と<strong>求解対象のクラスタの時刻分布</strong>\\nは相関を示すはずだし、それはリスタートにより離散クラスタ的な傾向を示すはず。\\n与えられた問題はクラスタを解きながら（部分的）リスタートによって遷移することで解けるだろう。</p>\\n<p>ただ、ここの「変数割当て」というのは定義が難しい。\\n割当てが決定したと言いたいのだろうが他の変数のためのバックトラックによって簡単に壊れてしまう。\\n部分問題ではなく全体での割り当てならそれは最後のバックトラック以降だけしか見ないことになる。</p>\\n<p>結局、その意味するものは<a href=\\"/2019/2019-07-11-varact-distribution/\\">Development of Var activities (2019-07-11)</a>で考えた\\n<code>変数活性度の分散</code>、あるいはその近似のFUP集合の大きさに帰着するようだ。</p>\\n<p>この結果を（部分的）リスタートに反映させた戦略を実装評価すべきである。\\nということで<a href=\\"/2019/4f2a110a30ee837b/obs/\\">Some Stats about Partial Restart (2019-08-04)</a>で実装を試し\\nてみたのだが、いい成果にはならなかった。</p>\\n<h1>2019-08-20</h1>\\n<p>およそ一ヶ月間ずっとscrap and buildを繰り返して、そこそこの実証も得られた。</p>\\n<p>リテラルaからリテラルbを導出する手間とその逆の手間は同じではない。オーダーレベルで違う。\\n<strong>だからリスタートには意味がある。</strong></p>\\n<p>問題が疎なクラスタに分割できるとすると、UNSAT問題はUNSATなクラスタを見つけることが必要。\\nSATクラスタは実は求解には寄与しない（がもちろん前もって知ることは不可能）。</p>\\n<p>現在のrewarding &amp; phase-savingの副産物としてハードクラスタに当たると割り当て数は減少する。\\nこれは矛盾している部分から割り当てようとするため。\\nその結果クラスタに高い確率で含まれる変数であっても矛盾解消の時点で割り当てがなくなることがある。\\nクラスタを維持するという目的に関しては部分的リスタートの効果は疑問。</p>\\n<p>クラスタは閉集合ではない。割り当て対象リテラルをクラスタに含まれないものから取れば明らかに漸増する。\\nその不動点は問題を構成する閉集合そのものになってしまう。</p>\\n<p>にも関わらず、その増え方には特徴が見られる。\\n明らかな拡大期と停滞期からなる問題もあれば、定常的に増大する問題もある。\\n変数数が少ない3SAT問題などでは短期間で極大化してしまう。</p>\\n<p>停滞期は難しいクラスタに突っ込んだ状態と考えてよい。\\n停滞期に至るまでに解けなかったなら解くべき問題は他にあると考えるべきか。\\n実験結果はこの方向性を強く示唆しているようだ。</p>\\n<h1>2019-08-24</h1>\\n<p>さらにscrap and build。</p>\\n<p>EMAベースのLBDによる枝刈りはそれなりに説得力ある。なんといっても時間平均値だから。\\nしかし、学習節の評価と求解打ち切りの尺度の関係がいまひとつ不明な気がする。\\nハードクラスタに突入したからリスタートをかけたいのなら、目的と手段の間にズレが生じているのではないか。\\n手間がかかり過ぎる、すなわち大きなクラスタに突入したことをもってリスタートの契機にすべきでは。</p>\\n<p>求解中はリスタートを禁止し、時間超過の場合のみリスタートをするならば、割当量とLBDという2種類の評価尺度を持ち出す必要はなくなり、より簡潔なものになる。</p>\\n<h1>2019-08-28</h1>\\n<p>名前よくねーな、restartではなくreorderingじゃねーか。variable rewardingはpivot selectingじゃん。</p>\\n<p>リスタートは思ったほどリセットではない。よくよく気づいてなかったけど、\\n例えば以下の時間変化の図からわかるように少なくともFUPやCNFに関してはリスタートの実行はほとんど影響を与えない。\\nむしろ同一セグメントを形成するのかもしれない。個人的にはちょっとショックだったがよくよく考えれば、\\n求解中にリスタートを掛けても対象となる矛盾リテラルは（多くの場合）変わらないはずでこの観測結果を裏付ける。\\nハードコア内での積極的なリスタートは割当て順序の入れ替えという意味で積極的に行ってもいいのかもしれない。</p>\\n<p><img src=\\"/img/2019/08-28/effect-of-restarts.png\\" alt=\\"\\"></p>\\n<p>図に示された観測結果はFUPが時間積算値であり、しかもEMA平均を取っているせいだろう。ここがLBDや割当量とは大きく違うところ。</p>\\n<p>リスタートの説明としては、割当ての試みの順序が変わるのだから計算量に影響を及ぼすような変動をもたらす。\\n一方で、探索対象の変数群に関しては大きな変更はもたらさない。というところではないか。\\n履歴依存性というか、順序付けが重要な探索問題なので、探索ではなく並べ替え問題と理解したほうがいいかも。</p>\\n<p>また、最近restartに導入した評価値の量子化のせいかもしれない。リスタートの変動が吸収されているかも。</p>\\n<p>一方、FUP拡張期でのリスタートはどういう意味があるのだろう。\\n停滞期のリスタートがハードコアの矛盾解消のための並べ替えだとすると、こちらはコア間の並べ替えではなかろうか。</p>\\n<p>面白いのは拡張期においてもFUPやCNF（のトレンド）に影響を与えてないように見える点である。\\nFULトレンドが、言うなればスコープを与えるもの（実際はその逆でスコープから決まる量）だとすると拡張期により広い範囲での並べ替えをしようとしていると考えるのは自然だろう。</p>\\n<h1>2019-09-03 Restart-As-Swapping-FULs</h1>\\n<p>give up中。</p>\\n<p>大域的な尺度が出たとしてそれをどう使えばよいかわからない。\\n動作選択指針となり得るオンラインでかつ履歴に（それほど）依存しない尺度の方が使い勝手がいいと言われればそれまでのような。</p>\\n<p>そもそもLBDやASGが激しく暴れるのはその局面の評価をしたいからであって、大域的な傾向が知りたいわけではないのだから、むしろ当然なのだろう。\\nただなぜ長さ25なのかという疑問は残るが、まあ、サンプリング精度はそれほど結果に影響を与えないのだろうから、ここに突っ込んでもしょうがない。</p>\\n<p>ということからローカルな尺度 + <strong>リスタートの意義を反映した変数の重み付け</strong> が重要な気がしてきた。\\nこの視点から見てCHBはどうなんだろうか。\\n複雑すぎやしないだろうか。\\nこのところの結論は、「変数の優先度とは要は順序づけ」なのだが、ここに指数関数、EMAを導入する必要があるだろうか。</p>\\n<h1>2019-09-10</h1>\\n<p>一時撤退。もう一度0.1.3から組み立て直してみると、block restartやforce restartのタイミングは\\n非常に微妙で、ちょっと変更しただけで大きな差が生じていた。0.2.0に向けてのリファクタリングは、\\nアルゴリズムの変更よりも影響が大きそうなので、一旦0.1.4をリリースしてから再挑戦した方がいい\\nようだ。で、今のところ<strong>リスタートの意義を反映した変数の重み付け</strong> はうまくいっていない。</p>\\n<ul>\\n<li>ASGの値を基にしたblock_restartを呼び出すのはコンフリクトが起きたタイミング。\\nまあ、できる単位伝播が残っているのにASGを更新しても意味がないかもしれない。\\nだとすると判定呼び出しの場所として合理的なのはコンフリクトが起きた直後ということになる。\\nうーむ、一つの前のpropagateでの到達割当て数を記録すべきだろうか。</li>\\n<li>LBDの値を基にしたforce_restartを呼び出すのはコンフリクトが起きてない決定レベル上昇中。\\nこれもリスタートが起きないパスで強制的にリスタートをするのが目的だとすればそうかもしれない。\\n判断の最適化はしたとしても、判定呼び出しの場所はここでないといけないようだ。</li>\\n</ul>\\n<p>というわけで、どちらのタイミングも0.2.0RCでは完全にひっくり返っていた。ちょっと確かめた範囲では\\nこのロジックの無視（反転）は明らかな性能劣化を起こしていた。</p>\\n<p>さらにVISDSのオーバーフロー対策のスケーリング係数も意外に大きく効く。\\n実際に丸め誤差が生じているのだろう。ここも0.1.3のコードを修正するなら実験に基づいた設定が必要。</p>\\n","dir":"article/.json/2019","base":"2019-07-31-restart.json","ext":".json","sourceBase":"2019-07-31-restart.md","sourceExt":".md"}')}}]);