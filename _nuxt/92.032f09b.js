(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{565:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2010, Jun.","subtitle":"Vol.1, No.6.","date":"2020-07-31T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2020/07-31/banner.jpg","bodyContent":"# UNSATlog\\n\\n## 今月のキーワード\\n* Debugging Vivification\\n* Restricted Stabilization\\n* Maximum LBD of Dependency Graph\\n* Duplicated Bin-clause Checking\\n* Change of Restart Point\\n\\n## Vivification update\\n 先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。\\n\\n## 節の重複検査\\nその修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。\\n\\n## Fixed or Solved -> Asserted\\nvivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。\\n\\n## Restart revised\\nvivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。\\n\\n## 節サイズ4バイト減\\nその話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。\\n\\n## リスタートIF作り替え\\nSplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。\\n\\n## Rephase to the best\\nstabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。\\n\\n## Stabilizationのバリエーション\\n何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを\\n\\n* 同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）\\n* そうでなければリスタートを抑制\\n\\nに変えてもよさそうに思える。さらに言えば\\n\\n* stabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）\\n* そうでなければ浅い矛盾を見つけるため従来法\\n\\nとしてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。\\n\\n## おわりに\\n\\nおまけにもう一つ。[今年のSATの国際会議](https://satcompetition.github.io/2020/)の[予稿集](https://link.springer.com/book/10.1007/978-3-319-24318-4)がいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。\\n\\n## Links\\n\\n* https://github.com/shnarazk/splr/pull/56\\n* https://sat2020.idea-researchlab.org/competitions/\\n* https://satcompetition.github.io/2020/\\n* https://link.springer.com/book/10.1007/978-3-319-24318-4","bodyHtml":"<h1>UNSATlog</h1>\\n<h2>今月のキーワード</h2>\\n<ul>\\n<li>Debugging Vivification</li>\\n<li>Restricted Stabilization</li>\\n<li>Maximum LBD of Dependency Graph</li>\\n<li>Duplicated Bin-clause Checking</li>\\n<li>Change of Restart Point</li>\\n</ul>\\n<h2>Vivification update</h2>\\n<p>先月、実装終わったつもりだったvivification。本当に効果あるのかどうかベンチマークを走らせているはずなんだけども、他のアイデアが出てきたりして、なかなかコードがフィックスしない。そして7月も下旬になってから実はエラーを出していたことが判明しました。Splrでは決定による含意での割り当てはエラーを返さないのが原因なので、割り当てチェックを走らせることで対応します（これでいいはず）。</p>\\n<h2>節の重複検査</h2>\\n<p>その修正中のダンプを見ていてvivifyされて短くなった節が同じ節であることが意外に多いことに気づいたので、binclauseの時に限りbin_watcherを使って重複検査をするように修正。eliminaterも同様の検査を追加。watcherを一本たどるだけなのでコストは低いはず。まあ効果の程は不明だけど問題ないでしょう。</p>\\n<h2>Fixed or Solved -&gt; Asserted</h2>\\n<p>vivificationに関する論文では、単位学習節によって割り当てが確定することをassertと読んでいたので、これまで使っていたsolvedという語をassertedに変更することにしました。うーん、そういうwordingは頭になかった。</p>\\n<h2>Restart revised</h2>\\n<p>vivificationとstabilizationを混ぜたチューニング中に突然閃いたのだけど、stabilizationが必要なのは、必要なんだけどもLBDが大きいので捨てられる学習節を救うためなので、そもそもLBDが大きくても捨てなければいいんじゃないだろうか？そのためのいろいろなアイデアがあったわけなんだけども、要るか要らないかを、履歴を基に判定すれば難しいことはないんじゃないでしょうか。要るか要らないかの判定はめちゃくちゃ簡単で、矛盾解析中に使った節のLBDの統計値と比較すればいいだけ。ということで「依存グラフ中の最大LBD」のEMAを保持するようにして、これで獲得学習節のLBDのEMAを比較する手法を実装してみた。ただし節は実行中にLBDが段々と減少するよなぁとか色々と考えることはあるので、現在チューニング、ベンチマーク中です。</p>\\n<h2>節サイズ4バイト減</h2>\\n<p>その話に関して、もしかしてLBDの初期値も保存した方がいいのだろうか、footprintを増やしたくはないなあと思ったけど、rankにusizeを取るのは妥当だろうか？ 6万レベルもあれば十分じゃない？というわけでrankは8Byteから2Byteへと激減しました。flagと合わせて4Byteも減りました。</p>\\n<h2>リスタートIF作り替え</h2>\\n<p>SplrはGlucose以来の矛盾が発生した時に実行されるforce_restartと矛盾が発生しなかった時に実行されるblock_restartの2関数を使って動的リスタートを実現していましたが、これもやっぱり議論の余地がある。きっちりデータ残していれば判定は矛盾発生時の1箇所だけでいいんじゃなかろうか。そして関数を2つ用意する必要ないんじゃないか。思考実験では問題なさそうなので、まる1年は変更していなかった部分を変更してみました。restarterは各所でSolverEventを受け取り、判断は矛盾発生・対応後の1箇所。これでいいのでは。</p>\\n<h2>Rephase to the best</h2>\\n<p>stabilization中に最良（部分）割り当てに戻ってくるのはいいけど、多く問題で早々にいい割り当てが出てしまった後、まったくその割り当てを超えられないという経過を辿ることが多いようだ。割当量が同じでも後から見つかった方が制約がきつい中での部分解なのでこちらを優先した方がよさそうだし、そうするとわずかに最良に届かなかったとしても後から見つかった部分解は考慮に足るのではなかろうか。というわけで最良割り当ての判定に使っている最大割り当て数も腐らせることにしました（正しく腐れているかどうか検証待ち。）。</p>\\n<h2>Stabilizationのバリエーション</h2>\\n<p>何も考えずにstabilizationの持続期間を増やしていくと（それは必要なことであることは十分わかるんだけど）、あまりにもリスタート回数が減ってしまうので、何かトンネルされることはできないだろうか。ということで思いついたのが現在のfocal pointから大きくずれなかったらリスタートを許してもいいんじゃなかろうかというアイデア。これまではrephase、リスタートの完全抑制の２種類の方法を使っていたけど、これを</p>\\n<ul>\\n<li>同じような割り当て列に戻ってきそうな場合はリスタートを許容（その後rephaseするかどうかは現在検討中）</li>\\n<li>そうでなければリスタートを抑制</li>\\n</ul>\\n<p>に変えてもよさそうに思える。さらに言えば</p>\\n<ul>\\n<li>stabilization中はこの制御法でdeep search（やはりrestartを止めるのはどうだろうかという疑問に戻ってきてしまう）</li>\\n<li>そうでなければ浅い矛盾を見つけるため従来法</li>\\n</ul>\\n<p>としてもいいかもしれない。どちらがいいのかはLearning Rateのわかりやすい矛盾発生頻度の最大化に対する寄与の度合いとして、これがまたmulti-armed bandid問題なのか？？？うーむ、やること多すぎ。ということでアイデア豊作な一ヶ月でした。</p>\\n<h2>おわりに</h2>\\n<p>おまけにもう一つ。<a href=\\"https://satcompetition.github.io/2020/\\">今年のSATの国際会議</a>の<a href=\\"https://link.springer.com/book/10.1007/978-3-319-24318-4\\">予稿集</a>がいつものようにSpringerのLNCSとして刊行されているんだけど、論文単位だとただでダウンロードできますよ。（あれ、これって期間限定でいつものことだっけ？いつも出遅れていただけだっけ？）というわけで論文も豊作でした。そして、来月までにはSAT Competition 2020の分析をしなければ。</p>\\n<h2>Links</h2>\\n<ul>\\n<li>https://github.com/shnarazk/splr/pull/56</li>\\n<li>https://sat2020.idea-researchlab.org/competitions/</li>\\n<li>https://satcompetition.github.io/2020/</li>\\n<li>https://link.springer.com/book/10.1007/978-3-319-24318-4</li>\\n</ul>\\n","dir":"article/.json/2020","base":"2020-07-31-UNSATlog.json","ext":".json","sourceBase":"2020-07-31-UNSATlog.md","sourceExt":".md"}')}}]);