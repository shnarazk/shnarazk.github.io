(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{596:function(n){n.exports=JSON.parse('{"title":"Rust製のSATソルバーで144x144のSudokuを解こう","subtitle":"そろそろ限界","date":"2021-01-17T00:00:00.000Z","tags":["splr","sudoku"],"bodyContent":"着々と巨大なSudokuが解けるようになったのでどんどん行きましょう。\\nlargeとかgiantとかを追加キーワードにして検索してとてもよさそうな[サイト](https://sudokugeant.cabanova.com/noflash.html)を見つけたけど、そのサイトはflashで書いてあって一切見れない。\\nなんという時代（技術）の断絶！\\n\\nただ[チャットページ](http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html)が生きていたのでなんとか144x144とか400x400の問題を見つけることができました。\\n\\nということで[144x144 sudoku](http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html#p68796)を対象にしてみます。\\nparseをちゃっちゃと書いて、実行してみるとルール生成中のプロセスサイズが主記憶の16GBを超え出したのでさらにルール数の削減が必要になりました。まあ、気づいていたけどこれまでやらなかった\\n\\n**全ての場合を網羅するルールを生成してから、初期状態を入れるのは無駄**\\n\\nという当たり前のことをいよいよ[実践](https://github.com/shnarazk/sudoku_sat/commit/a21fc2f90c4b965cc417b0d07af181de68a1bd88)することになりました。\\n\\n144x144の問題も400x400の問題もどちらも人間が解きやすいように初期状態で結構なセルが埋まっているのでそれらに関する無意味なルールの作成を止めれば、本当に次数が1下がるくらいの効果が期待できるのではなかろうか。\\nさらに二重にルールを作成していたところがあったので（上三角だけ計算するような感じで）半分だけ生成するようにすると生成されるCNFはおよそ200MB。\\nこれは最初に生成されたものより1桁は小さくなるくらいの効果がありました。\\nこれで、生成時にも16GB内で収まるようになった（ヘッダーを作るためにファイルに書き出すのは全てのルールを生成した後）し、Splr的にも節数は全然問題ありません。\\n実際、Splrは数秒で解きました。色々とデータが大きいので試したい方は以下をどうぞ。\\n\\n```\\ngit clone https://github.com/shnarazk/sudoku_sat.git\\ncd sudoku_sat\\ncargo run --bin sudoku144 --release < sudoku144.txt\\n```\\n　\\nちなみにこの変更を施しても400x400は全然ダメ。ルールの生成中にプロセスサイズが40GBを超え、1時間経っても生成が終わらない。ちょっと無理ですね。ルール数は $O(n^4)$ だからなあ。\\n\\n## Link\\n\\n- https://github.com/shnarazk/sudoku_sat/","bodyHtml":"<p>着々と巨大なSudokuが解けるようになったのでどんどん行きましょう。\\nlargeとかgiantとかを追加キーワードにして検索してとてもよさそうな<a href=\\"https://sudokugeant.cabanova.com/noflash.html\\">サイト</a>を見つけたけど、そのサイトはflashで書いてあって一切見れない。\\nなんという時代（技術）の断絶！</p>\\n<p>ただ<a href=\\"http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html\\">チャットページ</a>が生きていたのでなんとか144x144とか400x400の問題を見つけることができました。</p>\\n<p>ということで<a href=\\"http://forum.enjoysudoku.com/giant-sudoku-s-16x16-25x25-36x36-100x100-t6578.html#p68796\\">144x144 sudoku</a>を対象にしてみます。\\nparseをちゃっちゃと書いて、実行してみるとルール生成中のプロセスサイズが主記憶の16GBを超え出したのでさらにルール数の削減が必要になりました。まあ、気づいていたけどこれまでやらなかった</p>\\n<p><strong>全ての場合を網羅するルールを生成してから、初期状態を入れるのは無駄</strong></p>\\n<p>という当たり前のことをいよいよ<a href=\\"https://github.com/shnarazk/sudoku_sat/commit/a21fc2f90c4b965cc417b0d07af181de68a1bd88\\">実践</a>することになりました。</p>\\n<p>144x144の問題も400x400の問題もどちらも人間が解きやすいように初期状態で結構なセルが埋まっているのでそれらに関する無意味なルールの作成を止めれば、本当に次数が1下がるくらいの効果が期待できるのではなかろうか。\\nさらに二重にルールを作成していたところがあったので（上三角だけ計算するような感じで）半分だけ生成するようにすると生成されるCNFはおよそ200MB。\\nこれは最初に生成されたものより1桁は小さくなるくらいの効果がありました。\\nこれで、生成時にも16GB内で収まるようになった（ヘッダーを作るためにファイルに書き出すのは全てのルールを生成した後）し、Splr的にも節数は全然問題ありません。\\n実際、Splrは数秒で解きました。色々とデータが大きいので試したい方は以下をどうぞ。</p>\\n<pre><code>git clone https://github.com/shnarazk/sudoku_sat.git\\ncd sudoku_sat\\ncargo run --bin sudoku144 --release &lt; sudoku144.txt\\n</code></pre>\\n<p>ちなみにこの変更を施しても400x400は全然ダメ。ルールの生成中にプロセスサイズが40GBを超え、1時間経っても生成が終わらない。ちょっと無理ですね。ルール数は $O(n^4)$ だからなあ。</p>\\n<h2>Link</h2>\\n<ul>\\n<li>https://github.com/shnarazk/sudoku_sat/</li>\\n</ul>\\n","dir":"article/.json/2021","base":"2021-01-17-sudoku144.json","ext":".json","sourceBase":"2021-01-17-sudoku144.md","sourceExt":".md"}')}}]);