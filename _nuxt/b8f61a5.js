(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{608:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2021, Apr.","subtitle":"Vol.2, No.4.","date":"2021-04-10T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2021/04-10/banner.jpg","bodyContent":"# 充足性判定誤りの3月\\n\\nSplr-0.7シリーズのポイントリリース0.7.1をサクサク公開して、いよいよ並列化という大物に取り掛かるつもりだったのが、ベンチマークの結果の検証で論理バグが検出されて、思いも掛けない終わりのないデバッグに突入してしまいました。\\nなんと0.7.1でエンバグしたのではなく、0.7.0が既におかしい。\\nいやもしかするとそれ以前からあったのかもしれない。\\nSATソルバーを名乗れないものをリリースしてしまっていた！\\n\\nその上このことに気づいてから1週間経ってもバグが取れない！\\n時間がかかってしまう理由が簡単な問題では再現しないバグであること。\\nベンチマークを走らせて検証スクリプトを走らせるとただ1問だけ不適切な充足解を生成している。\\nその問題は0.7.1RCで初めて解けるようになって、それ以前のソルバーではタイムアウトしてしまう問題。\\nなので色々なフィーチャーを切って問題を起こしているモジュールを特定しようとすると、結果が出るまで早くて数時間。\\n比較実験すらままならないという状況。\\nコミットしていないので外からは何もやってないように見えて、ずっと頭を抱えまくっていた\\n、Splrの開発史上ベスト3には入る問題の発生なのでした。\\n\\n必要はコーディングの母ということで、いくらでも大きくなってしまうUNSAT certificationをメモリに溜め込むのではなく、リアルタイムでファイルに吐き出していくような変更も実装されました。\\n\\n# 現状\\n\\nほぼ1週間を費やして、どうもpropagateでの監視リテラルとそのキャッシュとの整合性に起因するようだというところまで突き止めた。\\nこれを書いている時点で、assert突っ込んで動作の等価性を確認しながら原因の証拠固め、同時に検証出来たところを最適化されたものに戻す作業を繰り返しているところ。\\n早いところバグなしバージョンだけでもリリースしたいところだけど地道にこのデバッグを終わらせるしか手段がない。\\n\\nここで備忘録。\\nassignされた変数は実は2種類ある：propagate済みのものとまだのもの。\\nこれを区別することなく`assigned`の返値を使うとカタストロフが発生する。\\n`propagate`内では十分に注意すること。\\nなのでどうして`propagate`内のループで監視リテラルを1つだけ見つければ通常状態、つまり単位節でないのかはこれが理由。\\n納得して持ってきたコードではあるのだけど、あまりにも昔のことでボケてしまっていた。\\n\\n# 4月の予定\\n\\nもう、現在は「早くバグをとります」以外のことは言っても虚しいので、これでおしまい。\\n実はリリース直前まで行ったもの（バグも取れたのでベンチマークを取ったら、まだ充足性判定誤りが取れてなかったのでリリース直前での取り消しは既に2回）は結構いい性能だったのだけど、まあ、充足性判定誤りがあるソルバーはそもそもソルバーではない。\\nああ、悔しい限り。","bodyHtml":"<h1>充足性判定誤りの3月</h1>\\n<p>Splr-0.7シリーズのポイントリリース0.7.1をサクサク公開して、いよいよ並列化という大物に取り掛かるつもりだったのが、ベンチマークの結果の検証で論理バグが検出されて、思いも掛けない終わりのないデバッグに突入してしまいました。\\nなんと0.7.1でエンバグしたのではなく、0.7.0が既におかしい。\\nいやもしかするとそれ以前からあったのかもしれない。\\nSATソルバーを名乗れないものをリリースしてしまっていた！</p>\\n<p>その上このことに気づいてから1週間経ってもバグが取れない！\\n時間がかかってしまう理由が簡単な問題では再現しないバグであること。\\nベンチマークを走らせて検証スクリプトを走らせるとただ1問だけ不適切な充足解を生成している。\\nその問題は0.7.1RCで初めて解けるようになって、それ以前のソルバーではタイムアウトしてしまう問題。\\nなので色々なフィーチャーを切って問題を起こしているモジュールを特定しようとすると、結果が出るまで早くて数時間。\\n比較実験すらままならないという状況。\\nコミットしていないので外からは何もやってないように見えて、ずっと頭を抱えまくっていた\\n、Splrの開発史上ベスト3には入る問題の発生なのでした。</p>\\n<p>必要はコーディングの母ということで、いくらでも大きくなってしまうUNSAT certificationをメモリに溜め込むのではなく、リアルタイムでファイルに吐き出していくような変更も実装されました。</p>\\n<h1>現状</h1>\\n<p>ほぼ1週間を費やして、どうもpropagateでの監視リテラルとそのキャッシュとの整合性に起因するようだというところまで突き止めた。\\nこれを書いている時点で、assert突っ込んで動作の等価性を確認しながら原因の証拠固め、同時に検証出来たところを最適化されたものに戻す作業を繰り返しているところ。\\n早いところバグなしバージョンだけでもリリースしたいところだけど地道にこのデバッグを終わらせるしか手段がない。</p>\\n<p>ここで備忘録。\\nassignされた変数は実は2種類ある：propagate済みのものとまだのもの。\\nこれを区別することなく<code>assigned</code>の返値を使うとカタストロフが発生する。\\n<code>propagate</code>内では十分に注意すること。\\nなのでどうして<code>propagate</code>内のループで監視リテラルを1つだけ見つければ通常状態、つまり単位節でないのかはこれが理由。\\n納得して持ってきたコードではあるのだけど、あまりにも昔のことでボケてしまっていた。</p>\\n<h1>4月の予定</h1>\\n<p>もう、現在は「早くバグをとります」以外のことは言っても虚しいので、これでおしまい。\\n実はリリース直前まで行ったもの（バグも取れたのでベンチマークを取ったら、まだ充足性判定誤りが取れてなかったのでリリース直前での取り消しは既に2回）は結構いい性能だったのだけど、まあ、充足性判定誤りがあるソルバーはそもそもソルバーではない。\\nああ、悔しい限り。</p>\\n","dir":"article/.json/2021","base":"2021-04-10-UNSATlog.json","ext":".json","sourceBase":"2021-04-10-UNSATlog.md","sourceExt":".md"}')}}]);