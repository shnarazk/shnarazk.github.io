(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{498:function(n){n.exports=JSON.parse('{"title":"Reading a CSV file into R","subtitle":"RでのCSVファイルの操作","date":"2018-06-21T00:00:00.000Z","tags":["R"],"bodyContent":"## 関数read.csvを使ってCSVファイルを読む\\n\\n```\\ndf = read.csv(...)\\n```\\n\\n引数\\n\\n- ファイル名 :: 文字列\\n- `header` :: Bool -- コラム名として使われるヘッダー行を持つか\\n- `comment` :: 文字列 -- コメント行の開始文字\\n\\n\x3c!--more--\x3e\\n例\\n\\n以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。\\n\\n```\\n# sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\\nsolver, num, target, time\\n\\"mios-f69b8b8 0.4-2C2L@12-15\\", 1, \\"SR2015subset1/38bits_10.dimacs.cnf\\",  4.12\\n\\"mios-f69b8b8 0.4-2C2L@12-15\\", 2, \\"SR2015subset1/40bits_10.dimacs.cnf\\",  1256.82\\n...\\n```\\n\\nこのファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。\\n\\n```\\ndf = read.csv(\\"result.csv\\", header=T, comment=\\"#\\")\\n```\\n\\n---\\n\\n### 1. 行や列を指定して部分データを取り出す\\n\\n1. まず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。\\n1. 次に対象行や対象列の要素全てに対する計算のやり方を考えます。\\n1. 次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。\\n1. 最後に条件を使った計算式についてループにより処理する方法を見ます。\\n\\n#### 1.1 行添字、列添字による部分データの取り出し\\n\\nデータフレームの一部を取り出すには、**[, 列指定添字]**、**[行指定添字, ]** を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\\n添字はスカラー値でもよいし、ベクターでもよい。\\n\\n例\\n\\n```R\\ndf[, 1]\\ndf[, 1:2]\\ndf[2, ]\\ndf[1:4, ]\\n```\\n\\n#### 1.2 列名による取り出し\\n\\nヘッダーを持つデータフレームの列は **[列名]** でindexingできます。列名は文字列型。従って文字列型の変数も使える。\\n\\n```R\\ndf = ... # データフレーム変数\\n\\ndf[\\"target\\"]\\n\\n# または\\nc = \\"target\\"\\ndf[c]\\n```\\n\\n#### 1.3 条件式による行の取り出し\\n\\n```R\\nd1 = subset(df, p1==1)\\n```\\n\\n### 2. 対象行（列）の要素全てに対する計算\\n\\n多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。\\n\\n例\\n\\n```R\\ndf = ... # データフレーム型変数\\n\\ndf[1] + df[2]    # 1行目と2行目の要素それぞれを加算\\n```","bodyHtml":"<h2>関数read.csvを使ってCSVファイルを読む</h2>\\n<pre><code>df = read.csv(...)\\n</code></pre>\\n<p>引数</p>\\n<ul>\\n<li>ファイル名 :: 文字列</li>\\n<li><code>header</code> :: Bool -- コラム名として使われるヘッダー行を持つか</li>\\n<li><code>comment</code> :: 文字列 -- コメント行の開始文字</li>\\n</ul>\\n<p>&lt;!--more--&gt;\\n例</p>\\n<p>以下は1行目がコメント、2行目がCSV形式のヘッダー、3行目以降がCSV形式のデータになっている。</p>\\n<pre><code># sat-benchmark 0.8.17 on smithi @ 2016-12-15T20:17:17+09:00\\nsolver, num, target, time\\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 1, &quot;SR2015subset1/38bits_10.dimacs.cnf&quot;,  4.12\\n&quot;mios-f69b8b8 0.4-2C2L@12-15&quot;, 2, &quot;SR2015subset1/40bits_10.dimacs.cnf&quot;,  1256.82\\n...\\n</code></pre>\\n<p>このファイルの名前がresult.csvならば、以下によりデータをデータフレーム型変数dfに代入できる。</p>\\n<pre><code>df = read.csv(&quot;result.csv&quot;, header=T, comment=&quot;#&quot;)\\n</code></pre>\\n<hr>\\n<h3>1. 行や列を指定して部分データを取り出す</h3>\\n<ol>\\n<li>まず対象行（列）を取り出す（指定する）方法を見ます。対象は1行ではなく複数行の場合もあります。</li>\\n<li>次に対象行や対象列の要素全てに対する計算のやり方を考えます。</li>\\n<li>次にその結果をある行（列）または新規な行（列）に代入する方法を考えます。</li>\\n<li>最後に条件を使った計算式についてループにより処理する方法を見ます。</li>\\n</ol>\\n<h4>1.1 行添字、列添字による部分データの取り出し</h4>\\n<p>データフレームの一部を取り出すには、<strong>[, 列指定添字]</strong>、<strong>[行指定添字, ]</strong> を用いる。返ってくるものはスカラー値またはデータフレーム型になる。\\n添字はスカラー値でもよいし、ベクターでもよい。</p>\\n<p>例</p>\\n<pre><code class=\\"hljs\\">df[, 1]\\ndf[, 1:2]\\ndf[2, ]\\ndf[1:4, ]</code></pre><h4>1.2 列名による取り出し</h4>\\n<p>ヘッダーを持つデータフレームの列は <strong>[列名]</strong> でindexingできます。列名は文字列型。従って文字列型の変数も使える。</p>\\n<pre><code class=\\"hljs\\">df = <span class=\\"hljs-keyword\\">...</span> <span class=\\"hljs-comment\\"># データフレーム変数</span>\\n\\ndf[<span class=\\"hljs-string\\">\\"target\\"</span>]\\n\\n<span class=\\"hljs-comment\\"># または</span>\\nc = <span class=\\"hljs-string\\">\\"target\\"</span>\\ndf[c]</code></pre><h4>1.3 条件式による行の取り出し</h4>\\n<pre><code class=\\"hljs\\">d1 = subset(df, p1==1)</code></pre><h3>2. 対象行（列）の要素全てに対する計算</h3>\\n<p>多くの演算はスカラーだけでなくベクターを引数に取ることができるため、通常の計算式がそのまま使えることが多い。</p>\\n<p>例</p>\\n<pre><code class=\\"hljs\\">df = <span class=\\"hljs-keyword\\">...</span> <span class=\\"hljs-comment\\"># データフレーム型変数</span>\\n\\ndf[<span class=\\"hljs-number\\">1</span>] + df[<span class=\\"hljs-number\\">2</span>]    <span class=\\"hljs-comment\\"># 1行目と2行目の要素それぞれを加算</span></code></pre>","dir":"article/.json/2018","base":"2018-06-21-Reading-CSV-in-R.json","ext":".json","sourceBase":"2018-06-21-Reading-CSV-in-R.md","sourceExt":".md"}')}}]);