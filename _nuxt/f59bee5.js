(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{529:function(n){n.exports=JSON.parse('{"title":"Install Rust programs with resources on NixOS","subtitle":"リソース付きRustプログラムのNixOSへのインストール","date":"2019-03-22T00:00:00.000Z","tags":["NixOS","Rust"],"bodyContent":"## 目標\\n\\n同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。\\n\\n## 方法\\n\\n1. build.rsで頑張る →試してません\\n1. 最終保存場所をソースに書き込む\\n\\nここでは2番目の手法についてメモしておきます。\\n\\n\\n## 前提条件\\n\\nrustPlatform.buildRustProgramを使っている\\n\\n## 実現手段\\n\\n1. patchPhaseでsedで`$out`をソースに埋め込む\\n2. PostInstallで同梱ファイルを`$out`にコピーする\\n\\n# 実例\\n\\n[sat-bench](https://github.com/shnarazk/SAT-bench)はSATソルバーのベンチマークをするためのユーティリティなので、\\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\\nそのためにコンパイル時にpwdを`env!(\\"PWD\\")`で埋め込んでいるが、一方コマンドラインからディレクトリを指定す\\nるためのコマンドオプションも用意した。\\n\\nしかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\\nディレクトリを指定しているのは以下の`Config::lib_dir`のデフォルト値。\\n\\n```rust\\n#[structopt(name = \\"sat-bench\\", about = \\"Run simple SAT benchmarks\\")]\\nstruct Config {\\n    ...\\n    /// directory holding instances\\n    #[structopt(long = \\"lib\\", default_value = \\"\\")]\\n    lib_dir: String,\\n```\\n\\n（別件だが、ここで`default_value = env!(\\"PWD\\")`とか書きたいのだが、\\nそうするとコンパイルエラーになってしまう。残念。）\\n\\nなのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは`$out/lib`とした。\\n\\n```nix\\n  satbench = super.rustPlatform.buildRustPackage rec {\\n    ...\\n    patchPhase = \'\'\\n      sed -i \\"s|long = \\\\\\"lib\\\\\\", default_value = \\\\\\"\\\\\\"|long = \\\\\\"lib\\\\\\", default_value = \\\\\\"$out/lib\\\\\\"|\\" src/bin/sat-bench.rs\\n    \'\';\\n```\\n\\nコンパイルやインストールの挙動はいじらないように`postInstall`フックを使って、\\nインストール後の処理としてファイルをターゲットディレクトリ`$out/lib`にコピー。\\n\\n```nix\\n    postInstall = \'\'\\n      mkdir -p $out/lib\\n      cp -r 3-SAT SAT09 SR2015 $out/lib/\\n    \'\';\\n```\\n\\nこのようなnix式を評価してパッケージをインストールすると、\\n以下のように適切なデフォルト値が埋め込まれているのがわかる。\\n\\n```\\n$ sat-bench --help\\n...\\n\\nOPTIONS:\\n    -K, --aux-key <aux_key>   [default: ]\\n    -H, --header <header>     [default: ]\\n        --lib <lib_dir>       [default: /nix/store/63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4/lib]\\n    -M, --message <message>   [default: ]\\n...  \\n```\\n\\nめでたし。","bodyHtml":"<h2>目標</h2>\\n<p>同梱ファイルを参照するRustプログラムをNixOSにインストールしたい。</p>\\n<h2>方法</h2>\\n<ol>\\n<li>build.rsで頑張る →試してません</li>\\n<li>最終保存場所をソースに書き込む</li>\\n</ol>\\n<p>ここでは2番目の手法についてメモしておきます。</p>\\n<h2>前提条件</h2>\\n<p>rustPlatform.buildRustProgramを使っている</p>\\n<h2>実現手段</h2>\\n<ol>\\n<li>patchPhaseでsedで<code>$out</code>をソースに埋め込む</li>\\n<li>PostInstallで同梱ファイルを<code>$out</code>にコピーする</li>\\n</ol>\\n<h1>実例</h1>\\n<p><a href=\\"https://github.com/shnarazk/SAT-bench\\">sat-bench</a>はSATソルバーのベンチマークをするためのユーティリティなので、\\n複数のCNFファイルを同梱している。実行時にはこのファイルを参照することが必要。\\nしかし、そもそもcargoは実行ファイルしかインストールしないので、コンパイルに使ったディレクトリは将来\\nもあるものと仮定して、CNFファイルはそのディレクトリを基準に指定するようにしてある。\\nそのためにコンパイル時にpwdを<code>env!(&quot;PWD&quot;)</code>で埋め込んでいるが、一方コマンドラインからディレクトリを指定す\\nるためのコマンドオプションも用意した。</p>\\n<p>しかし、これだとNixにインストールできないので、上の手法でパッチを当てることにする。\\nディレクトリを指定しているのは以下の<code>Config::lib_dir</code>のデフォルト値。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">#[structopt(name = <span class=\\"hljs-meta-string\\">\\"sat-bench\\"</span>, about = <span class=\\"hljs-meta-string\\">\\"Run simple SAT benchmarks\\"</span>)]</span>\\n<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">struct</span> <span class=\\"hljs-title\\">Config</span></span> {\\n    ...\\n    <span class=\\"hljs-comment\\">/// directory holding instances</span>\\n    <span class=\\"hljs-meta\\">#[structopt(long = <span class=\\"hljs-meta-string\\">\\"lib\\"</span>, default_value = <span class=\\"hljs-meta-string\\">\\"\\"</span>)]</span>\\n    lib_dir: <span class=\\"hljs-built_in\\">String</span>,</code></pre><p>（別件だが、ここで<code>default_value = env!(&quot;PWD&quot;)</code>とか書きたいのだが、\\nそうするとコンパイルエラーになってしまう。残念。）</p>\\n<p>なのでこの行をsedで修正する。ここで、CNFファイルが保存されるのは<code>$out/lib</code>とした。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-attr\\">satbench</span> = super.rustPlatform.buildRustPackage <span class=\\"hljs-keyword\\">rec</span> {\\n    ...\\n    <span class=\\"hljs-attr\\">patchPhase</span> = <span class=\\"hljs-string\\">\'\'\\n      sed -i \\"s|long = \\\\\\"lib\\\\\\", default_value = \\\\\\"\\\\\\"|long = \\\\\\"lib\\\\\\", default_value = \\\\\\"$out/lib\\\\\\"|\\" src/bin/sat-bench.rs\\n    \'\'</span>;</code></pre><p>コンパイルやインストールの挙動はいじらないように<code>postInstall</code>フックを使って、\\nインストール後の処理としてファイルをターゲットディレクトリ<code>$out/lib</code>にコピー。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-attr\\">postInstall</span> = <span class=\\"hljs-string\\">\'\'\\n      mkdir -p $out/lib\\n      cp -r 3-SAT SAT09 SR2015 $out/lib/\\n    \'\'</span>;</code></pre><p>このようなnix式を評価してパッケージをインストールすると、\\n以下のように適切なデフォルト値が埋め込まれているのがわかる。</p>\\n<pre><code>$ sat-bench --help\\n...\\n\\nOPTIONS:\\n    -K, --aux-key &lt;aux_key&gt;   [default: ]\\n    -H, --header &lt;header&gt;     [default: ]\\n        --lib &lt;lib_dir&gt;       [default: /nix/store/63765vm6s1gjp3sqmip7i1mp9xwm3nj5-satbench-0.4/lib]\\n    -M, --message &lt;message&gt;   [default: ]\\n...  \\n</code></pre>\\n<p>めでたし。</p>\\n","dir":"article/.json/2019","base":"2019-03-22-rust-program-with-resources-on-nixos.json","ext":".json","sourceBase":"2019-03-22-rust-program-with-resources-on-nixos.md","sourceExt":".md"}')}}]);