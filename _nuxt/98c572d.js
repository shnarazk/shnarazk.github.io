(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{566:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2020, May.","subtitle":"Vol.1, No.5.","date":"2020-05-29T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2020/05-29/banner.jpg","bodyContent":"## Splr-0.4.1リリースの5月\\n今月たてたissue及びブランチは以下の通り：\\n\\n* No restart for LR and Stabilization\\n* 20200514-incremental\\n* 20200524-handle\\n* 20200502-new-select\\n* 20200503-litpointer-on-0.3.1\\n* 20200509-new-rephrase\\n* 20200510-restart-for-lr\\n* 20200514-incremental\\n* 20200516-no-restart\\n* 20200518-tuning\\n* 20200524-dead\\n* 20200524-handle\\n\\nSplr-0.4.0以降の分をまとめると\\n\\n* incremental SATソルバの実装\\n* stabilizationの解釈と変数選択機構の実装\\n* リスタートの必要性\\n\\nといったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。\\n\\n## Incremental SATソルバ\\n\\n初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。\\n\\n結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを `SatSolverIF` に追加して完成です。\\n高レベルなIFとしてイテレータも追加したので、\\n\\n```rust\\nfor ans in Certificate::try_from(...).unwrap().iter() { ... }\\n```\\n\\nと書くだけで全解探索処理ができるのはなかなかいいな。\\n\\nまたWASM環境に対応しました。\\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\\nのつもりだったけど、実はコンパイルできるのだけれども `std::time` が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。\\n\\n![](https://user-images.githubusercontent.com/997855/83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png)\\n\\nこの件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\\nちなみにWASMだとSplrのコードは140KBくらい。\\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。\\n\\nこの修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには\\n\\n```\\ncargo install —force —path . —features cli\\n```\\n\\nとすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\\ncontinuationかyieldあたりでsearchの中断できないかな。\\n\\n# Stabilizationの解釈と変数選択機能の実装\\n\\nSplr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。\\n\\n## リスタートの必要性\\n\\n一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https://shnarazk.github.io/2020/2020-05-20-LR-needs-something/\\n\\n* StabilizationはSAT問題に対してうまくいくという話でこれはわかる。\\n* 逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。\\n* どちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。\\n* 一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？\\n* VSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https://shnarazk.github.io/2020/2020-05-19-two-heuristics/\\n\\nこのあたりの整理は必要ではないかと。\\n\\n出てきた（極端な）アイデアの一つがexploit&exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\\nただ極端な設定の割にはそれほど悪くないのよねえ。\\n\\nここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。\\n\\n## おわりに\\n\\n現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。\\n\\n![](/img/2020/05-29/Splr-0.4.1-benchmark.png)\\n\\n間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\\nうーん、何ができるのか戦略的に考えなければ。\\n勝負の6月だ。","bodyHtml":"<h2>Splr-0.4.1リリースの5月</h2>\\n<p>今月たてたissue及びブランチは以下の通り：</p>\\n<ul>\\n<li>No restart for LR and Stabilization</li>\\n<li>20200514-incremental</li>\\n<li>20200524-handle</li>\\n<li>20200502-new-select</li>\\n<li>20200503-litpointer-on-0.3.1</li>\\n<li>20200509-new-rephrase</li>\\n<li>20200510-restart-for-lr</li>\\n<li>20200514-incremental</li>\\n<li>20200516-no-restart</li>\\n<li>20200518-tuning</li>\\n<li>20200524-dead</li>\\n<li>20200524-handle</li>\\n</ul>\\n<p>Splr-0.4.0以降の分をまとめると</p>\\n<ul>\\n<li>incremental SATソルバの実装</li>\\n<li>stabilizationの解釈と変数選択機構の実装</li>\\n<li>リスタートの必要性</li>\\n</ul>\\n<p>といったところ。順番に振り返っていきましょう（ここは大友良英氏の口調でお願いします）。</p>\\n<h2>Incremental SATソルバ</h2>\\n<p>初めて他の人から反応をもらったので、考えていなかったインクリメンタルな求解機構、およびWASM環境下でコンパイル可能、実行可能への変更の実現をしました。\\nインクリメンタルSATソルバを実現するのに大きな問題となったのは、実はeliminatorが非可逆的な変換をしていることです。\\nまあ当たり前なんだけど（正しい）ソルバの処理過程は論理式の等価変換なので、ソルバが停止した状態でassignとcdbが保持している情報は実行前の与式と論理的に等価なはずです。\\nだから、求められた解の否定を加えて求解し直すだけでインクリメンタルソルバになるはず。\\nところがeliminatorは非可逆的な変換（具体的には変数削除処理においてモデル拡張時に必要としない節が完全に削除されてしまう）をやっているので、このナイーブなアイデアはプリプロセッサを含めて考えるとうまくいきません。\\n論文や他の実装を見ずに対応策（削除されていた節を新たなリストに保存し、次の求解開始前にcdbに戻すという処理）を思いついたのでやってみました。\\nかなり網羅的なテストでうまく行っているので多分これでいいのでしょう。</p>\\n<p>結局、次の求解開始前に呼び出すAPIとしてresetを, 変数、節、割り当てをそれぞれ追加するAPIを <code>SatSolverIF</code> に追加して完成です。\\n高レベルなIFとしてイテレータも追加したので、</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">for</span> ans <span class=\\"hljs-keyword\\">in</span> Certificate::try_from(...).unwrap().iter() { ... }</code></pre><p>と書くだけで全解探索処理ができるのはなかなかいいな。</p>\\n<p>またWASM環境に対応しました。\\n要はstructoptとタイマ機能を条件付きコンパイルの対象にすればいいのだろうと思い、structoptとlibcをoption扱いに変更して作業終了。\\nのつもりだったけど、実はコンパイルできるのだけれども <code>std::time</code> が実行中に対応していないエラーを吐き出しているのに気づくのに一週間掛かってしまいました。</p>\\n<p><img src=\\"https://user-images.githubusercontent.com/997855/83080335-e08d3a80-a0b8-11ea-8767-0ae177f187b8.png\\" alt=\\"\\"></p>\\n<p>この件に対応して（結局自分で確認する羽目になってしまった）0.4.1をリリースしました。\\nちなみにWASMだとSplrのコードは140KBくらい。\\nDarwin上のexecutableと比べて意外に小さいというべきか、そっちが異常に大きいというべきか（C++で書かれたGlucoseやCaDiCaLと比べてRust製Splrは一桁くらい大きいからなあ）。</p>\\n<p>この修正によってstructoptなどがオプション扱いに格下げされてしまったので、Splrをインストールするには</p>\\n<pre><code>cargo install —force —path . —features cli\\n</code></pre>\\n<p>とすることが必要になったけど、まあこれくらいなら許容範囲でしょう（Splrは一義的にはライブラリではなくexecutableパッケージなのだ）。\\nここまでできたら、ステップ実行でアニメーションを実現する機能もいつか作りたいものだなあ。\\ncontinuationかyieldあたりでsearchの中断できないかな。</p>\\n<h1>Stabilizationの解釈と変数選択機能の実装</h1>\\n<p>Splr-0.4.0はそんなに悪くない性能なのだけど色々と新しく追加した機能に見合った性能向上がみられたかというとそれほど肯定的なものではありません。\\n世間的にいいということになっているアイデアがそれほどうまく動いていないなあと思って見直してみると、0.4.0はStabilizationの導入が大きな売りのはずだけど実はリスタートの抑制をしてないじゃん！\\nと言うことでもう一度設定を変えながらベンチマークをやり直し。\\nこれが些細な修正ごとにベンチマークを走らせることが必要でえらい時間がかかってしまったけど、結局0.4.1で生き残ったのは、Stabilizingモードでのベスト割当てのリフェーズだけで、やはりリスタートの抑制はしない方がいいということになりました。\\n0.4.0と0.4.1の間の変更点は（アカデミック的には）ほとんどなくて、search関数が性能悪化をもたらさない範囲で合理的な流れに変更されたくらいです。</p>\\n<h2>リスタートの必要性</h2>\\n<p>一体何度目なのかわからないけど、リスタートの必要性も再検討しました ➡️https://shnarazk.github.io/2020/2020-05-20-LR-needs-something/</p>\\n<ul>\\n<li>StabilizationはSAT問題に対してうまくいくという話でこれはわかる。</li>\\n<li>逆にUNSAT問題にはリスタートが必要と昔から言われている（これもわかる）。</li>\\n<li>どちらの問題かわからないから（そしてlong tailに捕まらないように)両方を切り替えながらやろう。</li>\\n<li>一方LRは矛盾発生率を最適化しようとする。矛盾を頻発させればUNSAT問題は効率よく解けないだろうか？</li>\\n<li>VSIDSは何をやっているのかわからない。もしかしたら矛盾回避率の最適化かもしれない。矛盾を回避していたらSAT問題が効率よく解けないだろうか？➡️https://shnarazk.github.io/2020/2020-05-19-two-heuristics/</li>\\n</ul>\\n<p>このあたりの整理は必要ではないかと。</p>\\n<p>出てきた（極端な）アイデアの一つがexploit&amp;exploreのバランスが取れればリスタートはいらないというもので、いくつかの例ではうまくいくのだけどSAT race2019レベルのベンチマーク設定だとよくないので放棄せざるを得ませんでした。\\nただ極端な設定の割にはそれほど悪くないのよねえ。</p>\\n<p>ここまで極端なことを考えないものとして、VSIDSとLRを(stabilizationモードに合わせて）定期的に切り替えるという混合戦略もやってみたけどダメでした。\\n今年のcompetition前にもう一度検討する時間は取れないだろうなあ。お蔵入りかな。なにかあればnoteを更新することにします。</p>\\n<h2>おわりに</h2>\\n<p>現在Splrは去年competitionにエントリーしてもそんなに恥ずかしくないところまで来ている。</p>\\n<p><img src=\\"/img/2020/05-29/Splr-0.4.1-benchmark.png\\" alt=\\"\\"></p>\\n<p>間違った解も出てないし、本当にエントリーを考えようと思っているのだけど、改良するにはせいぜい後一ヶ月。\\nうーん、何ができるのか戦略的に考えなければ。\\n勝負の6月だ。</p>\\n","dir":"article/.json/2020","base":"2020-05-29-UNSATlog.json","ext":".json","sourceBase":"2020-05-29-UNSATlog.md","sourceExt":".md"}')}}]);