(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{539:function(n){n.exports=JSON.parse('{"title":"New technologies for SAT solvers","subtitle":"from SR2019","date":"2020-01-21T00:00:00.000Z","tags":["SAT"],"bodyContent":"遅ればせながらSR2019のベンチマークを見てみた。\\n\\n## CaDiCaL\\n\\nデフォルト設定のみのエントリーで3位に位置するソルバ。作者を見たらBiere先生だった。\\n\\n- chronological backtrack\\n- dual restart mode\\n- improving phase Saving\\n\\nといったところが主に使っている新技術。\\n\\n## Chronological Backtrack\\n\\nまだチェックしてないがSC2018以降のトレンドみたい。こんな発想はなかった。\\nリスタートの抑制よりもさらに網羅的に探索するということか。原著は以下：\\n\\n- A. Nadel and V. Ryvchin. Chronological backtracking. In *Theory and Applications of Satisfiability Testing - SAT 2018. Proceedings*, 2018.\\n\\n大事なところだけ読んでみた。えー、それってコスト削減になるのか？\\nリスタートを掛けずに先まで行けるのなら、色々と特徴量に対する影響は少しはあると思うが。\\n\\nちょっと変更したものだったら簡単に実装できたが、散々crashに悩まされる。\\n数日かかりそう。で、実装してみたけどちゃんと論文読まねば。単なるレベル0へのバックトラックの\\nショートカットでしかないので差が出ない（ひどい。。。）。\\n\\n## Dual Restart Mode\\n\\nリスタートしないモードがUNSAT問題に効くので、リスタート戦略を切り替える技術。\\nということはdeep searchが正当化されるかもしれない。\\nインターリーブはうまくいかない印象なんだけど、実はその実験はやってなかったかも。\\n\\n## Improving Phase Saving\\n\\n一番よかったphaseセットを覚えておくという、VoPに似た感じの技術。\\nただしこれまでのphaseと併用するとのこと。\\nまたprefixという語が頻出している。なんだそりゃ？\\n\\nこれも重要らしいので、もう少しVoPを検討してみるか。\\n手っ取り早い導入としては、全ての割当てではなく、\\n割当量更新時のみFoCだかVoCのEMAを更新すると近い感じになるかもしれない。\\nリスタートの時にその値を利用するという方針なら試していないはず。\\n\\n## Reason-Side Rate(Rewarding)\\n\\nこれはCaDiCaLとは関係ないけど、Conflict History Based Branching (CHB)の論文で出てきた考え。\\n依存グラフの学習節のその先にも報酬を与えようとするもの。\\n実際実装してみるとよくなることもある。なんでだろう？　簡単に書いてあるのでどうしてなのか考えないとい\\nけない。逆向きの伝播を促すのか？だったら逆向きにでパンパした場合にfirstUIPになる可能性が高い\\n束の上限節に当たるリテラルだけ報酬を与えてもよさそうだが、やってみたらむしろ何もしない時よりも悪くなった。","bodyHtml":"<p>遅ればせながらSR2019のベンチマークを見てみた。</p>\\n<h2>CaDiCaL</h2>\\n<p>デフォルト設定のみのエントリーで3位に位置するソルバ。作者を見たらBiere先生だった。</p>\\n<ul>\\n<li>chronological backtrack</li>\\n<li>dual restart mode</li>\\n<li>improving phase Saving</li>\\n</ul>\\n<p>といったところが主に使っている新技術。</p>\\n<h2>Chronological Backtrack</h2>\\n<p>まだチェックしてないがSC2018以降のトレンドみたい。こんな発想はなかった。\\nリスタートの抑制よりもさらに網羅的に探索するということか。原著は以下：</p>\\n<ul>\\n<li>A. Nadel and V. Ryvchin. Chronological backtracking. In <em>Theory and Applications of Satisfiability Testing - SAT 2018. Proceedings</em>, 2018.</li>\\n</ul>\\n<p>大事なところだけ読んでみた。えー、それってコスト削減になるのか？\\nリスタートを掛けずに先まで行けるのなら、色々と特徴量に対する影響は少しはあると思うが。</p>\\n<p>ちょっと変更したものだったら簡単に実装できたが、散々crashに悩まされる。\\n数日かかりそう。で、実装してみたけどちゃんと論文読まねば。単なるレベル0へのバックトラックの\\nショートカットでしかないので差が出ない（ひどい。。。）。</p>\\n<h2>Dual Restart Mode</h2>\\n<p>リスタートしないモードがUNSAT問題に効くので、リスタート戦略を切り替える技術。\\nということはdeep searchが正当化されるかもしれない。\\nインターリーブはうまくいかない印象なんだけど、実はその実験はやってなかったかも。</p>\\n<h2>Improving Phase Saving</h2>\\n<p>一番よかったphaseセットを覚えておくという、VoPに似た感じの技術。\\nただしこれまでのphaseと併用するとのこと。\\nまたprefixという語が頻出している。なんだそりゃ？</p>\\n<p>これも重要らしいので、もう少しVoPを検討してみるか。\\n手っ取り早い導入としては、全ての割当てではなく、\\n割当量更新時のみFoCだかVoCのEMAを更新すると近い感じになるかもしれない。\\nリスタートの時にその値を利用するという方針なら試していないはず。</p>\\n<h2>Reason-Side Rate(Rewarding)</h2>\\n<p>これはCaDiCaLとは関係ないけど、Conflict History Based Branching (CHB)の論文で出てきた考え。\\n依存グラフの学習節のその先にも報酬を与えようとするもの。\\n実際実装してみるとよくなることもある。なんでだろう？　簡単に書いてあるのでどうしてなのか考えないとい\\nけない。逆向きの伝播を促すのか？だったら逆向きにでパンパした場合にfirstUIPになる可能性が高い\\n束の上限節に当たるリテラルだけ報酬を与えてもよさそうだが、やってみたらむしろ何もしない時よりも悪くなった。</p>\\n","dir":"article/.json/2020","base":"2020-01-21-new-solver-technologies.json","ext":".json","sourceBase":"2020-01-21-new-solver-technologies.md","sourceExt":".md"}')}}]);