(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{556:function(n){n.exports=JSON.parse('{"title":"Passing args to StructOpt","subtitle":"which start with \'--\'","date":"2020-03-19T00:00:00.000Z","tags":["Rust"],"bodyContent":"[SAT-bench](https://github.com/shnarazk/SAT-bench)はRust製SATソルバ\\n[Splr](https://github.com/shnarazk/splr)のベンチマーク支援Rust製ツールです。\\n設定を変えてベンチマークを実行するためにSplrへのオプションを受け渡せるように以下のような`Config`になっ\\nています。\\n\\n```rust\\n#[derive(Clone, Debug, StructOpt)]\\n#[structopt(name = \\"sat-bench\\", about = \\"A SAT Competition benchmark runner\\")]\\npub struct Config {\\n    /// the problem\\n    #[structopt(long = \\"benchmark\\", short = \\"B\\", default_value = \\"SR19Core\\")]\\n    pub benchmark_name: String,\\n    /// solver names\\n    #[structopt(long = \\"solver\\", short = \\"s\\", default_value = \\"\\")]\\n    pub solver: String,\\n    /// arguments passed to solvers\\n    #[structopt(long = \\"options\\", default_value = \\"\\")]\\n    pub solver_options: String,\\n    ...\\n```\\n\\n実行するときには\\n\\n```\\n$ benchm --benchmark \\"SR19\\" --solver splr\\n```\\n\\nのように実行するのですが、いざオプションを設定しようとすると\\n\\n```\\n$ benchm --benchmark \\"SR19\\" --solver splr --options \\"--without-elim\\" -j 3\\nerror: Found argument \'--without\' which wasn\'t expected, or isn\'t valid in this context\\n```\\n\\nとなってしまう。ダブルクォートで括っているから明らかに文字列なんだけどそれが意味をなしていない。\\nこれはバグだと思うのだけど1年以上経っても直る気配はないので対処療法があるはず。探してみたら\\n\\n\\n```\\n$ benchm --benchmark \\"SR19\\" --solver splr --options \\\\\\\\--without-elim -j 3\\n```\\n\\nということだった。shell と structopt の二つのレベルのエスケープが必要。\\n対象文字列が空白文字を含むなら\\n\\n```\\n benchm --benchmark \\"SR19\\" --solver splr --options \\\\\\\\--rt\\\\\\\\ 0.8 -j 3\\n```\\n\\nとすることで `--rt 0.8` を渡せるようになるみたいだ。\\nつまり、 `nix-env -qa` で正規表現を使う場合と同じことでした。","bodyHtml":"<p><a href=\\"https://github.com/shnarazk/SAT-bench\\">SAT-bench</a>はRust製SATソルバ\\n<a href=\\"https://github.com/shnarazk/splr\\">Splr</a>のベンチマーク支援Rust製ツールです。\\n設定を変えてベンチマークを実行するためにSplrへのオプションを受け渡せるように以下のような<code>Config</code>になっ\\nています。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-meta\\">#[derive(Clone, Debug, StructOpt)]</span>\\n<span class=\\"hljs-meta\\">#[structopt(name = <span class=\\"hljs-meta-string\\">&quot;sat-bench&quot;</span>, about = <span class=\\"hljs-meta-string\\">&quot;A SAT Competition benchmark runner&quot;</span>)]</span>\\n<span class=\\"hljs-keyword\\">pub</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">struct</span> <span class=\\"hljs-title\\">Config</span></span> {\\n    <span class=\\"hljs-comment\\">/// the problem</span>\\n    <span class=\\"hljs-meta\\">#[structopt(long = <span class=\\"hljs-meta-string\\">&quot;benchmark&quot;</span>, short = <span class=\\"hljs-meta-string\\">&quot;B&quot;</span>, default_value = <span class=\\"hljs-meta-string\\">&quot;SR19Core&quot;</span>)]</span>\\n    <span class=\\"hljs-keyword\\">pub</span> benchmark_name: <span class=\\"hljs-built_in\\">String</span>,\\n    <span class=\\"hljs-comment\\">/// solver names</span>\\n    <span class=\\"hljs-meta\\">#[structopt(long = <span class=\\"hljs-meta-string\\">&quot;solver&quot;</span>, short = <span class=\\"hljs-meta-string\\">&quot;s&quot;</span>, default_value = <span class=\\"hljs-meta-string\\">&quot;&quot;</span>)]</span>\\n    <span class=\\"hljs-keyword\\">pub</span> solver: <span class=\\"hljs-built_in\\">String</span>,\\n    <span class=\\"hljs-comment\\">/// arguments passed to solvers</span>\\n    <span class=\\"hljs-meta\\">#[structopt(long = <span class=\\"hljs-meta-string\\">&quot;options&quot;</span>, default_value = <span class=\\"hljs-meta-string\\">&quot;&quot;</span>)]</span>\\n    <span class=\\"hljs-keyword\\">pub</span> solver_options: <span class=\\"hljs-built_in\\">String</span>,\\n    ...</code></pre><p>実行するときには</p>\\n<pre><code>$ benchm --benchmark &quot;SR19&quot; --solver splr\\n</code></pre>\\n<p>のように実行するのですが、いざオプションを設定しようとすると</p>\\n<pre><code>$ benchm --benchmark &quot;SR19&quot; --solver splr --options &quot;--without-elim&quot; -j 3\\nerror: Found argument \'--without\' which wasn\'t expected, or isn\'t valid in this context\\n</code></pre>\\n<p>となってしまう。ダブルクォートで括っているから明らかに文字列なんだけどそれが意味をなしていない。\\nこれはバグだと思うのだけど1年以上経っても直る気配はないので対処療法があるはず。探してみたら</p>\\n<pre><code>$ benchm --benchmark &quot;SR19&quot; --solver splr --options \\\\\\\\--without-elim -j 3\\n</code></pre>\\n<p>ということだった。shell と structopt の二つのレベルのエスケープが必要。\\n対象文字列が空白文字を含むなら</p>\\n<pre><code> benchm --benchmark &quot;SR19&quot; --solver splr --options \\\\\\\\--rt\\\\\\\\ 0.8 -j 3\\n</code></pre>\\n<p>とすることで <code>--rt 0.8</code> を渡せるようになるみたいだ。\\nつまり、 <code>nix-env -qa</code> で正規表現を使う場合と同じことでした。</p>\\n","dir":"article/.json/2020","base":"2020-03-19-structopt.json","ext":".json","sourceBase":"2020-03-19-structopt.md","sourceExt":".md"}')}}]);