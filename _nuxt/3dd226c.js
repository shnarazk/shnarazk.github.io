(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{541:function(e){e.exports=JSON.parse('{"title":"A trait definition with lifetimes","subtitle":"生存期間もややこしい","date":"2019-08-08T00:00:00.000Z","tags":["Rust"],"bodyContent":"あるプログラムでアルゴリズムのバリエーションを併用するため、以下のトレイトが必要になったとしよう。\\n\\n```rust\\npub trait RestartHeuristics {\\n    type Item;\\n    fn add(&mut self, item: Self::Item);\\n    ...\\n```\\n\\nここで、実装ごとにメソッド`add`に渡す引数を変えたいので、関連型`Item`を引数の型としてもたせた。\\n例えば、以下のような実装を実現したい。\\n\\n- 単なる数値(`f64`)を受け取って計算する`add`\\n- 何か構造体へのmut pointer(`&mut Var`)をもらってそれに対して変更を加えながら計算する`add`\\n\\nそれぞれ以下のような定義になった。\\n\\n```rust\\nimpl RestartHeuristics for RestartByLBD {\\n    type Item = usize;\\n    fn add(&mut self, item: Self::Item) {...\\n```\\n\\nそして問題となる二つ目の定義：\\n\\n```rust\\nimpl RestartHeuristics for VarSet {\\n    type Item = &mut Var;\\n    fn add(&mut self, v: Self::Item) {...\\n```\\n\\nこれで `r.add(4);` とか `r.add(&mut v);` とか自由に書けてスマート。\\nつまり、意味もなく`r.add(&mut 4)`なんてことを強制されずに済んだ。\\nところが、これはコンパイルエラーになる。\\n\\n```\\nerror[E0106]: missing lifetime specifier\\n   --\x3e src/var.rs:114:17\\n    |\\n114 |     type Item = &mut Var;\\n    |                 ^ help: consider using the named lifetime: `&\'a`\\n```\\n\\nポインタを渡しているので生存時間が必要らしい。\\nうーむ、メソッド`add`の中ではCopy可能なフィールドを参照、変更するだけなので生存時間が問題になることはないと思うのだけど。。。\\nともあれ、上記のヘルプに従ってこの引数に生存時間を追加した。\\n\\n\\n```rust\\nimpl RestartHeuristics for VarSet {\\n    type Memory = Ema2;\\n    type Item = &\'a mut Var;\\n    fn add(&mut self, v: Self::Item) {\\n```\\n\\nすると以下のエラー。\\n\\n```\\nerror[E0261]: use of undeclared lifetime name `\'a`\\n   --\x3e src/var.rs:114:18\\n    |\\n114 |     type Item = &\'a mut Var;\\n    |                  ^^ undeclared lifetime\\n```\\n\\nなので、生存期間`\'a`を宣言できる唯一の場所`impl`に追加する（後述）。\\n\\n```\\nimpl<\'a> RestartHeuristics for VarSet {\\n    type Memory = Ema2;\\n    type Item = &\'a mut Var;\\n    fn add(&mut self, v: Self::Item) {\\n```\\n\\nすると今度は以下のエラー。\\n\\n```\\nerror[E0207]: the lifetime parameter `\'a` is not constrained by the impl trait, self type, or predicates\\n   --\x3e src/var.rs:112:6\\n    |\\n112 | impl<\'a> RestartHeuristics for VarSet {\\n    |      ^^ unconstrained lifetime parameter\\n```\\n\\n定義したものはトレイト（指示詞）かself型か述語(predicates)中で使え、だそうなので、\\nトレイトに追加してみる。\\n\\n```rust\\npub trait RestartHeuristics<\'a> {\\n    type Item;\\n    fn add(&mut self, item: Self::Item);\\n```\\n\\nここで、この生存期間パラメータの追加を各実装に反映させないと以下のエラーになる。\\n\\n```\\nerror[E0726]: implicit elided lifetime not allowed here\\n   --\x3e src/restart.rs:100:6\\n    |\\n100 | impl RestartHeuristics for RestartByLBD {\\n    |      ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<\'_>`\\n\\nerror[E0726]: implicit elided lifetime not allowed here\\n   --\x3e src/var.rs:112:10\\n    |\\n112 | impl<\'a> RestartHeuristics for VarSet {\\n    |          ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `<\'_>`\\n```\\n\\n以下のように各実装に追加して、これで解決。\\n\\n- ポインタが出てくるのでトレイトには生存期間パラメータが必要\\n- `usize`に対してはワイルドカードでOK\\n- 構造体へのポインタに対しては、それをトレイトのパラメータに反映\\n\\n```rust\\nimpl RestartHeuristics<\'_> for RestartByLBD {\\n    type Item = usize;\\n    fn add(&mut self, item: Self::Item) {...\\n```\\t\\n\\t\\n```rust\\nimpl<\'a> RestartHeuristics<\'a> for VarSet {\\n    type Item = &\'a mut Var;\\n    fn add(&mut self, item: Self::Item) {...\\n```\\n\\nということで\\n\\nimplやtraitキーワードで導入した（型や生存期間）変数は、\\n\\n- トレイト名（指示詞）\\n- Self -- `fn (&\'a mut self,...)` ということか \\n- 述語(predicates) -- whereの後の型（生存期間）制約\\n\\nで使わないといけない。\\n\\n*参考*\\n\\n- https://stackoverflow.com/questions/52318662/what-is-a-predicate-in-rust","bodyHtml":"<p>あるプログラムでアルゴリズムのバリエーションを併用するため、以下のトレイトが必要になったとしよう。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">pub</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">trait</span> <span class=\\"hljs-title\\">RestartHeuristics</span></span> {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span>;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, item: Self::Item);\\n    ...</code></pre><p>ここで、実装ごとにメソッド<code>add</code>に渡す引数を変えたいので、関連型<code>Item</code>を引数の型としてもたせた。\\n例えば、以下のような実装を実現したい。</p>\\n<ul>\\n<li>単なる数値(<code>f64</code>)を受け取って計算する<code>add</code></li>\\n<li>何か構造体へのmut pointer(<code>&amp;mut Var</code>)をもらってそれに対して変更を加えながら計算する<code>add</code></li>\\n</ul>\\n<p>それぞれ以下のような定義になった。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">impl</span> RestartHeuristics <span class=\\"hljs-keyword\\">for</span> RestartByLBD {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span> = <span class=\\"hljs-built_in\\">usize</span>;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, item: Self::Item) {...</code></pre><p>そして問題となる二つ目の定義：</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">impl</span> RestartHeuristics <span class=\\"hljs-keyword\\">for</span> VarSet {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span> = &amp;<span class=\\"hljs-keyword\\">mut</span> Var;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, v: Self::Item) {...</code></pre><p>これで <code>r.add(4);</code> とか <code>r.add(&amp;mut v);</code> とか自由に書けてスマート。\\nつまり、意味もなく<code>r.add(&amp;mut 4)</code>なんてことを強制されずに済んだ。\\nところが、これはコンパイルエラーになる。</p>\\n<pre><code>error[E0106]: missing lifetime specifier\\n   --&gt; src/var.rs:114:17\\n    |\\n114 |     type Item = &amp;mut Var;\\n    |                 ^ help: consider using the named lifetime: `&amp;\'a`\\n</code></pre>\\n<p>ポインタを渡しているので生存時間が必要らしい。\\nうーむ、メソッド<code>add</code>の中ではCopy可能なフィールドを参照、変更するだけなので生存時間が問題になることはないと思うのだけど。。。\\nともあれ、上記のヘルプに従ってこの引数に生存時間を追加した。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">impl</span> RestartHeuristics <span class=\\"hljs-keyword\\">for</span> VarSet {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Memory</span></span> = Ema2;\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span> = &amp;<span class=\\"hljs-symbol\\">&#x27;a</span> <span class=\\"hljs-keyword\\">mut</span> Var;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, v: Self::Item) {</code></pre><p>すると以下のエラー。</p>\\n<pre><code>error[E0261]: use of undeclared lifetime name `\'a`\\n   --&gt; src/var.rs:114:18\\n    |\\n114 |     type Item = &amp;\'a mut Var;\\n    |                  ^^ undeclared lifetime\\n</code></pre>\\n<p>なので、生存期間<code>\'a</code>を宣言できる唯一の場所<code>impl</code>に追加する（後述）。</p>\\n<pre><code>impl&lt;\'a&gt; RestartHeuristics for VarSet {\\n    type Memory = Ema2;\\n    type Item = &amp;\'a mut Var;\\n    fn add(&amp;mut self, v: Self::Item) {\\n</code></pre>\\n<p>すると今度は以下のエラー。</p>\\n<pre><code>error[E0207]: the lifetime parameter `\'a` is not constrained by the impl trait, self type, or predicates\\n   --&gt; src/var.rs:112:6\\n    |\\n112 | impl&lt;\'a&gt; RestartHeuristics for VarSet {\\n    |      ^^ unconstrained lifetime parameter\\n</code></pre>\\n<p>定義したものはトレイト（指示詞）かself型か述語(predicates)中で使え、だそうなので、\\nトレイトに追加してみる。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">pub</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">trait</span> <span class=\\"hljs-title\\">RestartHeuristics</span></span>&lt;<span class=\\"hljs-symbol\\">&#x27;a</span>&gt; {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span>;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, item: Self::Item);</code></pre><p>ここで、この生存期間パラメータの追加を各実装に反映させないと以下のエラーになる。</p>\\n<pre><code>error[E0726]: implicit elided lifetime not allowed here\\n   --&gt; src/restart.rs:100:6\\n    |\\n100 | impl RestartHeuristics for RestartByLBD {\\n    |      ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `&lt;\'_&gt;`\\n\\nerror[E0726]: implicit elided lifetime not allowed here\\n   --&gt; src/var.rs:112:10\\n    |\\n112 | impl&lt;\'a&gt; RestartHeuristics for VarSet {\\n    |          ^^^^^^^^^^^^^^^^^- help: indicate the anonymous lifetime: `&lt;\'_&gt;`\\n</code></pre>\\n<p>以下のように各実装に追加して、これで解決。</p>\\n<ul>\\n<li>ポインタが出てくるのでトレイトには生存期間パラメータが必要</li>\\n<li><code>usize</code>に対してはワイルドカードでOK</li>\\n<li>構造体へのポインタに対しては、それをトレイトのパラメータに反映</li>\\n</ul>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">impl</span> RestartHeuristics&lt;<span class=\\"hljs-symbol\\">&#x27;_</span>&gt; <span class=\\"hljs-keyword\\">for</span> RestartByLBD {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span> = <span class=\\"hljs-built_in\\">usize</span>;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, item: Self::Item) {...</code></pre><pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">impl</span>&lt;<span class=\\"hljs-symbol\\">&#x27;a</span>&gt; RestartHeuristics&lt;<span class=\\"hljs-symbol\\">&#x27;a</span>&gt; <span class=\\"hljs-keyword\\">for</span> VarSet {\\n    <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">type</span> <span class=\\"hljs-title\\">Item</span></span> = &amp;<span class=\\"hljs-symbol\\">&#x27;a</span> <span class=\\"hljs-keyword\\">mut</span> Var;\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">add</span></span>(&amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-keyword\\">self</span>, item: Self::Item) {...</code></pre><p>ということで</p>\\n<p>implやtraitキーワードで導入した（型や生存期間）変数は、</p>\\n<ul>\\n<li>トレイト名（指示詞）</li>\\n<li>Self -- <code>fn (&amp;\'a mut self,...)</code> ということか</li>\\n<li>述語(predicates) -- whereの後の型（生存期間）制約</li>\\n</ul>\\n<p>で使わないといけない。</p>\\n<p><em>参考</em></p>\\n<ul>\\n<li>https://stackoverflow.com/questions/52318662/what-is-a-predicate-in-rust</li>\\n</ul>\\n","dir":"article/.json/2019","base":"2019-08-08-rust-lifetime.json","ext":".json","sourceBase":"2019-08-08-rust-lifetime.md","sourceExt":".md"}')}}]);