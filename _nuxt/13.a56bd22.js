(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{490:function(n){n.exports=JSON.parse('{"title":"tex-print for old Emacs","subtitle":"pdfを直接生成するlatex系のためのtex-print","date":"2017-10-20T00:00:00.000Z","tags":["emacs","latex"],"bodyContent":"A customized tex-print for latex family that generate a pdf file directly.It works now!\\n\\n```lisp\\n(defun tex-print (&optional alt)\\n  \\"Print the .dvi file made by \\\\\\\\[tex-region], \\\\\\\\[tex-buffer] or \\\\\\\\[tex-file].\\nRuns the shell command defined by `tex-dvi-print-command\'.  If prefix argument\\nis provided, use the alternative command, `tex-alt-dvi-print-command\'.\\"\\n  (interactive \\"P\\")\\n  (let ((print-file-name-pdf (tex-append tex-print-file \\".pdf\\"))\\n\\t(print-file-name-dvi (tex-append tex-print-file \\".dvi\\"))\\n\\ttest-name)\\n    (if (and (not (equal (current-buffer) tex-last-buffer-texed))\\n\\t     (buffer-file-name)\\n\\t     ;; Check that this buffer\'s printed file is up to date.\\n\\t     (or\\n\\t      (file-newer-than-file-p\\n\\t       (setq test-name (tex-append (buffer-file-name) \\".pdf\\"))\\n\\t       (buffer-file-name))\\n\\t      (file-newer-than-file-p\\n\\t       (setq test-name (tex-append (buffer-file-name) \\".dvi\\"))\\n\\t       (buffer-file-name))))\\n\\t(setq print-file-name-dvi test-name))\\n    (and\\n     (not (file-exists-p print-file-name-dvi))\\n     (file-exists-p print-file-name-pdf)\\n     (setq print-file-name-dvi print-file-name-pdf))\\n    (if (not (file-exists-p print-file-name-dvi))\\n        (error \\"No appropriate `.pdf\' nor `.dvi\' file could be found %s \\" print-file-name-dvi)\\n      (if (tex-shell-running)\\n          (tex-kill-job)\\n        (tex-start-shell))\\n      (tex-send-command\\n       (if alt tex-alt-dvi-print-command tex-dvi-print-command)\\n       print-file-name-dvi\\n       t))))\\n```","bodyHtml":"<p>A customized tex-print for latex family that generate a pdf file directly.It works now!</p>\\n<pre><code class=\\"hljs\\">(<span class=\\"hljs-name\\">defun</span> tex-print (<span class=\\"hljs-name\\">&amp;optional</span> alt)\\n  <span class=\\"hljs-string\\">\\"Print the .dvi file made by \\\\\\\\[tex-region], \\\\\\\\[tex-buffer] or \\\\\\\\[tex-file].\\nRuns the shell command defined by `tex-dvi-print-command\'.  If prefix argument\\nis provided, use the alternative command, `tex-alt-dvi-print-command\'.\\"</span>\\n  (<span class=\\"hljs-name\\">interactive</span> <span class=\\"hljs-string\\">\\"P\\"</span>)\\n  (<span class=\\"hljs-name\\">let</span> ((<span class=\\"hljs-name\\">print-file-name-pdf</span> (<span class=\\"hljs-name\\">tex-append</span> tex-print-file <span class=\\"hljs-string\\">\\".pdf\\"</span>))\\n\\t(<span class=\\"hljs-name\\">print-file-name-dvi</span> (<span class=\\"hljs-name\\">tex-append</span> tex-print-file <span class=\\"hljs-string\\">\\".dvi\\"</span>))\\n\\ttest-name)\\n    (<span class=\\"hljs-name\\">if</span> (<span class=\\"hljs-name\\">and</span> (<span class=\\"hljs-name\\">not</span> (<span class=\\"hljs-name\\">equal</span> (<span class=\\"hljs-name\\">current-buffer</span>) tex-last-buffer-texed))\\n\\t     (<span class=\\"hljs-name\\">buffer-file-name</span>)\\n\\t     <span class=\\"hljs-comment\\">;; Check that this buffer\'s printed file is up to date.</span>\\n\\t     (<span class=\\"hljs-name\\">or</span>\\n\\t      (<span class=\\"hljs-name\\">file-newer-than-file-p</span>\\n\\t       (<span class=\\"hljs-name\\">setq</span> test-name (<span class=\\"hljs-name\\">tex-append</span> (<span class=\\"hljs-name\\">buffer-file-name</span>) <span class=\\"hljs-string\\">\\".pdf\\"</span>))\\n\\t       (<span class=\\"hljs-name\\">buffer-file-name</span>))\\n\\t      (<span class=\\"hljs-name\\">file-newer-than-file-p</span>\\n\\t       (<span class=\\"hljs-name\\">setq</span> test-name (<span class=\\"hljs-name\\">tex-append</span> (<span class=\\"hljs-name\\">buffer-file-name</span>) <span class=\\"hljs-string\\">\\".dvi\\"</span>))\\n\\t       (<span class=\\"hljs-name\\">buffer-file-name</span>))))\\n\\t(<span class=\\"hljs-name\\">setq</span> print-file-name-dvi test-name))\\n    (<span class=\\"hljs-name\\">and</span>\\n     (<span class=\\"hljs-name\\">not</span> (<span class=\\"hljs-name\\">file-exists-p</span> print-file-name-dvi))\\n     (<span class=\\"hljs-name\\">file-exists-p</span> print-file-name-pdf)\\n     (<span class=\\"hljs-name\\">setq</span> print-file-name-dvi print-file-name-pdf))\\n    (<span class=\\"hljs-name\\">if</span> (<span class=\\"hljs-name\\">not</span> (<span class=\\"hljs-name\\">file-exists-p</span> print-file-name-dvi))\\n        (<span class=\\"hljs-name\\">error</span> <span class=\\"hljs-string\\">\\"No appropriate `.pdf\' nor `.dvi\' file could be found %s \\"</span> print-file-name-dvi)\\n      (<span class=\\"hljs-name\\">if</span> (<span class=\\"hljs-name\\">tex-shell-running</span>)\\n          (<span class=\\"hljs-name\\">tex-kill-job</span>)\\n        (<span class=\\"hljs-name\\">tex-start-shell</span>))\\n      (<span class=\\"hljs-name\\">tex-send-command</span>\\n       (<span class=\\"hljs-name\\">if</span> alt tex-alt-dvi-print-command tex-dvi-print-command)\\n       print-file-name-dvi\\n       <span class=\\"hljs-literal\\">t</span>))))</code></pre>","dir":"article/.json/2017","base":"2017-10-20-emacs-tex-print.json","ext":".json","sourceBase":"2017-10-20-emacs-tex-print.md","sourceExt":".md"}')}}]);