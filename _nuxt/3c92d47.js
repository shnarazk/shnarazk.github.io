(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{615:function(n){n.exports=JSON.parse('{"title":"Scratchでの変数のスコープ","subtitle":null,"date":"2021-06-22T00:00:00.000Z","tags":["Scratch"],"banner":"/img/2021/06-22-scratch/shared-var.png","bodyContent":"Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\\nこれだとあまり変数の必要性を感じない。\\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。\\n\\nで、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。\\n\\n![](/img/2021/06-22-scratch/define-var.png)\\n\\nここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。\\n\\n## 結論\\n\\n- `すべてのスプライト用` -- 全てのスプライト、全てのクローンで共有。完全にglobal。\\n- `このスプライトのみ` -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。\\n\\n従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、\\n\\n- 各スプライトの座標はスプライトローカル\\n- 投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）\\n- 呼び出し時に座標を引数として渡す\\n\\nということになる。\\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。\\n\\n![](/img/2021/06-22-scratch/func1.png)\\n\\nうーん。\\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。\\n\\n### 別案\\n\\nこの作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。\\n\\n```rust\\nfn swap(a: &mut usize, b: &mut usize, mut c: &mut usize) {\\n  *c = *a;\\n  *a = *b;\\n  *b = *c;\\n}\\n```\\n\\n![](/img/2021/06-22-scratch/func2.png)\\n\\nあ、代入文で選択できない！引数はimmutableに決定か。","bodyHtml":"<p>Scratchはイベント発火やメッセージベースで同期を取るマルチスレッドシステムとしてコーディングするのが簡単。\\nこれだとあまり変数の必要性を感じない。\\nただし、高度なことをするためにはもちろん関数や変数による状態管理をせざるを得ない。</p>\\n<p>で、変数を定義するのだけども、定義時にのみ共有レベルが指定できる。</p>\\n<p><img src=\\"/img/2021/06-22-scratch/define-var.png\\" alt=\\"\\"></p>\\n<p>ここでグローバルを選ばないと、その変数は他スプライトからは見えないのだろうが、ではクローンされたスレッド間ではどうなるのだろう。その理解が必要となる。</p>\\n<h2>結論</h2>\\n<ul>\\n<li><code>すべてのスプライト用</code> -- 全てのスプライト、全てのクローンで共有。完全にglobal。</li>\\n<li><code>このスプライトのみ</code> -- スコープはこのスプライトのみ、スプライトのクローンにより変数もクローンされる。従ってthread local storageに対応。</li>\\n</ul>\\n<p>従って、各スプライト(弾幕を作るためクローンされる)が3次元座標を持ち、2次元投影関数で表示を行うなら、</p>\\n<ul>\\n<li>各スプライトの座標はスプライトローカル</li>\\n<li>投影関数はローカル（ブロック定義は常にスレッド（スプライト）ローカル）</li>\\n<li>呼び出し時に座標を引数として渡す</li>\\n</ul>\\n<p>ということになる。\\n問題は関数内ローカル変数なのだが、このままだとスプライトが変わるたびに再定義しなければならない。</p>\\n<p><img src=\\"/img/2021/06-22-scratch/func1.png\\" alt=\\"\\"></p>\\n<p>うーん。\\n誰もスプライトはアクセスしないとみなして、この関数のみがworking areaとして使う大域変数\\n(見えてしまうけどもstatic領域みたいな)とするのが実際的な落とし所だろうか。</p>\\n<h3>別案</h3>\\n<p>この作業用ローカル変数も関数の引数で渡してしまうというやり方は使えるだろうか。スマートだろうか。</p>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">fn</span> <span class=\\"hljs-title\\">swap</span></span>(a: &amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-built_in\\">usize</span>, b: &amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-built_in\\">usize</span>, <span class=\\"hljs-keyword\\">mut</span> c: &amp;<span class=\\"hljs-keyword\\">mut</span> <span class=\\"hljs-built_in\\">usize</span>) {\\n  *c = *a;\\n  *a = *b;\\n  *b = *c;\\n}</code></pre><p><img src=\\"/img/2021/06-22-scratch/func2.png\\" alt=\\"\\"></p>\\n<p>あ、代入文で選択できない！引数はimmutableに決定か。</p>\\n","dir":"article/.json/2021","base":"2021-06-22-scope-of-vars-in-Scratch.json","ext":".json","sourceBase":"2021-06-22-scope-of-vars-in-Scratch.md","sourceExt":".md"}')}}]);