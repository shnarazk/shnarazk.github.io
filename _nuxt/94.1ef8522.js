(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{571:function(n){n.exports=JSON.parse('{"title":"JUSTANOTE Version 1.0.2","subtitle":"import from GitHub Gist","date":"2020-08-14T00:00:00.000Z","tags":["justanote"],"bodyContent":"このブログの静的サイトジェネレータ（名前はまだないとりあえず\\"JUSTANOTE\\"にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。\\n\\n\\n[Observable](https://observablehq.com/)が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日掛かってしまいました。\\n\\n* githubが埋め込み用に提供するのはjavascriptまたはjson。ちょっとjavascriptは置いといてjsonを使う方向で計画。\\n* ところがjsonを読み込もうとすると `Cross-Access-Allow-Origin` の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるけどかっこ悪い。\\n* asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 `nuxtServerInit`　をストアに追加。（追加するのも一苦労。actionsの中に書くのね。）\\n\\n```js\\nexport const actions = {\\n  async nuxtServerInit({ commit }) {\\n```\\n\\n* さらに `forEach` で呼び出す関数が `async` にできないことを理解するのに一苦労（まあ、`nuxtServerInit`の先頭に`async`を置きながら、forEachの無名関数にもおかなくていいのか **うっすらと** 疑問は感じてた）。\\nこれでレンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでfetchの問題解決。\\n\\n* 平行して、取ってきたjsonの中のhtmlセグメント中の `iframe` の大きさの取り扱いにも一苦労。\\njupyter notebookを貼り付けたgistだけは`height: auto`が効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、`height: 2000px;`にしてしまうクラスを使うようにしました。\\n\\n```js\\n      <div :id=\\"$route.params.slug\\" class=\\"githubgist-content\\" :class=\\"{ \'githubgist-frame\': article.frame }\\">\\n        <span v-html=\\"article.content\\"></span>\\n      </div>\\n\\n```\\n\\n* 後は`axios.get` ではデータそのものではなくレスポンスが帰ってくるので\\n\\n```js\\nconst json = axios.get(url).then((res) => { return res.data })\\n```\\n\\nでなければいけない問題。これもちょっとはまりました。一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。","bodyHtml":"<p>このブログの静的サイトジェネレータ（名前はまだないとりあえず&quot;JUSTANOTE&quot;にしておきます）をバージョン1.0.2に更新しました。変更点はgithub.comに作ったgistが取り込めるようになったこと。</p>\\n<p><a href=\\"https://observablehq.com/\\">Observable</a>が（結構）簡単に取り込めたので、1時間程度でできるかと思ったら数日掛かってしまいました。</p>\\n<ul>\\n<li>githubが埋め込み用に提供するのはjavascriptまたはjson。ちょっとjavascriptは置いといてjsonを使う方向で計画。</li>\\n<li>ところがjsonを読み込もうとすると <code>Cross-Access-Allow-Origin</code> の制約に引っかかってデータがとって来れない。手動でリロードを掛けて、サーバー側のレンダリングされたページを持ってくれば表示はできるけどかっこ悪い。</li>\\n<li>asyncDataなのかfetchなのか、どこに書けばベストなのか、他（下）の問題も解決しながら、調べて実験して、結局 <code>nuxtServerInit</code>　をストアに追加。（追加するのも一苦労。actionsの中に書くのね。）</li>\\n</ul>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">export</span> <span class=\\"hljs-keyword\\">const</span> actions = {\\n  <span class=\\"hljs-keyword\\">async</span> nuxtServerInit({ commit }) {</code></pre><ul>\\n<li>\\n<p>さらに <code>forEach</code> で呼び出す関数が <code>async</code> にできないことを理解するのに一苦労（まあ、<code>nuxtServerInit</code>の先頭に<code>async</code>を置きながら、forEachの無名関数にもおかなくていいのか <strong>うっすらと</strong> 疑問は感じてた）。\\nこれでレンダリングが始まる前に全てのエントリーのデータを持って来れるようになったのでfetchの問題解決。</p>\\n</li>\\n<li>\\n<p>平行して、取ってきたjsonの中のhtmlセグメント中の <code>iframe</code> の大きさの取り扱いにも一苦労。\\njupyter notebookを貼り付けたgistだけは<code>height: auto</code>が効かない（コンテンツの高さがデフォルトの150pxに固定されてしまう）。しょうがないので、設定ファイル中でipynbかどうかを指定するフラグを用意して、そのフラグが立っていたら、<code>height: 2000px;</code>にしてしまうクラスを使うようにしました。</p>\\n</li>\\n</ul>\\n<pre><code class=\\"hljs\\">&lt;div :id=<span class=\\"hljs-string\\">\\"$route.params.slug\\"</span> <span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span></span>=<span class=\\"hljs-string\\">\\"githubgist-content\\"</span> :<span class=\\"hljs-class\\"><span class=\\"hljs-keyword\\">class</span></span>=<span class=\\"hljs-string\\">\\"{ \'githubgist-frame\': article.frame }\\"</span>&gt;\\n        <span class=\\"xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">span</span> <span class=\\"hljs-attr\\">v-html</span>=<span class=\\"hljs-string\\">\\"article.content\\"</span>&gt;</span><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">span</span>&gt;</span></span>\\n      <span class=\\"xml\\"><span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">div</span>&gt;</span></span></code></pre><ul>\\n<li>後は<code>axios.get</code> ではデータそのものではなくレスポンスが帰ってくるので</li>\\n</ul>\\n<pre><code class=\\"hljs\\"><span class=\\"hljs-keyword\\">const</span> json = axios.get(url).then(<span class=\\"hljs-function\\">(<span class=\\"hljs-params\\">res</span>) =&gt;</span> { <span class=\\"hljs-keyword\\">return</span> res.data })</code></pre><p>でなければいけない問題。これもちょっとはまりました。一個一個の問題は大したことないのだけど、切り分けができない多数の問題が降ってきたので、あああ、疲れた。</p>\\n","dir":"article/.json/2020","base":"2020-08-14-justanote-102.json","ext":".json","sourceBase":"2020-08-14-justanote-102.md","sourceExt":".md"}')}}]);