(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{589:function(n){n.exports=JSON.parse('{"title":"UNSAT LOG, 2020, Sep.","subtitle":"Vol.1, No.9.","date":"2020-10-10T00:00:00.000Z","tags":["SAT","splr","unsatlog"],"banner":"/img/2020/10-10/banner.jpg","bodyContent":"## 怪我の8〜9月\\n\\nすっかり遅くなってしまった。あちこち怪我したせいで色々と時間をとられてしまいました。9月はパラメータチューニングだけやって0.5.2をリリースするつもりだったのだけど、実行時間に対して求解可能問題が単調に増えるソルバにしたくてやっている最中にまた脱線してしまいました。ということで特に成果なし。強いて言うなら、\\n\\n* `StructOpts`への依存を削除。オブジェクトサイズがほぼ半減した！さらに`libc`への依存も実は std::time::{Duration, Instant}　で代替できたのでこれも削除。今やSplrが依存するのは`bitflags`だけ！\\n\\n* つい昨日気づいたけどリスタート延期の判断を矛盾発生時まで遅延させるのは筋が悪い。タイミングを逸している。作り直すべき。9月に散々試したいろいろなstabilizationの実験結果は全て放棄することになりました。まあ、リスタートに関するオリジナルの尺度は捨ててもいいかなと思っていたところではある。しかし、何を使っても実はベンチマークの設定が超短期間ならあまり意味がなくて、十分に線形に求解数が伸びていくことの方が大事なんだろう。これを実践するにはリソースがなさすぎ。\\n\\n* これまではchronoBTの理解ができていない箇所をうまいこと避けるような実装になっていたけど、レアケースでは無限ループに陥っていたことが判明。矛盾レベルのリテラルが一つしか含まれない矛盾節に対するバックトラックの処理を正しく実装し直した。\\n\\n* もしかしてと思ってリテラル監視節リストをVecDequeにしてみたりBinaryHeapにしてみたりしました。stabilizationと同じ効果があるのではと思ったのだけど、全般的にはむしろ性能悪化の傾向。計算量多すぎ。そもそもSplrのカクタスプロットが早い段階から悪化するのはやはり計算量のレベルの問題だろうか。\\n\\n他に何かあったかな？　思い出したら追加します。\\n\\n### 追伸\\n\\n[sudoku25が5000秒以内に解けなかった](/2020/2020-08-19-sudoku25/)のが大変ショックなのでした。","bodyHtml":"<h2>怪我の8〜9月</h2>\\n<p>すっかり遅くなってしまった。あちこち怪我したせいで色々と時間をとられてしまいました。9月はパラメータチューニングだけやって0.5.2をリリースするつもりだったのだけど、実行時間に対して求解可能問題が単調に増えるソルバにしたくてやっている最中にまた脱線してしまいました。ということで特に成果なし。強いて言うなら、</p>\\n<ul>\\n<li>\\n<p><code>StructOpts</code>への依存を削除。オブジェクトサイズがほぼ半減した！さらに<code>libc</code>への依存も実は std::time::{Duration, Instant}　で代替できたのでこれも削除。今やSplrが依存するのは<code>bitflags</code>だけ！</p>\\n</li>\\n<li>\\n<p>つい昨日気づいたけどリスタート延期の判断を矛盾発生時まで遅延させるのは筋が悪い。タイミングを逸している。作り直すべき。9月に散々試したいろいろなstabilizationの実験結果は全て放棄することになりました。まあ、リスタートに関するオリジナルの尺度は捨ててもいいかなと思っていたところではある。しかし、何を使っても実はベンチマークの設定が超短期間ならあまり意味がなくて、十分に線形に求解数が伸びていくことの方が大事なんだろう。これを実践するにはリソースがなさすぎ。</p>\\n</li>\\n<li>\\n<p>これまではchronoBTの理解ができていない箇所をうまいこと避けるような実装になっていたけど、レアケースでは無限ループに陥っていたことが判明。矛盾レベルのリテラルが一つしか含まれない矛盾節に対するバックトラックの処理を正しく実装し直した。</p>\\n</li>\\n<li>\\n<p>もしかしてと思ってリテラル監視節リストをVecDequeにしてみたりBinaryHeapにしてみたりしました。stabilizationと同じ効果があるのではと思ったのだけど、全般的にはむしろ性能悪化の傾向。計算量多すぎ。そもそもSplrのカクタスプロットが早い段階から悪化するのはやはり計算量のレベルの問題だろうか。</p>\\n</li>\\n</ul>\\n<p>他に何かあったかな？　思い出したら追加します。</p>\\n<h3>追伸</h3>\\n<p><a href=\\"/2020/2020-08-19-sudoku25/\\">sudoku25が5000秒以内に解けなかった</a>のが大変ショックなのでした。</p>\\n","dir":"article/.json/2020","base":"2020-10-10-UNSATlog.json","ext":".json","sourceBase":"2020-10-10-UNSATlog.md","sourceExt":".md"}')}}]);